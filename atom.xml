<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Swhite ★ Notes</title>
  <subtitle>星火燎原</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.baixiaojian.com/"/>
  <updated>2018-10-12T06:50:32.490Z</updated>
  <id>http://www.baixiaojian.com/</id>
  
  <author>
    <name>Small white</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>python</title>
    <link href="http://www.baixiaojian.com/python/"/>
    <id>http://www.baixiaojian.com/python/</id>
    <published>2018-10-05T05:20:53.000Z</published>
    <updated>2018-10-12T06:50:32.490Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li>#开头，注释</li>
<li>缩进的语句视为代码块</li>
<li>大小写敏感</li>
</ul>
<h2 id="数据类型和变量"><a href="#数据类型和变量" class="headerlink" title="数据类型和变量"></a>数据类型和变量</h2><ul>
<li>True 和 False 首字母大写</li>
<li>and、or 和 not</li>
<li>空值：None</li>
</ul>
<h2 id="字符串格式化"><a href="#字符串格式化" class="headerlink" title="字符串格式化%"></a>字符串格式化%</h2><ul>
<li>%d 整数</li>
<li>%f 浮点数</li>
<li>%s 字符串</li>
<li>%x 十六进制整数</li>
<li>补位</li>
</ul>
<a id="more"></a>
<figure class="highlight py"><table><tr><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'%2d-%02d'</span> % (<span class="number">3</span>, <span class="number">1</span>)</div><div class="line"><span class="string">' 3-01'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'%.2f'</span> % <span class="number">3.1415926</span></div><div class="line"><span class="string">'3.14'</span></div></pre></td></tr></table></figure>
<h2 id="数组：list-和-tuple"><a href="#数组：list-和-tuple" class="headerlink" title="数组：list 和 tuple"></a>数组：list 和 tuple</h2><ul>
<li>list 数组<ul>
<li>len(list)得到长度</li>
<li>list[-2]获得倒数第二个元素</li>
<li>list.append(ele)往 list 中追加元素到末尾</li>
<li>list.insert(1, ele)，把元素插入到指定的位置，比如索引号为 1 的位置</li>
<li>list.pop()，删除 list 末尾的元素，用 pop()方法</li>
<li>list.pop(i)删除指定位置的元素，用 pop(i)方法，其中 i 是索引位置</li>
<li>元素的数据类型也可以不同，L = [‘Apple’, 123, True]</li>
</ul>
</li>
<li>tuple 数组：classmates = (‘Michael’, ‘Bob’, ‘Tracy’)<ul>
<li>tuple 一旦初始化就不能修改，代码更安全</li>
</ul>
</li>
</ul>
<h2 id="条件判断和循环"><a href="#条件判断和循环" class="headerlink" title="条件判断和循环"></a>条件判断和循环</h2><ul>
<li>if elif else</li>
<li>for in</li>
<li>while</li>
<li><p>range()函数</p>
<figure class="highlight py"><table><tr><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>range(<span class="number">1</span>,<span class="number">5</span>) <span class="comment">#代表从1到5(不包含5)</span></div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>range(<span class="number">1</span>,<span class="number">5</span>,<span class="number">2</span>) <span class="comment">#代表从1到5，间隔2(不包含5)</span></div><div class="line">[<span class="number">1</span>, <span class="number">3</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>range(<span class="number">5</span>) <span class="comment">#代表从0到5(不包含5)</span></div><div class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</div></pre></td></tr></table></figure>
</li>
<li><p>raw_inpit(str)读取的内容永远以字符串的形式返回</p>
</li>
</ul>
<h2 id="dict-和-set"><a href="#dict-和-set" class="headerlink" title="dict 和 set"></a>dict 和 set</h2><ul>
<li>dict 就是 map，用 key-value 的形式存储。</li>
</ul>
<figure class="highlight py"><table><tr><td class="code"><pre><div class="line">d = &#123;<span class="string">'Michael'</span>: <span class="number">95</span>, <span class="string">'Bob'</span>: <span class="number">75</span>, <span class="string">'Tracy'</span>: <span class="number">85</span>&#125;</div></pre></td></tr></table></figure>
<ul>
<li>根据 key 获得 value<ul>
<li>[]：一旦 key 不存在就会报错</li>
<li>get()函数：如果 key 不存在，可以返回 None，或者自己指定的 value（作为第二个参数传入）</li>
<li>‘Thomas’ in d 如果不存在则返回 False</li>
</ul>
</li>
<li>set 是一组 key 的集合，但不存储 value，key 不能重复。<ul>
<li>需要 list 作为输入</li>
<li>add(key)函数用来往里面添加元素，自动忽略重复</li>
<li>remove(key)函数用来删除元素</li>
<li>&amp;操作用来做交集</li>
<li>|操作用来做并集</li>
</ul>
</li>
</ul>
<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p><a href="https://docs.python.org/2/library/functions.html" rel="external nofollow noopener noreferrer" target="_blank">所有内置函数</a></p>
<ul>
<li>类型检查 <code>isinstance</code></li>
<li>可变参数 <strong>*</strong></li>
<li>关键字参数 ** ,</li>
<li>参数定义的顺序必须</li>
</ul>
<h3 id="默认参数"><a href="#默认参数" class="headerlink" title="默认参数"></a>默认参数</h3><figure class="highlight py"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">power</span><span class="params">(x, n = <span class="number">2</span>)</span>:</span></div><div class="line">    s = <span class="number">1</span></div><div class="line">    <span class="keyword">while</span> n &gt; <span class="number">0</span>:</div><div class="line">        n = n - <span class="number">1</span></div><div class="line">        s = s * x</div><div class="line">    <span class="keyword">return</span> s</div></pre></td></tr></table></figure>
<blockquote>
<p><strong>定义默认参数要牢记一点：默认参数必须指向不变对象！</strong></p>
</blockquote>
<h3 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h3><figure class="highlight py"><table><tr><td class="code"><pre><div class="line">a = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>]</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">calc</span><span class="params">(*numbers)</span>:</span></div><div class="line">    sum = <span class="number">0</span></div><div class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> numbers:</div><div class="line">        sum = sum + n * n</div><div class="line">    <span class="keyword">return</span> sum</div><div class="line">calc(<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>) <span class="comment"># 10</span></div><div class="line">calc(*a) <span class="comment"># 10</span></div></pre></td></tr></table></figure>
<h3 id="关键参数"><a href="#关键参数" class="headerlink" title="关键参数"></a>关键参数</h3><figure class="highlight py"><table><tr><td class="code"><pre><div class="line">extra = &#123;<span class="string">'city'</span>: <span class="string">'Beijing'</span>, <span class="string">'job'</span>: <span class="string">'Engineer'</span>&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">person</span><span class="params">(name, age, **kw)</span>:</span></div><div class="line">    print(<span class="string">'name:'</span>, name, <span class="string">'age:'</span>, age, <span class="string">'other:'</span>, kw)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>person(<span class="string">'Michael'</span>, <span class="number">30</span>)</div><div class="line"><span class="comment"># name: Michael age: 30 other: &#123;&#125;</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>person(<span class="string">'Adam'</span>, <span class="number">45</span>, gender = <span class="string">'M'</span>, job = <span class="string">'Engineer'</span>)</div><div class="line"><span class="comment"># name: Adam age: 45 other: &#123;'gender': 'M', 'job': 'Engineer'&#125;</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>person(<span class="string">'Jack'</span>, <span class="number">24</span>, city = extra[<span class="string">'city'</span>], job = extra[<span class="string">'job'</span>])</div><div class="line"><span class="comment"># name: Jack age: 24 other: &#123;'city': 'Beijing', 'job': 'Engineer'&#125;</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>person(<span class="string">'Jack'</span>, <span class="number">24</span>, **extra)</div><div class="line"><span class="comment"># name: Jack age: 24 other: &#123;'city': 'Beijing', 'job': 'Engineer'&#125;</span></div></pre></td></tr></table></figure>
<blockquote>
<p>kw 获得的 dict 是 extra 的一份拷贝，对 kw 的改动不会影响到函数外的 extra。</p>
</blockquote>
<h3 id="命名关键字参数"><a href="#命名关键字参数" class="headerlink" title="命名关键字参数"></a>命名关键字参数</h3><p><code>*号</code> 后面的参数被视为 <strong>命名关键字参数</strong></p>
<figure class="highlight py"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">person</span><span class="params">(name, age, *, city = <span class="string">'shanghai'</span>, job)</span>:</span></div><div class="line">    <span class="comment"># 没有 city 和 job 字段或多了其他字段则会报错</span></div><div class="line">    print(name, age, city, job)</div><div class="line"></div><div class="line">person(<span class="string">'Jack'</span>, <span class="number">24</span>, city=<span class="string">'Beijing'</span>, job=<span class="string">'Engineer'</span>)</div><div class="line"><span class="comment"># Jack 24 Beijing Engineer</span></div></pre></td></tr></table></figure>
<p>如果函数定义中已经有了一个可变参数，后面跟着的命名关键字参数就不再需要一个特殊分隔符 * 了：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">person</span><span class="params">(name, age, *args, city, job)</span>:</span></div><div class="line">    print(name, age, args, city, job)</div><div class="line"></div><div class="line">person(<span class="string">'张三'</span>, <span class="number">12</span>, <span class="number">213</span>, city=<span class="string">'北京'</span>, job=<span class="string">'frontEnd'</span>)</div><div class="line"><span class="comment"># 张三 12 (12, 213) 北京 frontEnd</span></div></pre></td></tr></table></figure>
<blockquote>
<p>如果没有 <strong>可变参数</strong>，就必须加一个 <code>*</code> 作为特殊分隔符。如果缺少*，Python 解释器将无法识别 <strong>位置参数</strong> 和 <strong>命名关键字参数</strong></p>
</blockquote>
<h3 id="参数组合"><a href="#参数组合" class="headerlink" title="参数组合"></a>参数组合</h3><p>在 Python 中定义函数，可以用必选参数、默认参数、可变参数、关键字参数和命名关键字参数，这 5 种参数都可以组合使用。</p>
<p>但是请注意，参数定义的顺序必须是：</p>
<ol>
<li>必选参数</li>
<li>默认参数 <code>x = 5</code></li>
<li>可变参数 <code>*num</code></li>
<li>命名关键字参数 <code>**ak</code></li>
<li>关键字参数 <code>*</code> (如存在可变参数则不需声明)</li>
</ol>
<h3 id="定义空函数"><a href="#定义空函数" class="headerlink" title="定义空函数"></a>定义空函数</h3><figure class="highlight py"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">nop</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">pass</span></div></pre></td></tr></table></figure>
<blockquote>
<p><em>pass 可以用来作为占位符</em></p>
</blockquote>
<h2 id="高级特性"><a href="#高级特性" class="headerlink" title="高级特性"></a>高级特性</h2><h3 id="切片（Slice-）"><a href="#切片（Slice-）" class="headerlink" title="切片（Slice ）"></a>切片（Slice ）</h3><figure class="highlight py"><table><tr><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>L = [<span class="string">'Michael'</span>, <span class="string">'Sarah'</span>, <span class="string">'Tracy'</span>, <span class="string">'Bob'</span>, <span class="string">'Jack'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>L[<span class="number">0</span>:<span class="number">3</span>]</div><div class="line">[<span class="string">'Michael'</span>, <span class="string">'Sarah'</span>, <span class="string">'Tracy'</span>]</div></pre></td></tr></table></figure>
<ul>
<li><code>L[0:3]</code> 表示，从索引 0 开始取，直到索引 3 为止，但不包括索引 3。即索引 0，1，2，正好是 3 个元素。</li>
<li>如果第一个索引是 0，还可以省略。</li>
<li><code>L[-1]</code> 取倒数第一个元素，也支持倒数切片：L(-2:)</li>
<li><code>只写[:]</code> 就可以原样复制一个 list</li>
<li><code>L[:10:2]</code> 表示前十个元素，每两个取一个：[0,2,4,6,8]</li>
<li><code>L[:10:2]</code> 前 10 个数，每两个取一个</li>
<li><code>L[::5]</code> 所有数，每 5 个取一个：</li>
<li><code>tuple</code> 也可以用切片，操作结果也是 tuple</li>
<li>字符串也支持切片</li>
</ul>
<h3 id="迭代（Iteration）"><a href="#迭代（Iteration）" class="headerlink" title="迭代（Iteration）"></a>迭代（Iteration）</h3><ul>
<li>只要是可迭代对象（list，tuple，dict，set，字符串）都可以用 for…in…迭代</li>
<li>默认情况下，dict 迭代的是 key。<ul>
<li>如果要迭代 value，可以用 for value in d.itervalues()</li>
<li>如果要同时迭代 key 和 value，可以用 for k, v in d.iteritems()。</li>
</ul>
</li>
<li>判断一个对象是否是可迭代对象：</li>
</ul>
<figure class="highlight py"><table><tr><td class="code"><pre><div class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Iterable</div><div class="line">isinstance(<span class="string">'abc'</span>, Iterable) <span class="comment"># str是否可迭代 True</span></div><div class="line">isinstance([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>], Iterable) <span class="comment"># list是否可迭代 True</span></div><div class="line">isinstance(<span class="number">123</span>, Iterable) <span class="comment"># 整数是否可迭代 False</span></div></pre></td></tr></table></figure>
<p><strong>拥有下标的循环：</strong></p>
<figure class="highlight py"><table><tr><td class="code"><pre><div class="line"><span class="keyword">for</span> i, value <span class="keyword">in</span> enumerate([<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>]):</div><div class="line">  <span class="keyword">print</span> i, value</div></pre></td></tr></table></figure>
<p><strong>for 循环同时引用两个变量：</strong></p>
<figure class="highlight py"><table><tr><td class="code"><pre><div class="line"><span class="keyword">for</span> x, y <span class="keyword">in</span> [(<span class="number">1</span>, <span class="number">1</span>), (<span class="number">2</span>, <span class="number">4</span>), (<span class="number">3</span>, <span class="number">9</span>)]:</div><div class="line">	<span class="keyword">print</span> x, y</div></pre></td></tr></table></figure>
<h3 id="列表生成式（List-Comprehensions）"><a href="#列表生成式（List-Comprehensions）" class="headerlink" title="列表生成式（List Comprehensions）"></a>列表生成式（List Comprehensions）</h3><ul>
<li>[x * x for x in range(1, 11)] =&gt; [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]</li>
<li>加上判断：[x * x for x in range(1, 11) if x % 2 == 0] =&gt; [4, 16, 36, 64, 100]</li>
<li>两层循环（可以用来生成<code>全排列</code>）：[m + n for m in ‘ABC’ for n in ‘XYZ’] =&gt; [‘AX’, ‘AY’, ‘AZ’, ‘BX’, ‘BY’, ‘BZ’, ‘CX’, ‘CY’, ‘CZ’]</li>
</ul>
<h3 id="生成器（Generator）"><a href="#生成器（Generator）" class="headerlink" title="生成器（Generator）"></a>生成器（Generator）</h3><blockquote>
<p>在 Python 中，这种一边循环一边计算的机制，称为生成器：generator。</p>
</blockquote>
<p>生成器里面装了用来生成一个 list 的<code>算法</code>，这样就不必创建完整的 list，从而大量的<code>节省空间</code>。</p>
<ul>
<li>如何创建 generator<ul>
<li>把列表生成的 [] 改成 ()</li>
<li>函数内使用 <code>yield</code></li>
</ul>
</li>
</ul>
<figure class="highlight py"><table><tr><td class="code"><pre><div class="line">g = (x * x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">3</span>))</div><div class="line">g.next() <span class="comment"># 0</span></div><div class="line">g.next() <span class="comment"># 1</span></div><div class="line">g.next() <span class="comment"># 4</span></div><div class="line">g.next() <span class="comment"># StopIteration</span></div><div class="line"></div><div class="line"><span class="keyword">for</span> n <span class="keyword">in</span> g:</div><div class="line">  <span class="keyword">print</span> n</div></pre></td></tr></table></figure>
<p>定义 generator 的另一种方法，yield：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">(max)</span>:</span></div><div class="line">    n, a, b = <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span></div><div class="line">    <span class="keyword">while</span> n &lt; max:</div><div class="line">        <span class="keyword">yield</span> b</div><div class="line">        a, b = b, a + b</div><div class="line">        n = n + <span class="number">1</span></div><div class="line">    <span class="keyword">return</span> <span class="string">'done'</span></div></pre></td></tr></table></figure>
<blockquote>
<p>如果一个函数定义中包含 <code>yield</code> 关键字，那么这个函数就不再是一个普通函数，而是一个 <code>generator</code></p>
</blockquote>
<p>可以直接使用 for 循环来迭代, 但是那样获取不到返回值, 必须使用捕获 <code>StopIteration</code> 错误, 返回值包含在 StopIteration 的 value 中：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><div class="line">g = fib(<span class="number">6</span>)</div><div class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">     <span class="keyword">try</span>:</div><div class="line">         x = next(g)</div><div class="line">         print(<span class="string">'g:'</span>, x)</div><div class="line">     <span class="keyword">except</span> StopIteration <span class="keyword">as</span> e:</div><div class="line">         print(<span class="string">'Generator return value:'</span>, e.value)</div><div class="line">         <span class="keyword">break</span></div><div class="line"><span class="comment"># g: 1</span></div><div class="line"><span class="comment"># ...</span></div><div class="line"><span class="comment"># Generator return value: done</span></div></pre></td></tr></table></figure>
<h4 id="Generator-的执行顺序"><a href="#Generator-的执行顺序" class="headerlink" title="Generator 的执行顺序"></a>Generator 的执行顺序</h4><p><code>generator</code> 函数在每次调用 next()时时候执行到 <code>yield</code> 语句返回，再次执行时从上次返回的 yield 语句处继续执行。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">odd</span><span class="params">()</span>:</span></div><div class="line">    print(<span class="string">'step 1'</span>)</div><div class="line">    <span class="keyword">yield</span> <span class="number">1</span></div><div class="line">    print(<span class="string">'step 2'</span>)</div><div class="line">    <span class="keyword">yield</span>(<span class="number">3</span>)</div><div class="line">    print(<span class="string">'step 3'</span>)</div><div class="line">    <span class="keyword">yield</span>(<span class="number">5</span>)</div><div class="line">o = odd()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>next(o)</div><div class="line"><span class="comment"># step 1</span></div><div class="line"><span class="comment"># 返回值 1</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>next(o)</div><div class="line"><span class="comment"># step 2</span></div><div class="line"><span class="comment"># 返回值 3</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>next(o)</div><div class="line"><span class="comment"># step 3</span></div><div class="line"><span class="comment"># 返回值 5</span></div></pre></td></tr></table></figure>
<h3 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h3><ul>
<li>凡是可作用于 for 循环的对象都是 Iterable 类型；</li>
<li>凡是可作用于 next()函数的对象都是 Iterator 类型，它们表示一个惰性计算的序列；</li>
<li>list =&gt; []、dict =&gt; {}、str = ‘aaa’ 是 <strong>Iterable</strong> 但不是 <strong>Iterator</strong></li>
<li>非 <strong>Iterator</strong> 可以通过 <code>iter()</code> 函数获得一个该对象。</li>
</ul>
<h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h2><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">mycompany</div><div class="line">├─ __init__.py</div><div class="line">├─ abc.py</div><div class="line">└─ xyz.py</div></pre></td></tr></table></figure>
<p>引入了包以后，只要顶层的包名不与别人冲突，那所有模块都不会与别人冲突。现在，abc.py 模块的名字就变成了 mycompany.abc，类似的，xyz.py 的模块名变成了 mycompany.xyz。</p>
<p>每一个包目录下面都 <strong>必须有一个</strong> <code>__init__.py</code> 的文件，否则，Python 就把这个目录当成普通目录，而不是一个包。<code>__init.py__</code> 可以是空文件，也可以有 Python 代码，因为<code>__init.py__</code> 本身就是一个模块，而它的模块名就是 mycompany。</p>
<p>类似的，可以有多级目录，组成多级层次的包结构。比如如下的目录结构：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">mycompany</div><div class="line"> ├─ web</div><div class="line"> │  ├─ __init__.py</div><div class="line"> │  ├─ utils.py</div><div class="line"> │  └─ www.py</div><div class="line"> ├─ __init__.py</div><div class="line"> ├─ abc.py</div><div class="line"> └─ xyz.py</div></pre></td></tr></table></figure>
<p>文件 www.py 的模块名就是 mycompany.web.www，两个文件 utils.py 的模块名分别是 mycompany.utils 和 mycompany.web.utils。</p>
<p>模块是一组 Python 代码的集合，可以使用其他模块，也可以被其他模块使用。</p>
<ul>
<li>创建自己的模块时，要注意：<ul>
<li>模块名要遵循 Python 变量命名规范，不要使用中文、特殊字符；</li>
<li>模块名不要和系统模块名冲突，最好先查看系统是否已存在该模块，检查方法是在 Python 交互环境执行 import abc，若成功则说明系统存在此模块。</li>
</ul>
</li>
</ul>
<h3 id="模块模板"><a href="#模块模板" class="headerlink" title="模块模板"></a>模块模板</h3><figure class="highlight py"><table><tr><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python3  # 可以让这个hello.py文件直接在Unix/Linux/Mac上运行</span></div><div class="line"><span class="comment"># -*- coding: utf-8 -*- # 文件本身使用标准UTF-8编码；</span></div><div class="line"><span class="string">' a test module '</span> <span class="comment"># 任何模块代码的第一行字符串都被视为模块的文档注释；</span></div><div class="line">__author__ = <span class="string">'Michael Liao'</span> <span class="comment"># 把作者写进去，这样当你公开源代码后别人就可以瞻仰你的大名</span></div><div class="line"></div><div class="line"><span class="comment"># 以上就是Python模块的标准文件模板</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> sys</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">()</span>:</span></div><div class="line">    args = sys.argv</div><div class="line">    <span class="keyword">if</span> len(args)==<span class="number">1</span>:</div><div class="line">        print(<span class="string">'Hello, world!'</span>)</div><div class="line">    <span class="keyword">elif</span> len(args)==<span class="number">2</span>:</div><div class="line">        print(<span class="string">'Hello, %s!'</span> % args[<span class="number">1</span>])</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        print(<span class="string">'Too many arguments!'</span>)</div><div class="line"><span class="comment"># 当我们在 命令行运行 hello 模块文件时，Python 解释器把一个特殊变量 __name__ 置为 __main__</span></div><div class="line"><span class="comment"># 也就是下面的这个 if 只有用命令行运行才会执行</span></div><div class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</div><div class="line">    test()</div></pre></td></tr></table></figure>
<p><strong>作用域</strong></p>
<ul>
<li>类似<code>__xxx__</code>这样的变量是特殊变量，可以被直接引用，但是有特殊用途，我们自己的变量一般不要用这种变量名；</li>
<li>类似<code>_xxx</code> 和 <code>__xxx__</code> 这样的函数或变量就是非公开的（private），不应该被直接引用</li>
</ul>
<p>private 函数或变量不应该被别人引用，那它们有什么用呢？请看例子：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">_private_1</span><span class="params">(name)</span>:</span></div><div class="line">    <span class="keyword">return</span> <span class="string">'Hello, %s'</span> % name</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">_private_2</span><span class="params">(name)</span>:</span></div><div class="line">    <span class="keyword">return</span> <span class="string">'Hi, %s'</span> % name</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">greeting</span><span class="params">(name)</span>:</span></div><div class="line">    <span class="keyword">if</span> len(name) &gt; <span class="number">3</span>:</div><div class="line">        <span class="keyword">return</span> _private_1(name)</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">return</span> _private_2(name)</div></pre></td></tr></table></figure>
<blockquote>
<p>外部不需要引用的函数全部定义成 <code>private</code>，只有外部需要引用的函数才定义为 <code>public</code></p>
</blockquote>
<h2 id="面向对象编程"><a href="#面向对象编程" class="headerlink" title="面向对象编程"></a>面向对象编程</h2><p>未完待续…</p>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;#开头，注释&lt;/li&gt;
&lt;li&gt;缩进的语句视为代码块&lt;/li&gt;
&lt;li&gt;大小写敏感&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;数据类型和变量&quot;&gt;&lt;a href=&quot;#数据类型和变量&quot; class=&quot;headerlink&quot; title=&quot;数据类型和变量&quot;&gt;&lt;/a&gt;数据类型和变量&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;True 和 False 首字母大写&lt;/li&gt;
&lt;li&gt;and、or 和 not&lt;/li&gt;
&lt;li&gt;空值：None&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;字符串格式化&quot;&gt;&lt;a href=&quot;#字符串格式化&quot; class=&quot;headerlink&quot; title=&quot;字符串格式化%&quot;&gt;&lt;/a&gt;字符串格式化%&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;%d 整数&lt;/li&gt;
&lt;li&gt;%f 浮点数&lt;/li&gt;
&lt;li&gt;%s 字符串&lt;/li&gt;
&lt;li&gt;%x 十六进制整数&lt;/li&gt;
&lt;li&gt;补位&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="技术笔记" scheme="http://www.baixiaojian.com/categories/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="笔记" scheme="http://www.baixiaojian.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="vim" scheme="http://www.baixiaojian.com/tags/vim/"/>
    
      <category term="基本操作" scheme="http://www.baixiaojian.com/tags/%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>linux 笔记</title>
    <link href="http://www.baixiaojian.com/linux/"/>
    <id>http://www.baixiaojian.com/linux/</id>
    <published>2018-09-29T03:52:04.000Z</published>
    <updated>2018-10-04T16:35:45.807Z</updated>
    
    <content type="html"><![CDATA[<h2 id="系统结构目录"><a href="#系统结构目录" class="headerlink" title="系统结构目录"></a>系统结构目录</h2><table>
<thead>
<tr>
<th>目录路径</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>/usr：</td>
<td>用户的很多应用程序和文件都放在此目录下。</td>
</tr>
<tr>
<td>/usr/bin：</td>
<td><strong>系统用户</strong> 使用的应用程序。</td>
</tr>
<tr>
<td>/usr/sbin：</td>
<td><strong>超级用户</strong> 使用的比较高级的管理程序和系统守护程序。</td>
</tr>
<tr>
<td>/usr/src：</td>
<td>内核源代码默认的放置目录。</td>
</tr>
<tr>
<td>/home：</td>
<td>用户的主目录，该目录名一般是以用户的账号命名的。</td>
</tr>
<tr>
<td>/bin：</td>
<td>Binary 的缩写, 存放着最经常使用的终端命令。</td>
</tr>
<tr>
<td>/root：</td>
<td>该目录为系统管理员，也称作 <strong>超级权限者</strong> 的用户主目录。</td>
</tr>
<tr>
<td>/boot：</td>
<td>启动 Linux 时使用的一些核心文件，包括一些连接文件以及镜像文件。</td>
</tr>
<tr>
<td>/etc：</td>
<td>存放所有的系统管理所需要的 <strong>配置文件</strong> 和子目录。</td>
</tr>
<tr>
<td>/dev ：</td>
<td>Device (设备)的缩写, 该目录下存放的是Linux的外部设备</td>
</tr>
<tr>
<td>/proc：</td>
<td>一个映射 <strong>系统内存</strong> 的虚拟目录，可以通过直接访问此目录获取系统信息。</td>
</tr>
<tr>
<td>/sbin：</td>
<td>存放 <strong>系统管理员</strong> 使用的系统管理程序。</td>
</tr>
<tr>
<td>/tmp：</td>
<td>存放一些临时文件的。</td>
</tr>
<tr>
<td>/var：</td>
<td>不断扩充或者 <strong>经常被修改</strong> 的文件会存放在此目录下，比如各种日志文件。</td>
</tr>
<tr>
<td>/media：</td>
<td>Linux 会把识别的设备挂载到这个目录下。</td>
</tr>
<tr>
<td>/lost+found：</td>
<td>当系统非法关机后，这里就存放了一些文件。</td>
</tr>
<tr>
<td>/lib：</td>
<td>存放系统最基本的动态连接共享库。几乎所有的应用程序都需要用到这些共享库。</td>
</tr>
<tr>
<td>/mnt：</td>
<td>该目录是为了让用户临时挂载其他文件系统的，可以将光驱挂载在/mnt/上，然后进入该目录就可以查看光驱里的内容了。</td>
</tr>
<tr>
<td>/opt：</td>
<td>这是给主机额外安装软件所摆放的目录。比如你安装一个ORACLE数据库则就可以放到这个目录下。默认是空的。</td>
</tr>
<tr>
<td>/selinux：</td>
<td>这个目录是Redhat/CentOS所特有的目录，Selinux是一个安全机制，类似于windows的防火墙。</td>
</tr>
<tr>
<td>/srv：</td>
<td>该目录存放一些服务启动之后需要提取的数据。</td>
</tr>
<tr>
<td>/sys：</td>
<td>该目录下安装了2.6内核中新出现的一个文件系统 sysfs 。</td>
</tr>
</tbody>
</table>
<a id="more"></a>
<h2 id="网卡与-IP-知识点"><a href="#网卡与-IP-知识点" class="headerlink" title="网卡与 IP 知识点"></a>网卡与 IP 知识点</h2><ul>
<li><strong>网卡</strong> 是一个专门负责 <code>网络通讯</code> 的硬件设备</li>
<li><strong>IP 地址</strong> 是设置在网卡上的 <code>地址信息</code>, 是保证电脑之间正常通讯的重要设置</li>
<li><strong>127.0.0.1</strong> 被称为 <code>本地回环/环回地址</code>，一般用来测试本机网卡是否正常</li>
<li><strong>ping</strong> 一般用于检测当前计算机到目标计算机之间的网络 <code>是否通畅</code></li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 可以这样类比: --&gt;</span></div><div class="line">电脑   =&gt; 电话</div><div class="line">网卡   =&gt; SIM 卡</div><div class="line">IP    =&gt; 电话号码</div><div class="line">ping  =&gt; 电话能不能打通</div></pre></td></tr></table></figure>
<blockquote>
<p>tips：一台计算机中有可能会有一个 <strong>物理网卡</strong> 和 <strong>多个虚拟网卡</strong>，在 Linux 中物理网卡的名字通常以 <code>ensXX</code> 表示</p>
</blockquote>
<h2 id="SSH-基础"><a href="#SSH-基础" class="headerlink" title="SSH 基础"></a><code>SSH</code> 基础</h2><p>在 Linux 中 SSH 是 <strong>非常常用</strong> 的工具，通过 <strong>SSH 客户端</strong> 我们可以连接到运行了 <strong>SSH 服务器</strong> 的远程机器上</p>
<ul>
<li><strong>SSH 客户端</strong>是一种使用 <code>Secure Shell（SSH）</code> 协议连接到远程计算机的软件程序</li>
<li><code>SSH</code> 是目前较可靠，<strong>专为远程登录会话和其他网络服务</strong> 提供安全性的协议<ul>
<li>利用 <code>SSH 协议</code> 可以有效<strong>防止远程管理过程中的信息泄露</strong></li>
<li>通过 <code>SSH 协议</code> 可以对所有传输的数据进行加密，也能够防止 DNS 欺骗和 IP 欺骗</li>
</ul>
</li>
<li><code>SSH</code> 的另一项优点是传输的数据可以是经过压缩的，所以可以加快传输的速度</li>
</ul>
<h3 id="域名"><a href="#域名" class="headerlink" title="域名"></a>域名</h3><ul>
<li>由一串 <strong>用点分隔</strong> 的名字组成，例如：<code>www.itcast.cn</code></li>
<li>是 <strong>IP 地址</strong> 的别名，方便用户记忆</li>
</ul>
<h3 id="端口号"><a href="#端口号" class="headerlink" title="端口号"></a>端口号</h3><ul>
<li><strong>IP 地址</strong>：通过 <strong>IP 地址</strong> 找到网络上的 <strong>计算机</strong></li>
<li><p><strong>端口号</strong>：通过 <strong>端口号</strong> 可以找到 <strong>计算机上运行的应用程序</strong></p>
<ul>
<li><strong>SSH 服务器</strong> 的默认端口号是 <code>22</code>，如果是默认端口号，在连接的时候，可以省略</li>
</ul>
</li>
<li><p>常见服务端口号列表：</p>
</li>
</ul>
<table>
<thead>
<tr>
<th>服务</th>
<th>端口号</th>
</tr>
</thead>
<tbody>
<tr>
<td>SSH 服务器</td>
<td>22</td>
</tr>
<tr>
<td>Web 服务器</td>
<td>80</td>
</tr>
<tr>
<td>HTTPS</td>
<td>443</td>
</tr>
<tr>
<td>FTP 服务器</td>
<td>21</td>
</tr>
</tbody>
</table>
<h3 id="客户端的简单使用"><a href="#客户端的简单使用" class="headerlink" title="客户端的简单使用"></a>客户端的简单使用</h3><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">ssh [-p port] user@remote</div></pre></td></tr></table></figure>
<ul>
<li><code>user</code> 是在远程机器上的用户名，如果不指定的话默认为当前用户</li>
<li><code>remote</code> 是远程机器的地址，可以是 <strong>IP</strong>／<strong>域名</strong>，或者是 <strong>后面会提到的别名</strong></li>
<li><code>port</code> 是 <strong>SSH Server 监听的端口</strong>，如果不指定，就为默认值 <code>22</code></li>
</ul>
<blockquote>
<ul>
<li>在工作中，SSH 服务器的端口号很有可能<strong>不是 22</strong>，如果遇到这种情况就需要使用 <code>-p</code> 选项，指定正确的端口号，否则无法正常连接到服务器</li>
</ul>
</blockquote>
<h3 id="SSH-高级"><a href="#SSH-高级" class="headerlink" title="SSH 高级"></a>SSH 高级</h3><ul>
<li>免密码登录</li>
<li>配置别名</li>
</ul>
<blockquote>
<p>提示：有关 SSH 配置信息都保存在用户家目录下的 <code>.ssh</code> 目录下</p>
</blockquote>
<h3 id="免密码登录"><a href="#免密码登录" class="headerlink" title="免密码登录"></a>免密码登录</h3><p><strong>步骤</strong></p>
<ul>
<li>配置公钥<ul>
<li>执行 <code>ssh-keygen</code> 即可生成 SSH 钥匙，一路回车即可</li>
</ul>
</li>
<li>上传公钥到服务器<ul>
<li>执行 <code>ssh-copy-id -p port user@remote</code>，可以让远程服务器记住我们的公钥</li>
</ul>
</li>
</ul>
<h4 id="示意图"><a href="#示意图" class="headerlink" title="示意图"></a>示意图</h4><p><img src="https://ws2.sinaimg.cn/large/006tNbRwly1fvv3sko7yxj30nx0dkq46.jpg" alt=""></p>
<h3 id="配置别名"><a href="#配置别名" class="headerlink" title="配置别名"></a>配置别名</h3><p>每次都输入 <code>ssh -p port user@remote</code>，时间久了会觉得很麻烦，特别是当 <code>user</code>, <code>remote</code> 和 <code>port</code> 都得输入，而且还不好记忆</p>
<p>而 <strong>配置别名</strong> 可以让我们进一步偷懒，譬如用：<code>ssh mac</code> 来替代上面这么一长串，那么就在 <code>~/.ssh/config</code> 里面追加以下内容：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">Host mac</div><div class="line">    HostName ip地址</div><div class="line">    User itheima</div><div class="line">    Port 22</div></pre></td></tr></table></figure>
<p><strong>保存之后，即可用 <code>ssh mac</code> 实现远程登录了，<code>scp</code> 同样可以使用</strong></p>
<h2 id="SCP-基础"><a href="#SCP-基础" class="headerlink" title="SCP 基础"></a>SCP 基础</h2><ul>
<li>scp 就是 <code>secure copy</code>，是一个在 Linux 下用来进行 <strong>远程拷贝文件</strong> 的命令</li>
<li>它的<strong>地址格式与 ssh 基本相同</strong>，<strong>需要注意的是</strong>，在指定端口时用的是大写的 <code>-P</code> 而不是小写的</li>
</ul>
<p><img src="https://ws4.sinaimg.cn/large/006tNbRwly1fvv3rr5mnaj30nx06bdg1.jpg" alt=""></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line"><span class="comment"># 把本地当前目录下的 01.py 文件 复制到 远程 家目录下的 Desktop/01.py</span></div><div class="line"><span class="comment"># 注意：`:` 后面的路径如果不是绝对路径，则以用户的家目录作为参照路径</span></div><div class="line">scp -P port 01.py user@remote:Desktop/01.py</div><div class="line"></div><div class="line"><span class="comment"># 把远程 家目录下的 Desktop/01.py 文件 复制到 本地当前目录下的 01.py</span></div><div class="line">scp -P port user@remote:Desktop/01.py 01.py</div><div class="line"></div><div class="line"><span class="comment"># 加上 -r 选项可以传送文件夹</span></div><div class="line"><span class="comment"># 把当前目录下的 demo 文件夹 复制到 远程 家目录下的 Desktop</span></div><div class="line">scp -r demo user@remote:Desktop</div><div class="line"></div><div class="line"><span class="comment"># 把远程 家目录下的 Desktop 复制到 当前目录下的 demo 文件夹</span></div><div class="line">scp -r user@remote:Desktop demo</div></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>选项</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>-r</td>
<td>若给出的源文件是目录文件，则 scp 将递归复制该目录下的所有子目录和文件，目标文件必须为一个目录名</td>
</tr>
<tr>
<td>-P</td>
<td>若远程 SSH 服务器的端口不是 22，需要使用大写字母 -P 选项指定端口</td>
</tr>
</tbody>
</table>
<blockquote>
<ul>
<li><code>scp</code> 这个终端命令只能在 <code>Linux</code> 或者 <code>UNIX</code> 系统下使用</li>
</ul>
</blockquote>
<h2 id="用户权限相关命令"><a href="#用户权限相关命令" class="headerlink" title="用户权限相关命令"></a>用户权限相关命令</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><ul>
<li><strong>用户</strong> 是 Linux 系统工作中重要的一环，用户管理包括 <strong>用户</strong> 与 <strong>组</strong> 管理</li>
<li>在 Linux 系统中，不论是由本机或是远程登录系统，每个系统都<strong>必须拥有一个账号</strong>，并且<strong>对于不同的系统资源拥有不同的使用权限</strong></li>
<li>在 Linux 中，可以指定 <strong>每一个用户</strong> 针对 <strong>不同的文件或者目录</strong> 的 <strong>不同权限</strong></li>
<li>对 <strong>文件／目录</strong> 的权限包括：</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:center">序号</th>
<th style="text-align:center">权限</th>
<th style="text-align:center">英文</th>
<th style="text-align:center">缩写</th>
<th style="text-align:center">数字代号</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">01</td>
<td style="text-align:center">读</td>
<td style="text-align:center">read</td>
<td style="text-align:center">r</td>
<td style="text-align:center">4</td>
</tr>
<tr>
<td style="text-align:center">02</td>
<td style="text-align:center">写</td>
<td style="text-align:center">write</td>
<td style="text-align:center">w</td>
<td style="text-align:center">2</td>
</tr>
<tr>
<td style="text-align:center">03</td>
<td style="text-align:center">执行</td>
<td style="text-align:center">excute</td>
<td style="text-align:center">x</td>
<td style="text-align:center">1</td>
</tr>
</tbody>
</table>
<h3 id="组"><a href="#组" class="headerlink" title="组"></a>组</h3><ul>
<li>为了方便用户管理，提出了 <strong>组</strong> 的概念，如下图所示</li>
</ul>
<p><img src="https://ws3.sinaimg.cn/large/006tNbRwly1fvv3vhlw8xj30a5064gll.jpg" alt="001_组示意图"></p>
<ul>
<li>在实际应用中，可以预先针对 <strong>组</strong> 设置好权限，然后 <strong>将不同的用户添加到对应的组中</strong>，从而<strong>不用依次为每一个用户设置权限</strong></li>
</ul>
<h3 id="ls-l-扩展"><a href="#ls-l-扩展" class="headerlink" title="ls -l 扩展"></a>ls -l 扩展</h3><ul>
<li><p><code>ls -l</code> 可以查看文件夹下文件的详细信息，从左到右依次是：</p>
<ul>
<li><strong>权限</strong>，第 1 个字符如果是 <code>d</code> 表示目录</li>
<li><strong>硬链接数</strong>，通俗地讲，就是有多少种方式，可以访问到当前目录／文件</li>
<li><strong>拥有者</strong>，家目录下 文件／目录 的拥有者通常都是当前用户</li>
<li><strong>组</strong>，在 Linux 中，很多时候，会出现组名和用户名相同的情况，后续会讲</li>
<li><strong>大小</strong></li>
<li><strong>时间</strong></li>
<li><strong>名称</strong></li>
</ul>
</li>
</ul>
<p><img src="https://ws3.sinaimg.cn/large/006tNbRwly1fvv3wr254lj30hq041t8t.jpg" alt="002_权限示意图"></p>
<h3 id="chmod-简单使用（重要）"><a href="#chmod-简单使用（重要）" class="headerlink" title="chmod 简单使用（重要）"></a><code>chmod</code> 简单使用（重要）</h3><ul>
<li><code>chmod</code> 可以修改 <strong>用户／组</strong> 对 <strong>文件／目录</strong> 的权限</li>
<li>命令格式如下：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">chmod +/-rwx 文件名|目录名</div></pre></td></tr></table></figure>
<blockquote>
<p>提示：以上方式会一次性修改 <code>拥有者</code> / <code>组</code> 权限，有关 <code>chmod</code> 的高级用法，后续会讲</p>
</blockquote>
<h3 id="超级用户"><a href="#超级用户" class="headerlink" title="超级用户"></a>超级用户</h3><ul>
<li>Linux 系统中的 <code>root</code> 账号通常 <strong>用于系统的维护和管理</strong>，对操作系统的所有资源 <strong>具有所有访问权限</strong></li>
<li>在大多数版本的 Linux 中，都不推荐 <strong>直接使用 root 账号登录系统</strong></li>
<li>在 Linux 安装的过程中，系统会自动创建一个用户账号，而这个默认的用户就称为“标准用户”</li>
</ul>
<h4 id="sudo"><a href="#sudo" class="headerlink" title="sudo"></a>sudo</h4><ul>
<li><code>su</code> 是 <code>substitute user</code> 的缩写，表示 <strong>使用另一个用户的身份</strong></li>
<li><code>sudo</code> 命令用来以其他身份来执行命令，预设的身份为 <code>root</code></li>
<li>用户使用 <code>sudo</code> 时，必须先输入密码，之后有 <strong>5 分钟的有效期限</strong>，超过期限则必须重新输入密码</li>
</ul>
<blockquote>
<p>若其未经授权的用户企图使用 <code>sudo</code>，则会发出警告邮件给管理员</p>
</blockquote>
<h2 id="组管理-终端命令"><a href="#组管理-终端命令" class="headerlink" title="组管理 终端命令"></a><strong>组管理</strong> 终端命令</h2><blockquote>
<p>提示：<strong>创建组</strong> / <strong>删除组</strong> 的终端命令都需要通过 <code>sudo</code> 执行</p>
</blockquote>
<table>
<thead>
<tr>
<th>命令</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>groupadd 组名</td>
<td>添加组</td>
</tr>
<tr>
<td>groupdel 组名</td>
<td>删除组</td>
</tr>
<tr>
<td>cat /etc/group</td>
<td>确认组信息</td>
</tr>
<tr>
<td>chgrp -R 组名 文件/目录名</td>
<td>递归修改文件/目录的所属组</td>
</tr>
</tbody>
</table>
<blockquote>
<p>提示：</p>
<ul>
<li>组信息保存在 <code>/etc/group</code> 文件中</li>
<li><code>/etc</code> 目录是专门用来保存 <strong>系统配置信息</strong> 的目录</li>
</ul>
</blockquote>
<p><img src="https://ws3.sinaimg.cn/large/006tNbRwly1fvv3vhlw8xj30a5064gll.jpg" alt="001_组示意图"></p>
<ul>
<li>在实际应用中，可以预先针对 <strong>组</strong> 设置好权限，然后 <strong>将不同的用户添加到对应的组中</strong>，从而<strong>不用依次为每一个用户设置权限</strong></li>
</ul>
<h3 id="演练目标"><a href="#演练目标" class="headerlink" title="演练目标"></a>演练目标</h3><ol>
<li>在 <code>python</code> 用户的桌面文件夹下创建 <code>Python学习</code> 目录</li>
<li>新建 <code>dev</code> 组</li>
<li>将 <code>Python学习</code> 目录的组修改为 <code>dev</code></li>
</ol>
<h3 id="用户管理-终端命令"><a href="#用户管理-终端命令" class="headerlink" title="用户管理 终端命令"></a><strong>用户管理</strong> 终端命令</h3><blockquote>
<p>提示：<strong>创建用户</strong> / <strong>删除用户</strong> / <strong>修改其他用户密码</strong> 的终端命令都需要通过 <code>sudo</code> 执行</p>
</blockquote>
<h3 id="创建用户／设置密码／删除用户"><a href="#创建用户／设置密码／删除用户" class="headerlink" title="创建用户／设置密码／删除用户"></a>创建用户／设置密码／删除用户</h3><table>
<thead>
<tr>
<th>命令</th>
<th>作用</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>useradd -m -g 组 新建用户名</td>
<td>添加新用户</td>
<td><ul><li>-m 自动建立用户家目录</li><li>-g 指定用户所在的组，否则会建立一个和同名的组</li></ul></td>
</tr>
<tr>
<td>passwd 用户名</td>
<td>设置用户密码</td>
<td>如果是普通用户，直接用 passwd 可以修改自己的账户密码</td>
</tr>
<tr>
<td>userdel -r 用户名</td>
<td>删除用户</td>
<td>-r 选项会自动删除用户家目录</td>
</tr>
<tr>
<td>cat /etc/passwd &#124; grep 用户名</td>
<td>确认用户信息</td>
<td>新建用户后，用户信息会保存在 /etc/passwd 文件中</td>
</tr>
</tbody>
</table>
<blockquote>
<ul>
<li>创建用户时，如果忘记添加 <code>-m</code> 选项指定新用户的家目录 —— 最简单的方法就是<strong>删除用户，重新创建</strong></li>
<li>创建用户时，默认会创建一个和<strong>用户名</strong>同名的<strong>组名</strong></li>
<li>用户信息保存在 <code>/etc/passwd</code> 文件中</li>
</ul>
</blockquote>
<h3 id="查看用户信息"><a href="#查看用户信息" class="headerlink" title="查看用户信息"></a>查看用户信息</h3><table>
<thead>
<tr>
<th>序号</th>
<th>命令</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>01</td>
<td>id [用户名]</td>
<td>查看用户 UID 和 GID 信息</td>
</tr>
<tr>
<td>02</td>
<td>who</td>
<td>查看当前所有登录的用户列表</td>
</tr>
<tr>
<td>03</td>
<td>whoami</td>
<td>查看当前登录用户的账户名</td>
</tr>
</tbody>
</table>
<h4 id="passwd-文件"><a href="#passwd-文件" class="headerlink" title="passwd 文件"></a>passwd 文件</h4><p><code>/etc/passwd</code> 文件存放的是用户的信息，由 6 个分号组成的 7 个信息，分别是</p>
<ol>
<li>用户名</li>
<li>密码（x，表示加密的密码）</li>
<li>UID（用户标识）</li>
<li>GID（组标识）</li>
<li>用户全名或本地帐号</li>
<li>家目录</li>
<li>登录使用的 Shell，就是登录之后，使用的终端命令，<code>ubuntu</code> 默认是 <code>dash</code></li>
</ol>
<h4 id="usermod"><a href="#usermod" class="headerlink" title="usermod"></a>usermod</h4><ul>
<li><code>usermod</code> 可以用来设置 <strong>用户</strong> 的 <strong>主组</strong> ／ <strong>附加组</strong> 和 <strong>登录 Shell</strong>，命令格式如下：</li>
<li><strong>主组</strong>：通常在新建用户时指定，在 <code>etc/passwd</code> 的第 4 列 <strong>GID 对应的组</strong></li>
<li><strong>附加组</strong>：在 <code>etc/group</code> 中最后一列表示该组的用户列表，用于指定 <strong>用户的附加权限</strong></li>
</ul>
<blockquote>
<p>提示：设置了用户的附加组之后，需要重新登录才能生效！</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line"><span class="comment"># 修改用户的主组（passwd 中的 GID）</span></div><div class="line">usermod -g 组 用户名</div><div class="line"></div><div class="line"><span class="comment"># 修改用户的附加组</span></div><div class="line">usermod -G 组 用户名</div><div class="line"></div><div class="line"><span class="comment"># 修改用户登录 Shell</span></div><div class="line">usermod -s /bin/bash 用户名</div></pre></td></tr></table></figure>
<blockquote>
<p>注意：默认使用 <code>useradd</code> 添加的用户是没有权限使用 <code>sudo</code> 以 <code>root</code> 身份执行命令的，可以使用以下命令，将用户添加到 <code>sudo</code> 附加组中</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">usermod -G sudo 用户名</div></pre></td></tr></table></figure>
<h4 id="which（重要）"><a href="#which（重要）" class="headerlink" title="which（重要）"></a>which（重要）</h4><blockquote>
<p>提示</p>
<ul>
<li><code>/etc/passwd</code> 是用于保存用户信息的文件</li>
<li><code>/usr/bin/passwd</code> 是用于修改用户密码的程序</li>
</ul>
</blockquote>
<ul>
<li><code>which</code> 命令可以查看执行命令所在位置，例如：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line"><span class="built_in">which</span> ls</div><div class="line"></div><div class="line"><span class="comment"># 输出</span></div><div class="line"><span class="comment"># /bin/ls</span></div><div class="line"></div><div class="line"><span class="built_in">which</span> useradd</div><div class="line"></div><div class="line"><span class="comment"># 输出</span></div><div class="line"><span class="comment"># /usr/sbin/useradd</span></div></pre></td></tr></table></figure>
<h5 id="bin-和-sbin"><a href="#bin-和-sbin" class="headerlink" title="bin 和 sbin"></a><code>bin</code> 和 <code>sbin</code></h5><ul>
<li>在 <code>Linux</code> 中，绝大多数可执行文件都是保存在 <code>/bin</code>、<code>/sbin</code>、<code>/usr/bin</code>、<code>/usr/sbin</code></li>
<li><code>/bin</code>（<code>binary</code>）是二进制执行文件目录，主要用于具体应用</li>
<li><code>/sbin</code>（<code>system binary</code>）是系统管理员专用的二进制代码存放目录，主要用于系统管理</li>
<li><code>/usr/bin</code>（<code>user commands for applications</code>）后期安装的一些软件</li>
<li><code>/usr/sbin</code>（<code>super user commands for applications</code>）超级用户的一些管理程序</li>
</ul>
<blockquote>
<p>提示：</p>
<ul>
<li><code>cd</code> 这个终端命令是内置在系统内核中的，没有独立的文件，因此用 <code>which</code> 无法找到 <code>cd</code> 命令的位置</li>
</ul>
</blockquote>
<h4 id="切换用户"><a href="#切换用户" class="headerlink" title="切换用户"></a>切换用户</h4><table>
<thead>
<tr>
<th>序号</th>
<th>命令</th>
<th>作用</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>01</td>
<td>su - 用户名</td>
<td>切换用户，并且切换目录</td>
<td>- 可以切换到用户家目录，否则保持位置不变</td>
</tr>
<tr>
<td>02</td>
<td>exit</td>
<td>退出当前登录账户</td>
</tr>
</tbody>
</table>
<ul>
<li><code>su</code> 不接用户名，可以切换到 <code>root</code>，但是不推荐使用，因为不安全</li>
<li><code>exit</code> 示意图如下：</li>
</ul>
<p><img src="https://ws1.sinaimg.cn/large/006tNbRwly1fvv3xt2jqfj30dy076q33.jpg" alt="003_su和exit示意图"></p>
<h3 id="修改文件权限"><a href="#修改文件权限" class="headerlink" title="修改文件权限"></a>修改文件权限</h3><table>
<thead>
<tr>
<th>命令</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>chown</td>
<td>修改拥有者</td>
</tr>
<tr>
<td>chgrp</td>
<td>修改组</td>
</tr>
<tr>
<td>chmod</td>
<td>修改权限</td>
</tr>
</tbody>
</table>
<ul>
<li>命令格式如下：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line"><span class="comment"># 修改文件|目录的拥有者</span></div><div class="line">chown 用户名 文件名|目录名</div><div class="line"></div><div class="line"><span class="comment"># 递归修改文件|目录的组</span></div><div class="line">chgrp -R 组名 文件名|目录名</div><div class="line"></div><div class="line"><span class="comment"># 递归修改文件权限</span></div><div class="line">chmod -R 755 文件名|目录名</div></pre></td></tr></table></figure>
<ul>
<li><code>chmod</code> 在设置权限时，可以简单地使用三个数字分别对应 <strong>拥有者</strong> ／ <strong>组</strong> 和 <strong>其他</strong> 用户的权限</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line"><span class="comment"># 直接修改文件|目录的 读|写|执行 权限，但是不能精确到 拥有者|组|其他</span></div><div class="line">chmod +/-rwx 文件名|目录名</div></pre></td></tr></table></figure>
<p><img src="https://ws3.sinaimg.cn/large/006tNbRwly1fvv3y1jzq8j30b60etdg5.jpg" alt="004_文件权限示意图"></p>
<ul>
<li>常见数字组合有（<code>u</code>表示用户／<code>g</code>表示组／<code>o</code>表示其他）：<ul>
<li><code>777</code> ===&gt; <code>u=rwx,g=rwx,o=rwx</code></li>
<li><code>755</code> ===&gt; <code>u=rwx,g=rx,o=rx</code></li>
<li><code>644</code> ===&gt; <code>u=rw,g=r,o=r</code></li>
</ul>
</li>
</ul>
<h4 id="chmod-演练目标"><a href="#chmod-演练目标" class="headerlink" title="chmod 演练目标"></a><code>chmod</code> 演练目标</h4><ol>
<li>将 <code>01.py</code> 的权限修改为 <code>u=rwx,g=rx,o=r</code></li>
<li>将 <code>123.txt</code> 的权限修改为 <code>u=rw,g=r,o=-</code></li>
<li>将 <code>test</code> 目录以及目录下的 <strong>所有</strong> 文件权限修改为 <code>u=rwx,g=rwx,o=rx</code></li>
</ol>
<h2 id="系统信息相关命令"><a href="#系统信息相关命令" class="headerlink" title="系统信息相关命令"></a>系统信息相关命令</h2><h3 id="时间和日期"><a href="#时间和日期" class="headerlink" title="时间和日期"></a>时间和日期</h3><table>
<thead>
<tr>
<th>命令</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>date</td>
<td>查看系统时间</td>
</tr>
<tr>
<td>cal</td>
<td><code>calendar</code> 查看日历，<code>-y</code> 选项可以查看一年的日历</td>
</tr>
</tbody>
</table>
<h3 id="磁盘信息"><a href="#磁盘信息" class="headerlink" title="磁盘信息"></a>磁盘信息</h3><table>
<thead>
<tr>
<th>命令</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>df -h</td>
<td><code>disk free</code> 显示磁盘剩余空间</td>
</tr>
<tr>
<td>du -h [目录名]</td>
<td><code>disk usage</code> 显示目录下的文件大小</td>
</tr>
</tbody>
</table>
<ul>
<li>选项说明</li>
</ul>
<table>
<thead>
<tr>
<th>参数</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>-h</td>
<td>以人性化的方式显示文件大小</td>
</tr>
</tbody>
</table>
<h3 id="进程信息"><a href="#进程信息" class="headerlink" title="进程信息"></a>进程信息</h3><ul>
<li>所谓 <strong>进程</strong>，通俗地说就是 <strong>当前正在执行的一个程序</strong></li>
</ul>
<table>
<thead>
<tr>
<th>命令</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>ps aux</td>
<td><code>process status</code> 查看进程的详细状况</td>
</tr>
<tr>
<td>top</td>
<td>动态显示运行中的进程并且排序</td>
</tr>
<tr>
<td>kill [-9] 进程代号</td>
<td>终止指定代号的进程，<code>-9</code> 表示强行终止</td>
</tr>
</tbody>
</table>
<blockquote>
<p><code>ps</code> 默认只会显示当前用户通过终端启动的应用程序</p>
</blockquote>
<ul>
<li><code>ps</code> 选项说明</li>
</ul>
<table>
<thead>
<tr>
<th>选项</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>a</td>
<td>显示终端上的所有进程，包括其他用户的进程</td>
</tr>
<tr>
<td>u</td>
<td>显示进程的详细状态</td>
</tr>
<tr>
<td>x</td>
<td>显示没有控制终端的进程</td>
</tr>
</tbody>
</table>
<blockquote>
<p>提示：使用 <code>kill</code> 命令时，最好只终止由当前用户开启的进程，而不要终止 <code>root</code> 身份开启的进程，否则可能导致系统崩溃</p>
</blockquote>
<p>&gt;</p>
<blockquote>
<ul>
<li>要退出 <code>top</code> 可以直接输入 <code>q</code></li>
</ul>
</blockquote>
<h2 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h2><h3 id="查找文件"><a href="#查找文件" class="headerlink" title="查找文件"></a>查找文件</h3><ul>
<li><code>find</code> 命令功能非常强大，通常用来在 <strong>特定的目录下</strong> <strong>搜索</strong> 符合条件的文件</li>
</ul>
<table>
<thead>
<tr>
<th>命令</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>find [路径] -name “*.py”</td>
<td>查找指定路径下扩展名是 <code>.py</code> 的文件，包括子目录</td>
</tr>
</tbody>
</table>
<ul>
<li>如果省略路径，表示在当前文件夹下查找</li>
<li>之前学习的通配符，在使用 <code>find</code> 命令时同时可用</li>
<li>有关 <code>find</code> 的高级使用，在就业班会讲</li>
</ul>
<h4 id="演练目标-1"><a href="#演练目标-1" class="headerlink" title="演练目标"></a>演练目标</h4><ul>
<li><ol>
<li>搜索桌面目录下，文件名包含 <code>1</code> 的文件</li>
</ol>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">find -name <span class="string">"*1*"</span></div></pre></td></tr></table></figure>
<ul>
<li><ol>
<li>搜索桌面目录下，所有以 <code>.txt</code> 为扩展名的文件</li>
</ol>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">find -name <span class="string">"*.txt"</span></div></pre></td></tr></table></figure>
<ul>
<li><ol>
<li>搜索桌面目录下，以数字 <code>1</code> 开头的文件</li>
</ol>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">find -name <span class="string">"1*"</span></div></pre></td></tr></table></figure>
<h3 id="02-软链接"><a href="#02-软链接" class="headerlink" title="02. 软链接"></a>02. 软链接</h3><table>
<thead>
<tr>
<th>序号</th>
<th>命令</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>01</td>
<td>ln -s 被链接的源文件 链接文件</td>
<td>建立文件的软链接，用通俗的方式讲<strong>类似于</strong> Windows 下的<strong>快捷方式</strong></td>
</tr>
</tbody>
</table>
<ul>
<li>注意：</li>
<li><ol>
<li>没有 <code>-s</code> 选项建立的是一个 <strong>硬链接文件</strong><ul>
<li>两个文件占用相同大小的硬盘空间，<strong>工作中几乎不会建立文件的硬链接</strong></li>
</ul>
</li>
</ol>
</li>
<li><ol>
<li><strong>源文件要使用绝对路径</strong>，不能使用相对路径，这样可以方便移动链接文件后，仍然能够正常使用</li>
</ol>
</li>
</ul>
<h3 id="演练目标-2"><a href="#演练目标-2" class="headerlink" title="演练目标"></a>演练目标</h3><ul>
<li><ol>
<li>将桌面目录下的 <code>01.py</code> <strong>移动</strong>到 <code>demo/b/c</code> 目录下</li>
</ol>
</li>
<li><ol>
<li>在桌面目录下新建 <code>01.py</code> 的 <strong>软链接</strong> <code>FirstPython</code><ul>
<li>分别使用 <strong>相对路径</strong> 和 <strong>绝对路径</strong> 建立 <code>FirstPython</code> 的软链接</li>
</ul>
</li>
</ol>
</li>
<li><ol>
<li>将 <code>FirstPython</code> <strong>移动</strong>到 <code>demo</code> 目录下，对比使用 <strong>相对路径</strong> 和 <strong>绝对路径</strong> 的区别</li>
</ol>
</li>
</ul>
<h3 id="硬链接简介（知道）"><a href="#硬链接简介（知道）" class="headerlink" title="硬链接简介（知道）"></a>硬链接简介（知道）</h3><ul>
<li>在使用 <code>ln</code> 创建链接时，如果没有 <code>-s</code> 选项，会创建一个 <strong>硬链接</strong>，而不是软链接</li>
</ul>
<h4 id="硬链接演练"><a href="#硬链接演练" class="headerlink" title="硬链接演练"></a>硬链接演练</h4><ul>
<li><ol>
<li>在 <code>~/Desktop/demo</code> 目录下建立 <code>~/Desktop/demo/b/c/01.py</code> 的硬链接 <code>01_hard</code></li>
</ol>
</li>
<li><ol>
<li>使用 <code>ls -l</code> 查看文件的<strong>硬链接数</strong>（硬链接——有多少种方式可以访问文件或者目录）</li>
</ol>
</li>
<li><ol>
<li>删除 <code>~/Desktop/demo/b/c/01.py</code>，并且使用 <code>tree</code> 来确认 <code>demo</code> 目录下的三个链接文件</li>
</ol>
</li>
</ul>
<h4 id="文件软硬链接的示意图"><a href="#文件软硬链接的示意图" class="headerlink" title="文件软硬链接的示意图"></a>文件软硬链接的示意图</h4><p><img src="https://ws1.sinaimg.cn/large/006tNbRwly1fvv41w2wvtj30vl0agwf4.jpg" alt="001_文件软硬链接示意图"></p>
<blockquote>
<p>在 Linux 中，<strong>文件名</strong> 和 <strong>文件的数据</strong> 是分开存储的</p>
</blockquote>
<ul>
<li>提示：<ul>
<li>在 Linux 中，只有文件的 <code>硬链接数 == 0</code> 才会被删除</li>
<li>使用 <code>ls -l</code> 可以查看一个文件的硬链接的数量</li>
<li>在日常工作中，几乎不会建立文件的硬链接，知道即可</li>
</ul>
</li>
</ul>
<h2 id="打包压缩"><a href="#打包压缩" class="headerlink" title="打包压缩"></a>打包压缩</h2><ul>
<li><strong>打包压缩</strong> 是日常工作中备份文件的一种方式</li>
<li>在不同操作系统中，常用的打包压缩方式是不同的<ul>
<li><code>Windows</code> 常用 <code>rar</code></li>
<li><code>Mac</code> 常用 <code>zip</code></li>
<li><code>Linux</code> 常用 <code>tar.gz</code></li>
</ul>
</li>
</ul>
<h3 id="打包-／-解包"><a href="#打包-／-解包" class="headerlink" title="打包 ／ 解包"></a>打包 ／ 解包</h3><ul>
<li><code>tar</code> 是 Linux 中最常用的 <strong>备份</strong>工具，此命令可以 <strong>把一系列文件</strong> 打包到 <strong>一个大文件中</strong>，也可以把一个 <strong>打包的大文件恢复成一系列文件</strong></li>
<li><code>tar</code> 的命令格式如下：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line"><span class="comment"># 打包文件</span></div><div class="line">tar -cvf 打包文件.tar 被打包的文件／路径...</div><div class="line"></div><div class="line"><span class="comment"># 解包文件</span></div><div class="line">tar -xvf 打包文件.tar</div></pre></td></tr></table></figure>
<ul>
<li><code>tar</code> 选项说明</li>
</ul>
<table>
<thead>
<tr>
<th>选项</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>c</td>
<td>生成档案文件，创建打包文件</td>
</tr>
<tr>
<td>x</td>
<td>解开档案文件</td>
</tr>
<tr>
<td>v</td>
<td>列出归档解档的详细过程，显示进度</td>
</tr>
<tr>
<td>f</td>
<td>指定档案文件名称，f 后面一定是 .tar 文件，所以必须放选项最后</td>
</tr>
</tbody>
</table>
<blockquote>
<p>注意：<code>f</code> 选项必须放在最后，其他选项顺序可以随意</p>
</blockquote>
<h4 id="打包解包演练"><a href="#打包解包演练" class="headerlink" title="打包解包演练"></a>打包解包演练</h4><ol>
<li>删除桌面下的所有内容</li>
<li>在桌面下新建三个空白文件 <code>01.py</code>、<code>02.py</code>、<code>03.py</code></li>
<li>将这三个文件打一个 <code>py.tar</code> 的包</li>
<li>新建 <code>tar</code> 目录，并且将 <code>py.tar</code> 移动到 <code>tar</code> 目录下</li>
<li>解包 <code>py.tar</code></li>
</ol>
<h3 id="压缩／解压缩"><a href="#压缩／解压缩" class="headerlink" title="压缩／解压缩"></a>压缩／解压缩</h3><h4 id="gzip"><a href="#gzip" class="headerlink" title="gzip"></a><code>gzip</code></h4><ul>
<li><code>tar</code> 与 <code>gzip</code> 命令结合可以使用实现文件 <strong>打包和压缩</strong><ul>
<li><code>tar</code> 只负责打包文件，但不压缩</li>
<li>用 <code>gzip</code> 压缩 <code>tar</code> 打包后的文件，其扩展名一般用 <code>xxx.tar.gz</code></li>
</ul>
</li>
</ul>
<blockquote>
<p>在 <code>Linux</code> 中，最常见的压缩文件格式就是 <code>xxx.tar.gz</code></p>
</blockquote>
<ul>
<li><p>在 <code>tar</code> 命令中有一个选项 <strong>-z</strong> 可以调用 <code>gzip</code>，从而可以方便的实现压缩和解压缩的功能</p>
</li>
<li><p>命令格式如下：</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line"><span class="comment"># 压缩文件</span></div><div class="line">tar -zcvf 打包文件.tar.gz 被压缩的文件／路径...</div><div class="line"></div><div class="line"><span class="comment"># 解压缩文件</span></div><div class="line">tar -zxvf 打包文件.tar.gz</div><div class="line"></div><div class="line"><span class="comment"># 解压缩到指定路径</span></div><div class="line">tar -zxvf 打包文件.tar.gz -C 目标路径</div></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>选项</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>-C</td>
<td>解压缩到指定目录，注意：要解压缩的目录必须存在</td>
</tr>
</tbody>
</table>
<h4 id="bzip2-two"><a href="#bzip2-two" class="headerlink" title="bzip2(two)"></a><code>bzip2(two)</code></h4><ul>
<li><p><code>tar</code> 与 <code>bzip2</code> 命令结合可以使用实现文件 <strong>打包和压缩</strong>（用法和 <code>gzip</code> 一样）</p>
<ul>
<li><code>tar</code> 只负责打包文件，但不压缩，</li>
<li>用 <code>bzip2</code> 压缩 <code>tar</code> 打包后的文件，其扩展名一般用 <code>xxx.tar.bz2</code></li>
</ul>
</li>
<li><p>在 <code>tar</code> 命令中有一个选项 <strong>-j</strong> 可以调用 <code>bzip2</code>，从而可以方便的实现压缩和解压缩的功能</p>
</li>
<li><p>命令格式如下：</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line"><span class="comment"># 压缩文件</span></div><div class="line">tar -jcvf 打包文件.tar.bz2 被压缩的文件／路径...</div><div class="line"></div><div class="line"><span class="comment"># 解压缩文件</span></div><div class="line">tar -jxvf 打包文件.tar.bz2</div></pre></td></tr></table></figure>
<h2 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h2><h2 id="通过-apt-安装／卸载软件"><a href="#通过-apt-安装／卸载软件" class="headerlink" title="通过 apt 安装／卸载软件"></a>通过 apt 安装／卸载软件</h2><ul>
<li>apt 是 <code>Advanced Packaging Tool</code>，是 Linux 下的一款安装包管理工具</li>
<li>可以在终端中方便的 <strong>安装</strong>／<strong>卸载</strong>／<strong>更新软件包</strong></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line"><span class="comment"># 1. 安装软件</span></div><div class="line">$ sudo apt install 软件包</div><div class="line"></div><div class="line"><span class="comment"># 2. 卸载软件</span></div><div class="line">$ sudo apt remove 软件名</div><div class="line"></div><div class="line"><span class="comment"># 3. 更新已安装的包</span></div><div class="line">$ sudo apt upgrade</div></pre></td></tr></table></figure>
<h3 id="安装演练"><a href="#安装演练" class="headerlink" title="安装演练"></a>安装演练</h3><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line"><span class="comment"># 一个小火车提示</span></div><div class="line">$ sudo apt install sl</div><div class="line"></div><div class="line"><span class="comment"># 一个比较漂亮的查看当前进程排名的软件</span></div><div class="line">$ sudo apt install htop</div></pre></td></tr></table></figure>
<p>压缩解压 tar<br>如果要在服务器之间发送大量数据，肯定少不了压缩和解压这两步，但是 tar 这个命令的参数之多，让我很绝望，于是我发明了一个简单的记忆方法。</p>
<p>使用 tar 命令只要记得参数是『必选+自选+f』即可，我们先来看看『必选！五选一』:<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">-c 意为 create，表示创建压缩包</div><div class="line">-x 意为 extract，表示解压</div><div class="line">-t 表示查看内容</div><div class="line">-r 给压缩包追加文件</div><div class="line">-u 意为 update，更新压缩包中的文件</div></pre></td></tr></table></figure></p>
<p>注意了，上面是一定要五选一的，不能一个都不选，也不能同时选俩。但是自选的部分就可以按照需要挑选了，比如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">-z 使用 gzip 属性</div><div class="line">-j 使用 bz2 属性</div><div class="line">-Z 使用 compress 属性</div><div class="line">-v 意为 verbose，显示详细的操作过程</div><div class="line">-O 将文件输出到标准输出</div></pre></td></tr></table></figure>
<p>然后最后一个一定要是 f 后面跟压缩包名（无论是要解压还是要压缩，都是指压缩包的名字）。接下来我们看看具体实例，就很容易理解具体的用法了。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"># 假设我们有很多 .md 文件需要打包，那么可以使用</div><div class="line">tar -cf posts.tar *.md # c 是创建压缩包，也就是压缩，然后是 f，给出压缩包名，最后是要压缩的文件</div><div class="line"># 然后我们发现还有一些 .txt 文件也需要打包进去，那么可以使用</div><div class="line">tar -rf posts.tar *.txt # r 是追加文件</div><div class="line"># 然后我们发现 hello.md 弄错了，修正后需要更新到压缩包中，可以使用</div><div class="line">tar -uf post.tar hello.md # u 是更新</div><div class="line"># 压缩好了，我们来看看压缩包的内容，可以使用</div><div class="line">tar -tf posts.tar # t 是列出文件内容</div><div class="line"># 把压缩包发送到其他位置之后，需要解压，可以使用</div><div class="line">tar -xf posts.tar # x 是解压</div><div class="line">加入自选参数后的用法（要不要加 v 可以看个人喜好）</div></pre></td></tr></table></figure>
<h2 id="tar-gz-相关"><a href="#tar-gz-相关" class="headerlink" title="tar.gz 相关"></a>tar.gz 相关</h2><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">tar -czf posts.tar.gz *.md # 压缩</div><div class="line">tar -xzf posts.tar.gz # 解压</div></pre></td></tr></table></figure>
<h2 id="tar-bz2-相关"><a href="#tar-bz2-相关" class="headerlink" title="tar.bz2 相关"></a>tar.bz2 相关</h2><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">tar -cjf posts.tar.bz2 *.md # 压缩</div><div class="line">tar -xjf posts.tar.bz2 # 解压</div></pre></td></tr></table></figure>
<h2 id="tar-Z-相关"><a href="#tar-Z-相关" class="headerlink" title="tar.Z 相关"></a>tar.Z 相关</h2><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">tar -cZf posts.tar.Z *.md # 压缩</div><div class="line">tar -xZf posts.tar.Z # 解压</div></pre></td></tr></table></figure>
<p>总结一波，遇到不同类型的文件，请用不同的套路来应对：</p>
<ul>
<li>.tar -&gt; tar -xf</li>
<li>.tar.gz -&gt; tar -xzf</li>
<li>.tar.bz2 -&gt; tar -xjf</li>
<li>.tar.Z -&gt; tar -xZf</li>
<li>.gz -&gt; gzip -d</li>
<li>.rar -&gt; unrar e</li>
<li>.zip -&gt; unzip</li>
</ul>
<p>空间占用 du<br>很多时候磁盘被写满了是各种奇怪错误的源头，所以如何快速找到问题所在就很重要了，</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"># 显示当前文件下 Top 10 空间占用的文件/目录，</div><div class="line"># s 表示不显示每个子目录或文件的大小</div><div class="line"># h 表示用更加自然的方式显示（比如 K/M/G 这样）</div><div class="line">du -sh * | sort -nr | head</div></pre></td></tr></table></figure>
<p>系统状态 top<br>了解系统状态一般少不了 top 命令，虽然基本上不需要做任何操作，但是还是有一些可以自定义的内容的，比如<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"># 查看某用户的进程</div><div class="line">top -u wdxtub</div><div class="line"># 进入系统状态显示后，具体值代表的意思是</div><div class="line"># PR    进程优先级，越小优先级越高</div><div class="line"># VIRT  占用的虚拟内存</div><div class="line"># RES   占用的物理内存</div><div class="line"># SHR   占用的共享内存</div><div class="line"># S     进程状态（S - 休眠，R - 正在运行，Z - 僵死状态，N - 优先级为负数）</div><div class="line"># TIME+ 进程启动后占用的总 CPU 时间</div><div class="line"># 可以按照不同的指标排序显示，按对应键即可</div><div class="line"># P 按照 CPU 使用率排序</div><div class="line"># T 按照 MITE+ 排序</div><div class="line"># M 按内存使用占比排序</div></pre></td></tr></table></figure></p>
<p>其他查看进程相关信息的命令有</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"># 查看进程内存分布</div><div class="line">pmap -d 12345 # 12345 是进程号</div><div class="line"># 按照内存排序，这里的 grep 可以过滤特定的用户</div><div class="line">ps -e -o &apos;pid,comm,srgs,pcpu,rsz,vsz,stime,user,uid&apos; | grep wdxtub | sort nrk5</div></pre></td></tr></table></figure>
<p>查找 find<br>在命令行界面中进行查找是每个需要在服务器上执行操作的同学都必备的技能，这里用实例来说明常见的实用用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"># 找出七天前的文件</div><div class="line">find / -type f -mtime +7 -print</div><div class="line"># / 表示从根目录中查找</div><div class="line"># -type f 表示找出系统普通文件，不包含目录</div><div class="line"># -mtime +n 表示寻找 n 天前的数据</div><div class="line"># -print 打印文件名称</div><div class="line"># 找出并删除七天前的文件</div><div class="line">find /temp/ -type f -mtime +7 -print -exec rm -f &#123;&#125; \;</div><div class="line"># -exec 表示后面执行系统命令</div><div class="line"># &#123;&#125; 只有该符号能跟在命令你后面</div><div class="line"># \; 结束符号</div><div class="line">find /temp/ -type f -mtime +7 -print | xargs rm -f</div><div class="line"># 使用管道和 xargs = -exec</div><div class="line"># 查找 /var 下最大的十个文件</div><div class="line">find /var -type f -ls | sort -k 7 -r -n | head</div><div class="line"># 查找 /var/log 下大于 5GB 的文件</div><div class="line">find /var/log/ -type f -size +5120M -exec ls -lh &#123;&#125; \;</div><div class="line"># 找出今天所有文件并将它们拷贝到另一个目录</div><div class="line">find /home/wdxtub/ -ctime 0 -print -exec cp &#123;&#125; /mnt/backup/&#123;&#125; \;</div></pre></td></tr></table></figure>
<p>远程登录 ssh</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">`ssh -vvv username@ip` ssh 的 debug 模式</div><div class="line">`ssh -i key.pem username@ip` 用 pem key 登录 ssh</div></pre></td></tr></table></figure>
<p>奇技淫巧<br>这里是一些比较零碎的命令行技巧</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">openssl rand -hex n 产生随机的十六进制数，n 是字符数</div><div class="line">source /path/to/filename 在当前 shell 里执行一个文件里的命令</div><div class="line">$&#123;variable:0:5&#125; 截取变量的前五个字符</div><div class="line">wget -r --no-parent --reject &quot;index.html*&quot; http://hostname/ -P /home/user/dirs 用 wget 抓取完整的网站目录结构，存放到本地目录中</div><div class="line">mkdir -p /home/wdxtub/&#123;test0,test1,test2&#125; 一次创建多个目录</div><div class="line">dd if=/dev/zero of=/tmp/output.img bs=8k count=256k; rm -rf /tmp/output.img 测试硬盘写入速度</div><div class="line">hdparm -Tt /dev/sda 测试硬盘读取速度</div><div class="line">echo -n &quot;test&quot; | md5sum 获取文本的 md5</div><div class="line">curl -I http://wdxtub.com 获取 HTTP 头信息</div><div class="line">netstat -tln4 | awk &apos;&#123;print $4&#125;&apos; | cut -f2 -d: | grep -o &apos;[0-9]*&apos; 显示所有 tcp4 监听端口</div><div class="line">time command 查看命令的运行时间</div><div class="line">export 查看所有的环境变量</div><div class="line">cmp file1 file2 文件内容对比</div><div class="line">cat -n file 内容前面会显示行号</div><div class="line">lsof -i:22 查看 22 端口现在运行的程序</div><div class="line">lsof -c abc 显示 abc 进程现在打开的文件</div><div class="line">lsof -p 12 看进程号为 12 的进程打开了哪些文件</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;系统结构目录&quot;&gt;&lt;a href=&quot;#系统结构目录&quot; class=&quot;headerlink&quot; title=&quot;系统结构目录&quot;&gt;&lt;/a&gt;系统结构目录&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;目录路径&lt;/th&gt;
&lt;th&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;/usr：&lt;/td&gt;
&lt;td&gt;用户的很多应用程序和文件都放在此目录下。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/usr/bin：&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;系统用户&lt;/strong&gt; 使用的应用程序。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/usr/sbin：&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;超级用户&lt;/strong&gt; 使用的比较高级的管理程序和系统守护程序。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/usr/src：&lt;/td&gt;
&lt;td&gt;内核源代码默认的放置目录。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/home：&lt;/td&gt;
&lt;td&gt;用户的主目录，该目录名一般是以用户的账号命名的。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/bin：&lt;/td&gt;
&lt;td&gt;Binary 的缩写, 存放着最经常使用的终端命令。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/root：&lt;/td&gt;
&lt;td&gt;该目录为系统管理员，也称作 &lt;strong&gt;超级权限者&lt;/strong&gt; 的用户主目录。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/boot：&lt;/td&gt;
&lt;td&gt;启动 Linux 时使用的一些核心文件，包括一些连接文件以及镜像文件。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/etc：&lt;/td&gt;
&lt;td&gt;存放所有的系统管理所需要的 &lt;strong&gt;配置文件&lt;/strong&gt; 和子目录。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/dev ：&lt;/td&gt;
&lt;td&gt;Device (设备)的缩写, 该目录下存放的是Linux的外部设备&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/proc：&lt;/td&gt;
&lt;td&gt;一个映射 &lt;strong&gt;系统内存&lt;/strong&gt; 的虚拟目录，可以通过直接访问此目录获取系统信息。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/sbin：&lt;/td&gt;
&lt;td&gt;存放 &lt;strong&gt;系统管理员&lt;/strong&gt; 使用的系统管理程序。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/tmp：&lt;/td&gt;
&lt;td&gt;存放一些临时文件的。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/var：&lt;/td&gt;
&lt;td&gt;不断扩充或者 &lt;strong&gt;经常被修改&lt;/strong&gt; 的文件会存放在此目录下，比如各种日志文件。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/media：&lt;/td&gt;
&lt;td&gt;Linux 会把识别的设备挂载到这个目录下。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/lost+found：&lt;/td&gt;
&lt;td&gt;当系统非法关机后，这里就存放了一些文件。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/lib：&lt;/td&gt;
&lt;td&gt;存放系统最基本的动态连接共享库。几乎所有的应用程序都需要用到这些共享库。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/mnt：&lt;/td&gt;
&lt;td&gt;该目录是为了让用户临时挂载其他文件系统的，可以将光驱挂载在/mnt/上，然后进入该目录就可以查看光驱里的内容了。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/opt：&lt;/td&gt;
&lt;td&gt;这是给主机额外安装软件所摆放的目录。比如你安装一个ORACLE数据库则就可以放到这个目录下。默认是空的。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/selinux：&lt;/td&gt;
&lt;td&gt;这个目录是Redhat/CentOS所特有的目录，Selinux是一个安全机制，类似于windows的防火墙。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/srv：&lt;/td&gt;
&lt;td&gt;该目录存放一些服务启动之后需要提取的数据。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/sys：&lt;/td&gt;
&lt;td&gt;该目录下安装了2.6内核中新出现的一个文件系统 sysfs 。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
    
    </summary>
    
      <category term="技术笔记" scheme="http://www.baixiaojian.com/categories/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="笔记" scheme="http://www.baixiaojian.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="linux" scheme="http://www.baixiaojian.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>以太坊 笔记</title>
    <link href="http://www.baixiaojian.com/eth/"/>
    <id>http://www.baixiaojian.com/eth/</id>
    <published>2018-07-11T15:33:38.000Z</published>
    <updated>2018-10-03T13:39:27.597Z</updated>
    
    <content type="html"><![CDATA[<h2 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h2><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">eth.accounts                                                      =&gt; 查看账户</div><div class="line">personal.newAccount()                                             =&gt; 创建账户</div><div class="line">eth.getBalance(eth.accounts[0])                                   =&gt; 查看余额</div><div class="line">miner.start(1)                                                    =&gt; 启动挖矿</div><div class="line">miner.stop()                                                      =&gt; 停止挖矿</div><div class="line">miner.start(1);admin.sleepBlocks(1);miner.stop();                 =&gt; 挖矿后</div><div class="line">web3.fromWei(eth.getBalance(eth.accounts[1]))                     =&gt; 查看转换过后的数量</div><div class="line">geth init ./genesis.json --datadir ./data                         =&gt; 初始化</div><div class="line">geth --datadir ./data --nodiscover --networkid 1024 --rpc console =&gt; 启动</div><div class="line">geth --datadir ./data --nodiscover --networkid 1024 --rpc --rpccorsdomain=&quot;\*&quot; console =&gt; 启动时解决本地跨域问题</div></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="坑点"><a href="#坑点" class="headerlink" title="坑点"></a>坑点</h2><ul>
<li><code>60000 * (5000000000 / 1e18) = 60000 * (gasLimit / 1e18)</code> 计算打币需消耗的 eth</li>
<li>地址前面需要加上 0x 否则生成地址不一致的问题</li>
<li>chainId 不一致带来的交易失效问题</li>
<li><code>--rpccorsdomain=&quot;*&quot;</code> 解决跨域的问题</li>
<li>批量打 true (动态设置 nonce 值)</li>
<li>通过 <code>web3.eth.sendTransaction</code> 发起交易可以记录 tx 交易值</li>
</ul>
<h2 id="ERC20-API"><a href="#ERC20-API" class="headerlink" title="ERC20 API"></a>ERC20 API</h2><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">eth      =&gt; 包含一些跟操作区块链相关的方法</div><div class="line">net      =&gt; 包含以下查看p2p网络状态的方法</div><div class="line">admin    =&gt; 包含一些与管理节点相关的方法</div><div class="line">miner    =&gt; 包含启动&amp;停止挖矿的一些方法</div><div class="line">personal =&gt; 主要包含一些管理账户的方法</div><div class="line">txpool   =&gt; 包含一些查看交易内存池的方法</div><div class="line">web3     =&gt; 包含了以上对象，还包含一些单位换算的方法</div></pre></td></tr></table></figure>
<h2 id="钱包概念"><a href="#钱包概念" class="headerlink" title="钱包概念"></a>钱包概念</h2><p>以太坊系钱包名词有地址、密码、私钥、助记词、keystore。</p>
<p>若以银行账户为类比，这 5 个词分别对应内容如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">地址          = 银行卡号</div><div class="line">密码          = 银行卡密码</div><div class="line">私钥          = 银行卡号+银行卡密码</div><div class="line">助记词        = 银行卡号+银行卡密码</div><div class="line">Keystore+密码 = 银行卡号+银行卡密码</div><div class="line">Keystore      ≠ 银行卡号</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;常用操作&quot;&gt;&lt;a href=&quot;#常用操作&quot; class=&quot;headerlink&quot; title=&quot;常用操作&quot;&gt;&lt;/a&gt;常用操作&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;eth.accounts                                                      =&amp;gt; 查看账户&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;personal.newAccount()                                             =&amp;gt; 创建账户&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;eth.getBalance(eth.accounts[0])                                   =&amp;gt; 查看余额&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;miner.start(1)                                                    =&amp;gt; 启动挖矿&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;miner.stop()                                                      =&amp;gt; 停止挖矿&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;miner.start(1);admin.sleepBlocks(1);miner.stop();                 =&amp;gt; 挖矿后&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;web3.fromWei(eth.getBalance(eth.accounts[1]))                     =&amp;gt; 查看转换过后的数量&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;geth init ./genesis.json --datadir ./data                         =&amp;gt; 初始化&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;geth --datadir ./data --nodiscover --networkid 1024 --rpc console =&amp;gt; 启动&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;geth --datadir ./data --nodiscover --networkid 1024 --rpc --rpccorsdomain=&amp;quot;\*&amp;quot; console =&amp;gt; 启动时解决本地跨域问题&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="技术笔记" scheme="http://www.baixiaojian.com/categories/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="以太坊" scheme="http://www.baixiaojian.com/tags/%E4%BB%A5%E5%A4%AA%E5%9D%8A/"/>
    
      <category term="智能合约" scheme="http://www.baixiaojian.com/tags/%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6/"/>
    
      <category term="去中心化" scheme="http://www.baixiaojian.com/tags/%E5%8E%BB%E4%B8%AD%E5%BF%83%E5%8C%96/"/>
    
      <category term="区块链" scheme="http://www.baixiaojian.com/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
  </entry>
  
  <entry>
    <title>面向对象</title>
    <link href="http://www.baixiaojian.com/jsrelearn/"/>
    <id>http://www.baixiaojian.com/jsrelearn/</id>
    <published>2018-03-19T08:14:49.000Z</published>
    <updated>2018-10-03T13:40:17.877Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Object-对象"><a href="#Object-对象" class="headerlink" title="Object 对象"></a>Object 对象</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>JS 中其他<strong>所有对象都继承自Object对象</strong>，即那些对象都是Object的实例。<br>Object对象的原生方法分成两类：<code>本身</code>和<code>实例</code>方法。</p>
<h3 id="Object-工具方法"><a href="#Object-工具方法" class="headerlink" title="Object() 工具方法"></a>Object() 工具方法</h3><p>Object 本身是一个函数,<br>可以把<strong>任意参数</strong>转换成对象,<br>如果参数是<code>对象则直接返回</code>该参数,<br>如果参数是<code>原始类型</code>的值, 则将其转为对应的<code>包装对象的实例</code>.</p>
<a id="more"></a>
<h3 id="Object-构造函数"><a href="#Object-构造函数" class="headerlink" title="Object 构造函数"></a>Object 构造函数</h3><p>Object构造函数的首要用途，是直接通过它来生成新对象。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>(); <span class="comment">// 通过构造函数生成新对象</span></div><div class="line"><span class="keyword">var</span> obj = &#123;&#125;;           <span class="comment">// 字面量写法等价与前者</span></div></pre></td></tr></table></figure>
<p>构造函数与工具方法基本一样,不同的地方是,<br>Object(value) 是将值<code>转换</code>成对象,<br>new Object() 是<code>生成</code>一个对象.</p>
<h3 id="Object-的静态方法"><a href="#Object-的静态方法" class="headerlink" title="Object 的静态方法"></a>Object 的静态方法</h3><blockquote>
<p>所谓“静态方法”，是指部署在Object对象自身的方法。</p>
</blockquote>
<table>
<thead>
<tr>
<th>get相关操作</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>Object.values(obj)</td>
<td>以数组形式返回对象的value(不含枚举)</td>
</tr>
<tr>
<td>Object.keys(obj)</td>
<td>以数组形式返回对象的key(不含枚举)</td>
</tr>
<tr>
<td>Object.getOwnPropertyNames(obj)</td>
<td>以数组形式返回对象的key(含枚举)</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>对象属性模型相关</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>Object.getOwnPropertyDescriptor()</td>
<td>获取某个属性的描述对象。</td>
</tr>
<tr>
<td>Object.defineProperty()</td>
<td>通过描述对象，定义某个属性。</td>
</tr>
<tr>
<td>Object.defineProperties()</td>
<td>通过描述对象，定义多个属性。</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>控制对象状态</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>Object.preventExtensions()</td>
<td>防止对象扩展。</td>
</tr>
<tr>
<td>Object.seal()</td>
<td>禁止对象配置。</td>
</tr>
<tr>
<td>Object.freeze()</td>
<td>冻结一个对象。</td>
</tr>
<tr>
<td>Object.isExtensible()</td>
<td>判断对象是否可扩展。</td>
</tr>
<tr>
<td>Object.isSealed()</td>
<td>判断一个对象是否可配置。</td>
</tr>
<tr>
<td>Object.isFrozen()</td>
<td>判断一个对象是否被冻结。</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>原型链相关</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>Object.create()</td>
<td>该方法可以指定原型对象和属性，返回一个新的对象。</td>
</tr>
<tr>
<td>Object.getPrototypeOf()</td>
<td>获取对象的Prototype对象。</td>
</tr>
</tbody>
</table>
<h3 id="Object-的实例方法"><a href="#Object-的实例方法" class="headerlink" title="Object 的实例方法"></a>Object 的实例方法</h3><table>
<thead>
<tr>
<th>方法</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>Object.prototype.valueOf()</td>
<td>返回当前对象对应的值。</td>
</tr>
<tr>
<td>Object.prototype.toString()</td>
<td>返回当前对象对应的字符串形式。</td>
</tr>
<tr>
<td>Object.prototype.toLocaleString()</td>
<td>返回当前对象对应的本地字符串形式。</td>
</tr>
<tr>
<td>Object.prototype.hasOwnProperty()</td>
<td>判断某个属性是否为<code>当前对象自身</code>的属性，还是<code>继承自原型</code>对象的属性。</td>
</tr>
<tr>
<td>in 运算符   <code>&#39;length&#39; in Date</code></td>
<td>返回一个布尔值，表示一个对象是否具有某个属性, 不区分属性是自身还是来自继承</td>
</tr>
<tr>
<td>Object.prototype.isPrototypeOf()</td>
<td>判断当前对象是否为另一个对象的原型。</td>
</tr>
<tr>
<td>Object.prototype.propertyIsEnumerable()</td>
<td>判断某个属性是否可枚举。</td>
</tr>
</tbody>
</table>
<ul>
<li>Object.prototype.valueOf() 方法的主要用于是用于<code>隐式转换</code>, 当与数值相加时会用 toString() 方法得到本身值在进行计算</li>
<li>Object.prototype.toString() 方法作用是返回一个<code>对象形式</code>的字符串</li>
</ul>
<h3 id="toString-的应用：判断数据类型"><a href="#toString-的应用：判断数据类型" class="headerlink" title="toString() 的应用：判断数据类型"></a>toString() 的应用：判断数据类型</h3><blockquote>
<p>Object.prototype.toString 返回对象的<code>类型字符串</code>, 因此可以用来判断一个值的类型.</p>
</blockquote>
<p>由于实例对象可能会自定义 <code>toString</code> 方法, 所以不会再去引用 Object.prototype 上的 <code>toString</code> 方法,<br>所以为了得到类型字符串, 最好直接使用 <code>Object.prototype.toString</code> 方法.<br>通过函数的 call 方法, 可以在任意值上调用这个方法, 帮助我们判断这个值得类型.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="number">2</span>) <span class="comment">// "[object Number]"</span></div><div class="line"><span class="built_in">Object</span>.prototype.toString.call([]) <span class="comment">// "[object Array]"</span></div><div class="line">......</div></pre></td></tr></table></figure>
<h2 id="面向对象编程"><a href="#面向对象编程" class="headerlink" title="面向对象编程"></a>面向对象编程</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>为什么要了解面向对象编程呢?<br>因为要是不懂面向对象编程, 看框架的源码是很费劲的,<br>而面向对象也是不容易掌握的, 其中最重要的一定就是<code>抽象思维</code> 把思维要<code>打开</code>。</p>
<p><strong>对象是单个<code>实物</code>的抽象</strong><br><strong>对象是一个容器, 封装了属性(property) 和方法(method)</strong></p>
<h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><p>面向对象编程的第一步，<code>就是要生成对象</code>。<br>前面说过，对象是<code>单个实物的抽象</code>。<br>通常需要一个模板，表示<code>某一类实物</code>的<code>共同特征</code>，然后对象根据这个模板生成。</p>
<p>JS 使用构造函数(constructor)作为对象的模板.<br>所谓 “构造函数” ,就是专门用来生成实例对象的函数.<br>他就是对象的一个模板,用来描述对象的基本结构.<br>一个构造函数, 可以生成多个实例对象,这些实例对象都有相同的结构.</p>
<p>构造函数就是一个普通的函数, 但是有自己的特征和用法.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> Vehicle = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.price = <span class="number">1000</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Vehicle 就是构造函数, 为了与普通函数的区别, 构造函数名字的第一个字母通常大写.<br>构造函数的特点有俩个.</p>
<ul>
<li>函数体内使用了 <code>this</code> 关键字, 代表了所要生成的<code>对象实例</code></li>
<li>声称对象时必须使用 <code>new</code> 命令</li>
</ul>
<h3 id="new-命令"><a href="#new-命令" class="headerlink" title="new 命令"></a>new 命令</h3><blockquote>
<p>new 命令的作用, 就是执行构造函数, 返回一个实例对象.</p>
</blockquote>
<p>如果忘了使用 new 命令, 直接调用构造函数时,<br>构造函数就变成了普通函数, 并不会生成实例对象,<br>而且构造函数内的 <code>this</code> 会指向 <code>window</code>,<br>严格模式 this 默认指向 <code>undefined</code> 导致严格模式会出现错误</p>
<h4 id="new-命令的原理"><a href="#new-命令的原理" class="headerlink" title="new 命令的原理"></a>new 命令的原理</h4><p>使用 new 命令是, 它后面的函数一次执行下面的步骤.</p>
<ol>
<li>创建一个<code>空对象</code>, 作为将要返回的对象实例.</li>
<li>将这个空对象的原型, 指向构造函数的 <code>prototype</code> 属性</li>
<li>将这个<code>空对象赋值给</code>函数内部的 <code>this</code> 关键字</li>
<li>开始<code>执行</code>构造函数内部的代码</li>
</ol>
<p>如果对<code>使用new</code>命令的函数内部<code>没有this</code>关键字的话, 返回的就是一个<code>空的对象</code>.<br>如果构造函数内部<code>有return</code> 语句并且<code>是对象</code>, <code>则直接返回</code>该对象, 反之则忽略, 继续返回 this 对象.</p>
<p>函数内部可以使用 <code>new.targe</code> 属性来区分是否使用 new 命令.</p>
<h4 id="Object-create-创建实例对象"><a href="#Object-create-创建实例对象" class="headerlink" title="Object.create() 创建实例对象"></a>Object.create() 创建实例对象</h4><blockquote>
<p>构造函数作为模板, 可以生成实例对象.</p>
</blockquote>
<p>但有时是拿不到构造函数, 只能拿到一个现有的对象.<br>这时就可以使用 Object.create() 方法就可以继承现有对象的方法和属性到新的对象上.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 原型对象</span></div><div class="line"><span class="keyword">var</span> A = &#123;</div><div class="line">  <span class="attr">print</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'hello'</span>);</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// 实例对象</span></div><div class="line"><span class="keyword">var</span> B = <span class="built_in">Object</span>.create(A);</div><div class="line"></div><div class="line"><span class="built_in">Object</span>.getPrototypeOf(B) === A <span class="comment">// true</span></div><div class="line">B.print() <span class="comment">// hello</span></div><div class="line">B.print === A.print <span class="comment">// true</span></div></pre></td></tr></table></figure>
<h2 id="prototype-对象"><a href="#prototype-对象" class="headerlink" title="prototype 对象"></a>prototype 对象</h2><blockquote>
<p>面向对象编程很重要的一个方面, 就是对象的继承.<br>A 对象通过继承 B 对象, 就能直接拥有 B 对象的所有属性和方法.<br>这对于代码的复用是非常有用的</p>
</blockquote>
<h3 id="prototype-属性的作用"><a href="#prototype-属性的作用" class="headerlink" title="prototype 属性的作用"></a>prototype 属性的作用</h3><p>JavaScript 继承机制的设计思想就是,<br>原型对象的所有属性和方法, 都能被<code>实例对象共享</code>.<br>也就是说, 如果属性和方法定义在原型上,<br>那么所有实例对象就能共享, 不仅节省了内存, 还体现了是实例对象之间的联系</p>
<h3 id="构造函数的缺点"><a href="#构造函数的缺点" class="headerlink" title="构造函数的缺点"></a>构造函数的缺点</h3><p>构造函数中的方法每新建一个实例, 就会新建<code>构造函数</code>中的方法,<br>这样既没有必要, 又浪费系统资源, 因为所有的<code>构造函数</code>中所有的方法都是同样的行为,<br><strong>所以应该共享</strong>, 可以通过 JS 的原型链实现该需求.</p>
<h3 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h3><p>JavaScript 规定, <strong>所有对象都有自己的原型对象</strong>.<br>一方面, 任何一个对象, 都可以充当<code>其他对象的原型</code>,<br>另一方面, 由于原型对象也是对象, 所以它也<code>有自己的原型</code>.<br>因此, 就会形成一个 “原型链”: 对象到原型, 再到原型的原型</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">如果一层一层的扒, 所有的原型追到底 都是 Object.prototype,</div><div class="line">就是 Object 的 prototype 属性. 也就是说 所有对象都集成了 Object.prototype 的属性.</div><div class="line">这也就是所有对象都有 valueOf 和 toString 方法的原因, 因为这是从 object.prototype 继承的.</div></pre></td></tr></table></figure>
<p>那么这个顶级对象的原型有<code>指向何处</code>呢 ?<br>答案是 null, null 没有任何属性和方法, 也没有自己的原型.<br><em>因此, 原型链的尽头就是 <code>null</code>.</em></p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="built_in">Object</span>.getPrototypeOf(<span class="built_in">Object</span>.prototype) <span class="comment">//null</span></div></pre></td></tr></table></figure>
<p>读取对象的某个属性时, JavaScript 引擎会先从自身对象寻找,<br>找不到就会去该属性对象的原型上去找, 以此类推到顶级对象,<br>如果还是找不到则返回 <code>undefined</code>.</p>
<p>注意, 一层一层的在整个圆形脸上寻找某个属性,<br>对性能是有影响的. 所寻找的属性在月上层的原型对象, 对性能的影响越大.<br>如果寻找某个不存在的属性时, 将会遍历整个原型链.</p>
<ul>
<li><strong>constructor 属性</strong><ul>
<li>prototype 对象有一个 constructor 属性, 默认指向 prototype 对所在的构造函数.</li>
</ul>
</li>
<li><strong>instanceof 运算符</strong><ul>
<li>返回一个布尔值, 表示对象是否为某个构造函数的实例.</li>
</ul>
</li>
</ul>
<h3 id="this-关键字"><a href="#this-关键字" class="headerlink" title="this 关键字"></a>this 关键字</h3><h4 id="涵义"><a href="#涵义" class="headerlink" title="涵义"></a>涵义</h4><p>this 可以用在构造函数之中, 表示实例对象.<br>除此之外, this 还可以用在别的场合, this 都有一个共同点: 它总是返回一个对象</p>
<p>简单说, this 就是属性或方法 “当前” 所在的对象</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> a = &#123;</div><div class="line">  <span class="attr">name</span>: <span class="string">'张三'</span>,</div><div class="line">  <span class="attr">fn</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>)</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">a.fn()</div><div class="line"><span class="comment">// &#123; name:'张三', fn: f &#125;</span></div></pre></td></tr></table></figure>
<h4 id="适用场合"><a href="#适用场合" class="headerlink" title="适用场合"></a>适用场合</h4><p>this 主要有以下几个使用场合</p>
<p><strong>1.全局环境</strong><br>全局环境使用 this , 它指的就是顶层对象 window.</p>
<p><strong>2.构造函数</strong><br>构造函数中的 this, 指的是实例对象.</p>
<p><strong>3.对象的方法</strong><br>如果对象的方法里面包含 this, this 的只想就是方式运行时所在的对象.<br><em>该方法赋值给另一个对象时就会改变 this 指向.</em></p>
<p><strong><code>this</code> 使用注意点:</strong></p>
<ul>
<li>避免<code>多层</code> this</li>
<li>避免<code>数组处理</code>方法中的 this</li>
<li>避免<code>回调函数</code>中的 this</li>
</ul>
<h4 id="绑定-this-的方法"><a href="#绑定-this-的方法" class="headerlink" title="绑定 this 的方法"></a>绑定 this 的方法</h4><p>虽然 this 的切换为 js 提供了超高的灵活性，但同时也加大了代码的可阅读性和困难程度。<br>有时就需要 将 this 固定下来， 避免出现意想不到的情况。<br>JavaScript 中提供的三种方法， 分别是 call、apply、bind。</p>
<ul>
<li>apply、call、bind 三者第一个参数都是this要指向的对象，也就是想指定的上下文；</li>
<li>apply、call、bind 三者都可以利用后续参数传参；</li>
<li>bind 是返回对应回调函数, 调用时改变其该bind函数的内部this</li>
</ul>
<h5 id="Function-prototype-call"><a href="#Function-prototype-call" class="headerlink" title="Function.prototype.call()"></a>Function.prototype.call()</h5><p>函数实例的 <code>call</code> 方法, 可以改变函数内部的 <code>this</code> 指向为 <code>call</code> 传入的第一个参数对象.</p>
<p><code>call</code> 方法的<code>参数</code>需要是一个<code>对象</code>, 如果参数是 <code>null</code> 或 <code>undefined</code> 那么默认传入全局对象 <code>window</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> n = <span class="number">123</span>;</div><div class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">n</span>: <span class="number">456</span> &#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.n);</div><div class="line">&#125;</div><div class="line"></div><div class="line">a.call() <span class="comment">// 123</span></div><div class="line">a.call(<span class="literal">null</span>) <span class="comment">// 123</span></div><div class="line">a.call(<span class="literal">undefined</span>) <span class="comment">// 123</span></div><div class="line">a.call(<span class="built_in">window</span>) <span class="comment">// 123</span></div><div class="line">a.call(obj) <span class="comment">// 456</span></div></pre></td></tr></table></figure>
<p><code>call</code> 方法还接受多个参数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a, b</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> a + b</div><div class="line">&#125;</div><div class="line">add.call(<span class="keyword">this</span>, <span class="number">3</span>, <span class="number">5</span>)</div><div class="line"><span class="comment">// 8</span></div></pre></td></tr></table></figure>
<h5 id="Function-prototype-apply"><a href="#Function-prototype-apply" class="headerlink" title="Function.prototype.apply()"></a>Function.prototype.apply()</h5><p>apply 方法的作用于 call 基本一致, 唯一的区别就是它是用数组进行传参的.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line">func.apply(thisValue, [arg1, arg2, ...])</div></pre></td></tr></table></figure>
<h5 id="Function-prototype-bind"><a href="#Function-prototype-bind" class="headerlink" title="Function.prototype.bind()"></a>Function.prototype.bind()</h5><p><code>bind</code> 方法用于将函数体内的 <code>this</code> 绑定到某个对象, 然后返回一个新函数.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Object-对象&quot;&gt;&lt;a href=&quot;#Object-对象&quot; class=&quot;headerlink&quot; title=&quot;Object 对象&quot;&gt;&lt;/a&gt;Object 对象&lt;/h2&gt;&lt;h3 id=&quot;基本概念&quot;&gt;&lt;a href=&quot;#基本概念&quot; class=&quot;headerlink&quot; title=&quot;基本概念&quot;&gt;&lt;/a&gt;基本概念&lt;/h3&gt;&lt;p&gt;JS 中其他&lt;strong&gt;所有对象都继承自Object对象&lt;/strong&gt;，即那些对象都是Object的实例。&lt;br&gt;Object对象的原生方法分成两类：&lt;code&gt;本身&lt;/code&gt;和&lt;code&gt;实例&lt;/code&gt;方法。&lt;/p&gt;
&lt;h3 id=&quot;Object-工具方法&quot;&gt;&lt;a href=&quot;#Object-工具方法&quot; class=&quot;headerlink&quot; title=&quot;Object() 工具方法&quot;&gt;&lt;/a&gt;Object() 工具方法&lt;/h3&gt;&lt;p&gt;Object 本身是一个函数,&lt;br&gt;可以把&lt;strong&gt;任意参数&lt;/strong&gt;转换成对象,&lt;br&gt;如果参数是&lt;code&gt;对象则直接返回&lt;/code&gt;该参数,&lt;br&gt;如果参数是&lt;code&gt;原始类型&lt;/code&gt;的值, 则将其转为对应的&lt;code&gt;包装对象的实例&lt;/code&gt;.&lt;/p&gt;
    
    </summary>
    
      <category term="技术笔记" scheme="http://www.baixiaojian.com/categories/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="笔记" scheme="http://www.baixiaojian.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="js" scheme="http://www.baixiaojian.com/tags/js/"/>
    
      <category term="进阶" scheme="http://www.baixiaojian.com/tags/%E8%BF%9B%E9%98%B6/"/>
    
  </entry>
  
  <entry>
    <title>腾讯云服务器部署 Node 应用</title>
    <link href="http://www.baixiaojian.com/%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2node%E5%BA%94%E7%94%A8/"/>
    <id>http://www.baixiaojian.com/云服务器部署node应用/</id>
    <published>2018-03-08T14:22:27.000Z</published>
    <updated>2018-09-29T03:51:32.864Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>就在前天，微信群里有人说腾讯云服务器搞活动 <code>1核2G 一个月10块钱</code>，<br>一起拼团的话还有优惠，我就心动了，一下续了二年的，<br>正好结合我所掌握的技术点，走通上线部署的流程，<br>不仅可以巩固我所掌握的知识点，也是让自己学的东西有个输出。</p>
<a id="more"></a>
<h2 id="云服务器"><a href="#云服务器" class="headerlink" title="云服务器"></a>云服务器</h2><p>我的云服务器主机 <code>centOS</code> 的基本配置</p>
<p><img src="../imgs/server.jpeg" alt=""></p>
<h2 id="服务器登录"><a href="#服务器登录" class="headerlink" title="服务器登录"></a>服务器登录</h2><p>Mac 下可以使用自带的终端或者 <code>iTerm2</code> 通过命令方式进行登录</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">ssh root@&lt;公网IP&gt;</div></pre></td></tr></table></figure>
<h2 id="安装-Node-运行环境"><a href="#安装-Node-运行环境" class="headerlink" title="安装 Node 运行环境"></a>安装 Node 运行环境</h2><p>用 nvm 来管理 node 版本：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.0/install.sh | bash</div></pre></td></tr></table></figure>
<p>安装 node：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">nvm install v8.9.5</div><div class="line">node -v</div></pre></td></tr></table></figure>
<h2 id="安装-cnpm"><a href="#安装-cnpm" class="headerlink" title="安装 cnpm"></a>安装 cnpm</h2><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</div></pre></td></tr></table></figure>
<h2 id="安装-git"><a href="#安装-git" class="headerlink" title="安装 git"></a>安装 git</h2><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">yum install git</div></pre></td></tr></table></figure>
<h2 id="生成-ssh-秘钥"><a href="#生成-ssh-秘钥" class="headerlink" title="生成 ssh 秘钥"></a>生成 ssh 秘钥</h2><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">git config --global user.name &quot;baixiaojian&quot;</div><div class="line">git config --global user.email &quot;邮箱&quot;</div><div class="line"></div><div class="line">ssh-keygen -t rsa -C &quot;邮箱&quot;</div></pre></td></tr></table></figure>
<h2 id="Hello-world"><a href="#Hello-world" class="headerlink" title="Hello world"></a>Hello world</h2><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</div><div class="line"><span class="keyword">const</span> server = http.createServer(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</div><div class="line">  res.statusCode = <span class="number">200</span>;</div><div class="line">  res.setHeader(<span class="string">'Content-Type'</span>, <span class="string">'text/plain'</span>);</div><div class="line">  res.end(<span class="string">'Hello World\n'</span>);</div><div class="line">&#125;);</div><div class="line">server.listen(<span class="number">3000</span>, () =&gt; &#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">`Server is running at port 3000`</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>在服务端执行：</p>
<p><img src="../imgs/iterm.jpg" alt=""></p>
<p>在浏览器`中打开:</p>
<p><img src="../imgs/hello.png" alt=""></p>
<h2 id="域名解析"><a href="#域名解析" class="headerlink" title="域名解析"></a>域名解析</h2><p>虽然可以通过 IP 地址访问, 但是记忆起来比较困难, 可以通过<code>配置域名</code>来访问 node 应用。</p>
<p><img src="../imgs/yuming.png" alt=""></p>
<p>我原本就有一个 <code>baixiaojian.com</code> 的域名,<br>所以我再次基础上配一个二级域名指向自己的主机,<br>如 <code>ok.baixiaojian.com</code>, 访问主机时 通过 nginx 反向代理到服务器指定端口应用,<br>这样的一个好处就是可以使 80 端口共用, <code>域名解析默认</code>是 80 端口, 如果不是 80 端口,<br>就需要指定端口号, 就像这样 <code>ok.baixiaojian.com:4000</code> 这样的体验是非常差的,<br>所以 nginx 使 80 端口可以共用是非常必要的。</p>
<p><a href="http://www.baixiaojian.com/nginx/">安装 nginx</a><br><a href="http://www.baixiaojian.com/nginx%E7%AC%94%E8%AE%B0/#more">配置 nginx</a></p>
<h2 id="Transmit"><a href="#Transmit" class="headerlink" title="Transmit"></a>Transmit</h2><p>Transmit 是 Mac 下一款实用的 FTP 客户端软件，它使用起来非常的稳定，速度也比较理想。</p>
<p><a href="https://www.hitnology.com/video-813.html" rel="external nofollow noopener noreferrer" target="_blank">使用教程</a></p>
<h2 id="pm2-进程管理"><a href="#pm2-进程管理" class="headerlink" title="pm2 进程管理"></a>pm2 进程管理</h2><p><a href="http://www.cnblogs.com/chyingp/p/pm2-documentation.html" rel="external nofollow noopener noreferrer" target="_blank">pm2 入门指南</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;就在前天，微信群里有人说腾讯云服务器搞活动 &lt;code&gt;1核2G 一个月10块钱&lt;/code&gt;，&lt;br&gt;一起拼团的话还有优惠，我就心动了，一下续了二年的，&lt;br&gt;正好结合我所掌握的技术点，走通上线部署的流程，&lt;br&gt;不仅可以巩固我所掌握的知识点，也是让自己学的东西有个输出。&lt;/p&gt;
    
    </summary>
    
      <category term="快捷操作" scheme="http://www.baixiaojian.com/categories/%E5%BF%AB%E6%8D%B7%E6%93%8D%E4%BD%9C/"/>
    
    
      <category term="腾讯云" scheme="http://www.baixiaojian.com/tags/%E8%85%BE%E8%AE%AF%E4%BA%91/"/>
    
      <category term="Node" scheme="http://www.baixiaojian.com/tags/Node/"/>
    
      <category term="部署" scheme="http://www.baixiaojian.com/tags/%E9%83%A8%E7%BD%B2/"/>
    
  </entry>
  
  <entry>
    <title>nginx 笔记</title>
    <link href="http://www.baixiaojian.com/nginx/"/>
    <id>http://www.baixiaojian.com/nginx/</id>
    <published>2018-03-04T12:35:57.000Z</published>
    <updated>2018-09-29T03:53:45.615Z</updated>
    
    <content type="html"><![CDATA[<p><img src="../imgs/nginx-proxy.jpg" alt=""></p>
<a id="more"></a>
<p><a href="https://www.zhihu.com/question/24723688/answer/48369770" rel="external nofollow noopener noreferrer" target="_blank">图源来自知乎</a></p>
<h2 id="反向代理的优点"><a href="#反向代理的优点" class="headerlink" title="反向代理的优点"></a>反向代理的优点</h2><ul>
<li><code>保护</code>真实 web 服务器，其对外不可见；</li>
<li><code>节约</code>了有限的 ip 地址资源；</li>
<li><code>减少</code> web 服务器压力，提高响应速度；</li>
<li>请求的统一控制，包括设置权限、过滤规则等；</li>
<li>区分动态和静态可缓存内容；</li>
<li>实现负载均衡，内部可以采用多台服务器来组成服务器集群，外部还是可以采用一个地址访问；</li>
<li>解决 Ajax 跨域问题；</li>
<li>作为真实服务器的缓冲，解决瞬间负载量大的问题；</li>
</ul>
<h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">main # 全局设置</div><div class="line">events &#123; # Nginx工作模式</div><div class="line">    ....</div><div class="line">&#125;</div><div class="line">http &#123; # http设置</div><div class="line">    ....</div><div class="line">    upstream myproject &#123; # 负载均衡服务器设置</div><div class="line">        .....</div><div class="line">    &#125;</div><div class="line">    server  &#123; # 主机设置</div><div class="line">        ....</div><div class="line">        location &#123; # URL匹配</div><div class="line">            ....</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    server  &#123;</div><div class="line">        ....</div><div class="line">        location &#123;</div><div class="line">            ....</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    ....</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="功能实现"><a href="#功能实现" class="headerlink" title="功能实现"></a>功能实现</h2><h3 id="基于域名的虚拟主机"><a href="#基于域名的虚拟主机" class="headerlink" title="基于域名的虚拟主机"></a>基于域名的虚拟主机</h3><p>第一步: 假设我们在本地开发有3个项目，需要分别在 hosts 里<code>映射到本地</code>的127.0.0.1上：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">127.0.0.1 www.aaa.com</div><div class="line">127.0.0.1 www.bbb.com</div><div class="line">127.0.0.1 www.ccc.com</div></pre></td></tr></table></figure>
<p>第二步: 分别对应于web根目录下的3个文件夹，用域名<code>对应文件夹</code>名字，为了好记：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">/Users/baixiaojian/www/www.aaa.com/</div><div class="line">/Users/baixiaojian/www/www.bbb.com/</div><div class="line">/Users/baixiaojian/www/www.ccc.com/</div></pre></td></tr></table></figure>
<p>每个目录都有一个 index.html 文件, 都是简单的输出自己的域名.</p>
<p>第三步: 我们要新建3个server来<code>搭建对应个域名的虚拟主机</code>。</p>
<blockquote>
<p>这3个 server 配置信息都写成一个 .conf 的配置文件,然后在 http 模块统一导入,这样比较便于维护和管理</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">main</div><div class="line">events &#123;</div><div class="line">    ....</div><div class="line">&#125;</div><div class="line">http &#123;</div><div class="line">    ....</div><div class="line">    include servers/www.aaa.conf;</div><div class="line">    include servers/www.bbb.conf;</div><div class="line">    include servers/www.ccc.conf;</div><div class="line">    # 或者用 *.conf  包含</div><div class="line">    # include servers/*.conf</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>既然每一个conf都是一个server，下面就开始：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">### www.aaa.com</div><div class="line">  server &#123;</div><div class="line">      charset utf-8;</div><div class="line"></div><div class="line">      listen       80;</div><div class="line">      server_name  www.aaa.com;</div><div class="line"></div><div class="line">      location / &#123;</div><div class="line">          root   /Users/baixiaojian/www/www.aaa.com/;</div><div class="line">          index  index.html index.htm;</div><div class="line">      &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">### www.bbb.com</div><div class="line">  server &#123;</div><div class="line">      charset utf-8;</div><div class="line"></div><div class="line">      listen       80;</div><div class="line">      server_name  www.bbb.com;</div><div class="line"></div><div class="line">      location / &#123;</div><div class="line">          root   /Users/baixiaojian/www/www.bbb.com/;</div><div class="line">          index  index.html index.htm;</div><div class="line">      &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">### www.ccc.com</div><div class="line">  server &#123;</div><div class="line">      charset utf-8;</div><div class="line"></div><div class="line">      listen       80;</div><div class="line">      server_name  www.ccc.com;</div><div class="line"></div><div class="line">      location / &#123;</div><div class="line">          root   /Users/baixiaojian/www/www.ccc.com/;</div><div class="line">          index  index.html index.htm;</div><div class="line">      &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>这样3个很精简的虚拟域名就搭建好了。<br>重启下nginx，然后打开浏览器访问一下这3个域名，就能看到对应的域名内容了。</p>
<h3 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h3><p><strong>Nginx 使用反向代理，主要是使用location模块下的 <code>proxy_pass</code> 选项。</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">来个最简单的。</div><div class="line">当我访问 mac 上的nginx 的 centos.com 的内容时候,</div><div class="line">就反向代理到虚拟机centos上的 10.211.55.5 的index.html页面。</div></pre></td></tr></table></figure>
<p>第一步: 在 hosts 里新加域名:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">#vi /etc/hosts</div><div class="line">127.0.0.1 centos.com</div></pre></td></tr></table></figure>
<p>第二步: 在 servers 目录中新建一个 .conf 的配置文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">#centos.conf</div><div class="line">server &#123;</div><div class="line">    listen 80;</div><div class="line">    server_name centos.com;</div><div class="line"></div><div class="line">    location / &#123;</div><div class="line">        proxy_pass http://10.211.55.5;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>执行 <code>sudo nginx -s reload</code> 重启后访问 <code>centos.com</code></p>
<h3 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h3><p>啥是负载均衡 ?<br>比如我们有一个小网站，刚开始就一台nginx服务器，<br>后来，随着业务量增大，用户增多，一台服务器已经不够用了，<br>我们就又多加了几台服务器。那么这几台服务器 <code>如何调度</code> ？<code>如何均匀提供访问</code> ？<br>这就是负载均衡。</p>
<p><strong>负载均衡的好处是可以集群多台机器一起工作，并且对外的IP和域名是一样的，外界看起来就好像一台机器一样。</strong></p>
<h4 id="基于-weight-权重的负载"><a href="#基于-weight-权重的负载" class="headerlink" title="基于 weight 权重的负载"></a>基于 weight 权重的负载</h4><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">upstream webservers&#123;</div><div class="line">    server 192.168.33.11 weight=10;</div><div class="line">    server 192.168.33.12 weight=10;</div><div class="line">    server 192.168.33.13 weight=10;</div><div class="line">&#125;</div><div class="line"></div><div class="line">server &#123;</div><div class="line">    listen 80;</div><div class="line">    server_name upstream.com;</div><div class="line"></div><div class="line">    location / &#123;</div><div class="line">        proxy_pass http://webservers;</div><div class="line">        proxy_set_header  X-Real-IP  $remote_addr;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="基于-ip-hash-的负载"><a href="#基于-ip-hash-的负载" class="headerlink" title="基于 ip_hash 的负载"></a>基于 ip_hash 的负载</h4><p><strong>每个请求按访问IP的hash结果分配</strong>，这样来自同一个IP的访客固定访问一个后端服务器，有效解决了动态网页存在的session共享问题。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">upstream webservers&#123;</div><div class="line">    ip_hash;</div><div class="line">    server 192.168.33.11 weight=1 max_fails=2 fail_timeout=30s;</div><div class="line">    server 192.168.33.12 weight=1 max_fails=2 fail_timeout=30s;</div><div class="line">    server 192.168.33.13 down;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注: ip_hash 模式下，不要设置 <code>weight</code> 和 <code>backup</code></p>
<h3 id="页面缓存"><a href="#页面缓存" class="headerlink" title="页面缓存"></a>页面缓存</h3><p>只需要简单配置下，就能将指定的一个页面缓存起来.<br>原理就是<code>匹配当前访问的url, hash加密后，去指定的缓存目录查找</code>, 有的话就说明匹配到缓存.</p>
<p><strong>先来看一下一个简单的页面缓存的配置：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">http &#123;</div><div class="line">    proxy_cache_path /data/nginx/cache levels=1:2 keys_zone=cache_zone:10m inactive=1d max_size=100m;</div><div class="line">    # proxy_cache_path path [levels=number] keys_zone=zone_name:zone_size [inactive=time] [max_size=size];</div><div class="line">                                                    # path        =&gt; 缓存路径</div><div class="line">                                                    # levels      =&gt; 文件夹级数</div><div class="line">                                                    # keys_zone   =&gt; 指的是共享池的名称</div><div class="line">                                                    # inactive    =&gt; 表示指定的时间内缓存的数据没有被请求则被删除</div><div class="line">                                                    # max_size    =&gt; 缓存区域的总大小</div><div class="line">                                                    # clean_time  =&gt; 表示每间隔自动清除的时间</div><div class="line">    upstream myproject &#123;</div><div class="line">        .....</div><div class="line">    &#125;</div><div class="line">    server  &#123;</div><div class="line">        ....</div><div class="line">        location ~ *\.php$ &#123;</div><div class="line">            proxy_cache cache_zone;                 # keys_zone的名字</div><div class="line">            proxy_cache_key $host$uri$is_args$args; # 缓存规则</div><div class="line">            proxy_cache_valid any 1d;               # 为不同的http响应状态码设置不同的缓存时间。</div><div class="line">            proxy_pass http://127.0.0.1:8080;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    ....</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>开始进行实战</strong></p>
<p>第一步: Parallels Desktop 上启动一台 linux 虚拟机(10.211.55.5)</p>
<p>第二部: Mac hosts配置 <code>cache.com</code> 域名, 然后按照上面的配置在 servers 下新建一个 <code>cache.conf</code> 文件:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">proxy_cache_path /usr/local/var/cache levels=1:2 keys_zone=cache_zone:10m inactive=1d max_size=100m;</div><div class="line">server  &#123;</div><div class="line">    listen 80;</div><div class="line">    server_name cache.com;</div><div class="line"></div><div class="line">    add_header X-Via $server_addr;</div><div class="line">    add_header X-Cache $upstream_cache_status;</div><div class="line"></div><div class="line">    location / &#123;</div><div class="line">        proxy_set_header  X-Real-IP  $remote_addr;</div><div class="line">        proxy_cache cache_zone;</div><div class="line">        proxy_cache_key $host$uri$is_args$args;</div><div class="line">        proxy_cache_valid 200 304 1m;</div><div class="line">        proxy_pass http://10.211.55.5;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>访问 <code>cache.com</code> 查看 <code>network</code> 网络请求选项，我们可以看到，Response Headers，在这里我们可以看到：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">X-Cache: MISS</div><div class="line">X-Via:  127.0.0.1</div></pre></td></tr></table></figure>
<p>X-cache 为 MISS 表示未命中，请求被传送到后端。<br>因为是第一次访问，没有缓存，所以肯定是未命中。<br>我们再刷新下，就发现其变成了HIT, 表示命中。</p>
<p>X-cache 的其他几种状态：</p>
<table>
<thead>
<tr>
<th>状态</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>MISS</td>
<td>未命中，请求被传送到后端</td>
</tr>
<tr>
<td>HIT</td>
<td>缓存命中</td>
</tr>
<tr>
<td>EXPIRED</td>
<td>缓存已经过期请求被传送到后端</td>
</tr>
<tr>
<td>UPDATING</td>
<td>正在更新缓存，将使用旧的应答</td>
</tr>
<tr>
<td>STALE</td>
<td>后端将得到过期的应答</td>
</tr>
<tr>
<td>BYPASS</td>
<td>缓存被绕过了</td>
</tr>
</tbody>
</table>
<p>我们再去看看缓存文件夹 /usr/local/var/cache里面是否有了文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">cache git:(master) cd a/13</div><div class="line">➜  13 git:(master) ls</div><div class="line">5bd1af99bcb0db45c8bd601d9ee9e13a</div><div class="line">➜  13 git:(master) pwd</div><div class="line">/usr/local/var/cache/a/13</div></pre></td></tr></table></figure>
<p>已经生成了缓存文件。</p>
<p>我们在url 后面随便加一个什么参数，<br>看会不会新生成一个缓存文件夹及文件：<a href="http://cache.com/?w=ww55" rel="external nofollow noopener noreferrer" target="_blank">http://cache.com/?w=ww55</a> 。<br>因为我们使用的生成规则是全部url转换(proxy_cache_key $host$uri$is_args$args;)</p>
<p>查看 X-cache 为 MISS，再刷新 ，变成HIT。<br>缓存文件夹 /usr/local/var/cache 又会多出对应缓存文件.</p>
<h3 id="Location-正则模块"><a href="#Location-正则模块" class="headerlink" title="Location 正则模块"></a>Location 正则模块</h3><p><code>location /</code> 表示匹配访问根目录。<br><code>location ~</code> 表示开启正则匹配。<br>还可以用这个来匹配静态资源，缓存它们，设置过期时间：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">location ~ .*\.(gif|jpg|jpeg|bmp|png|ico|txt|mp3|mp4|swf)&#123;</div><div class="line">    expires 15d;</div><div class="line">&#125;</div><div class="line">location ~ .*\.(css|js)&#123;</div><div class="line">    expires 12d;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<h2 id="配置说明"><a href="#配置说明" class="headerlink" title="配置说明"></a>配置说明</h2><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"># 运行用户</div><div class="line">user www-data;</div><div class="line"># 启动进程,通常设置成和cpu的数量相等</div><div class="line">worker_processes  1;</div><div class="line"></div><div class="line"># 全局错误日志及PID文件</div><div class="line">error_log  /var/log/nginx/error.log;</div><div class="line">pid        /var/run/nginx.pid;</div><div class="line"></div><div class="line"># 工作模式及连接数上限</div><div class="line">events &#123;</div><div class="line">    use epoll; #epoll是多路复用IO(I/O Multiplexing)中的一种方式,但是仅用于linux2.6以上内核,可以大大提高nginx的性能</div><div class="line">    worker_connections 1024; #单个后台worker process进程的最大并发链接数</div><div class="line">    # multi_accept on;</div><div class="line">&#125;</div><div class="line"></div><div class="line">#设定http服务器，利用它的反向代理功能提供负载均衡支持</div><div class="line">http &#123;</div><div class="line">    #设定mime类型,类型由mime.type文件定义</div><div class="line">    include       /etc/nginx/mime.types;</div><div class="line">    default_type  application/octet-stream;</div><div class="line">    #设定日志格式</div><div class="line">    access_log    /var/log/nginx/access.log;</div><div class="line"></div><div class="line">    #sendfile 指令指定 nginx 是否调用 sendfile 函数（zero copy 方式）来输出文件，对于普通应用，</div><div class="line">    #必须设为 on,如果用来进行下载等应用磁盘IO重负载应用，可设置为 off，以平衡磁盘与网络I/O处理速度，降低系统的uptime.</div><div class="line">    sendfile        on;</div><div class="line">    #将tcp_nopush和tcp_nodelay两个指令设置为on用于防止网络阻塞</div><div class="line">    tcp_nopush      on;</div><div class="line">    tcp_nodelay     on;</div><div class="line">    #连接超时时间</div><div class="line">    keepalive_timeout  65;</div><div class="line"></div><div class="line">    #开启gzip压缩</div><div class="line">    gzip  on;</div><div class="line">    gzip_disable &quot;MSIE [1-6]\.(?!.*SV1)&quot;;</div><div class="line"></div><div class="line">    #设定请求缓冲</div><div class="line">    client_header_buffer_size    1k;</div><div class="line">    large_client_header_buffers  4 4k;</div><div class="line"></div><div class="line">    include /etc/nginx/conf.d/*.conf;</div><div class="line">    include /etc/nginx/sites-enabled/*;</div><div class="line"></div><div class="line">    #设定负载均衡的服务器列表</div><div class="line">    upstream mysvr &#123;</div><div class="line">        #weigth参数表示权值，权值越高被分配到的几率越大</div><div class="line">        #本机上的Squid开启3128端口</div><div class="line">        server 192.168.8.1:3128 weight=5;</div><div class="line">        server 192.168.8.2:80  weight=1;</div><div class="line">        server 192.168.8.3:80  weight=6;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    server &#123;</div><div class="line">        #侦听80端口</div><div class="line">        listen       80;</div><div class="line">        #定义使用www.xx.com访问</div><div class="line">        server_name  www.xx.com;</div><div class="line"></div><div class="line">        #设定本虚拟主机的访问日志</div><div class="line">        access_log  logs/www.xx.com.access.log  main;</div><div class="line"></div><div class="line">        #默认请求</div><div class="line">        location / &#123;</div><div class="line">            root   /root;                               #定义服务器的默认网站根目录位置</div><div class="line">            index index.php index.html index.htm;       #定义首页索引文件的名称</div><div class="line"></div><div class="line">            fastcgi_pass  www.xx.com;</div><div class="line">            fastcgi_param  SCRIPT_FILENAME  $document_root/$fastcgi_script_name;</div><div class="line">            include /etc/nginx/fastcgi_params;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        # 定义错误提示页面</div><div class="line">        error_page   500 502 503 504 /50x.html;</div><div class="line">            location = /50x.html &#123;</div><div class="line">            root   /root;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        #静态文件，nginx自己处理</div><div class="line">        location ~ ^/(images|javascript|js|css|flash|media|static)/ &#123;</div><div class="line">            root /var/www/virtual/htdocs;</div><div class="line">            #过期30天，静态文件不怎么更新，过期可以设大一点，如果频繁更新，则可以设置得小一点。</div><div class="line">            expires 30d;</div><div class="line">        &#125;</div><div class="line">        #PHP 脚本请求全部转发到 FastCGI处理. 使用FastCGI默认配置.</div><div class="line">        location ~ \.php$ &#123;</div><div class="line">            root /root;</div><div class="line">            fastcgi_pass 127.0.0.1:9000;</div><div class="line">            fastcgi_index index.php;</div><div class="line">            fastcgi_param SCRIPT_FILENAME /home/www/www$fastcgi_script_name;</div><div class="line">            include fastcgi_params;</div><div class="line">        &#125;</div><div class="line">        #设定查看Nginx状态的地址</div><div class="line">        location /NginxStatus &#123;</div><div class="line">            stub_status            on;</div><div class="line">            access_log              on;</div><div class="line">            auth_basic              &quot;NginxStatus&quot;;</div><div class="line">            auth_basic_user_file  conf/htpasswd;</div><div class="line">        &#125;</div><div class="line">        #禁止访问 .htxxx 文件</div><div class="line">        location ~ /\.ht &#123;</div><div class="line">            deny all;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    #第一个虚拟服务器</div><div class="line">    server &#123;</div><div class="line">        #侦听192.168.8.x的80端口</div><div class="line">        listen       80;</div><div class="line">        server_name  192.168.8.x;</div><div class="line"></div><div class="line">        #对aspx后缀的进行负载均衡请求</div><div class="line">        location ~ .*\.aspx$ &#123;</div><div class="line">            root   /root;#定义服务器的默认网站根目录位置</div><div class="line">            index index.php index.html index.htm;#定义首页索引文件的名称</div><div class="line"></div><div class="line">            proxy_pass  http://mysvr;#请求转向mysvr 定义的服务器列表</div><div class="line"></div><div class="line">            #以下是一些反向代理的配置可删除.</div><div class="line">            proxy_redirect off;</div><div class="line"></div><div class="line">            #后端的Web服务器可以通过X-Forwarded-For获取用户真实IP</div><div class="line">            proxy_set_header Host $host;</div><div class="line">            proxy_set_header X-Real-IP $remote_addr;</div><div class="line">            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</div><div class="line">            client_max_body_size 10m;                                       #允许客户端请求的最大单文件字节数</div><div class="line">            client_body_buffer_size 128k;                                   #缓冲区代理缓冲用户端请求的最大字节数，</div><div class="line">            proxy_connect_timeout 90;                                       #nginx跟后端服务器连接超时时间(代理连接超时)</div><div class="line">            proxy_send_timeout 90;                                          #后端服务器数据回传时间(代理发送超时)</div><div class="line">            proxy_read_timeout 90;                                          #连接成功后，后端服务器响应时间(代理接收超时)</div><div class="line">            proxy_buffer_size 4k;                                           #设置代理服务器（nginx）保存用户头信息的缓冲区大小</div><div class="line">            proxy_buffers 4 32k;                                            #proxy_buffers缓冲区，网页平均在32k以下的话，这样设置</div><div class="line">            proxy_busy_buffers_size 64k;                                    #高负荷下缓冲大小（proxy_buffers*2）</div><div class="line">            proxy_temp_file_write_size 64k;                                 #设定缓存文件夹大小，大于这个值，将从upstream服务器传</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><a href="https://www.jianshu.com/p/bed000e1830b" rel="external nofollow noopener noreferrer" target="_blank">参考资料</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;../imgs/nginx-proxy.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="技术笔记" scheme="http://www.baixiaojian.com/categories/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="笔记" scheme="http://www.baixiaojian.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="mac" scheme="http://www.baixiaojian.com/tags/mac/"/>
    
      <category term="nginx" scheme="http://www.baixiaojian.com/tags/nginx/"/>
    
      <category term="linux" scheme="http://www.baixiaojian.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>mac 环境变量相关及开发相关文件解读</title>
    <link href="http://www.baixiaojian.com/mac%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/"/>
    <id>http://www.baixiaojian.com/mac环境变量/</id>
    <published>2018-02-27T04:36:34.000Z</published>
    <updated>2018-09-29T09:19:59.772Z</updated>
    
    <content type="html"><![CDATA[<h2 id="图解"><a href="#图解" class="headerlink" title="图解"></a>图解</h2><p><img src="../imgs/mac-config.png" alt=""></p>
<a id="more"></a>
<h2 id="环境变量配置"><a href="#环境变量配置" class="headerlink" title="环境变量配置"></a>环境变量配置</h2><p>OS系统的配置文件加载顺序：</p>
<ol>
<li>/etc/profile</li>
<li>/etc/paths</li>
<li>~/.bash_profile</li>
</ol>
<p>/etc/profile、/etc/bashrc 是针对系统所有用户的 <code>全局变量</code>, 如修改需权限,<br><code>~/.bash_profile</code> 是当前 <code>用户级</code> 的环境变量, 所以通常去修改它来设置环境变量.</p>
<p>操作步骤:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">1. 终端输入     vi ~/.bash_profile</div><div class="line">2. 设置        PATH：export PATH=/usr/local/mysql/bin:$PATH</div><div class="line">3. 输入        :wq</div><div class="line">4. 立即生效     source ~/.bash_profile</div><div class="line">5. 查看变量值   echo $PATH</div></pre></td></tr></table></figure>
<p>注: <code>删除环境变量需重启shell才能立即生效</code></p>
<h2 id="开发相关文件"><a href="#开发相关文件" class="headerlink" title="开发相关文件"></a>开发相关文件</h2><ul>
<li>应用程序(Applications)</li>
<li>系统(System)</li>
<li>用户(User)</li>
<li>资料库(Library)</li>
</ul>
<h3 id="隐藏文件夹"><a href="#隐藏文件夹" class="headerlink" title="隐藏文件夹"></a>隐藏文件夹</h3><table>
<thead>
<tr>
<th>文件夹</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>usr</td>
<td>unix 使用者专用文件夹</td>
</tr>
<tr>
<td>bin</td>
<td>unix 储存<code>基本指令</code></td>
</tr>
<tr>
<td>sbin</td>
<td>unix 储存<code>系统指令</code></td>
</tr>
<tr>
<td>etc</td>
<td><code>系统设定</code> 储存位置</td>
</tr>
<tr>
<td>var</td>
<td><code>频繁改动</code> 置放于此, 如监控、日志等</td>
</tr>
<tr>
<td>tmp</td>
<td>系统暂存档</td>
</tr>
<tr>
<td><code>usr/local</code></td>
<td>本地文件系统配置相关文件</td>
</tr>
<tr>
<td><code>usr/local/etc</code></td>
<td>相关配置文件</td>
</tr>
</tbody>
</table>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><table>
<thead>
<tr>
<th>文件夹</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>/</code></td>
<td>磁盘根目录 也就是 <code>Macintosh HD</code> 目录下</td>
</tr>
<tr>
<td><code>~ 或者 /User/</code></td>
<td>当前用户目录的顶级目录</td>
</tr>
<tr>
<td>/user/Shared</td>
<td>目录可以被本地的所有用户访问</td>
</tr>
<tr>
<td>Sites</td>
<td>用户个人站点网页文件。需设置 “系统预置-&gt;共享-&gt;Web共享” 中打开共享</td>
</tr>
<tr>
<td>Public</td>
<td>可以把需要与其它用户共享的文件放在这个目录中</td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;图解&quot;&gt;&lt;a href=&quot;#图解&quot; class=&quot;headerlink&quot; title=&quot;图解&quot;&gt;&lt;/a&gt;图解&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;../imgs/mac-config.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="技术笔记" scheme="http://www.baixiaojian.com/categories/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="mac" scheme="http://www.baixiaojian.com/tags/mac/"/>
    
      <category term="环境变量" scheme="http://www.baixiaojian.com/tags/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/"/>
    
      <category term="设置" scheme="http://www.baixiaojian.com/tags/%E8%AE%BE%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>vscode</title>
    <link href="http://www.baixiaojian.com/vscode/"/>
    <id>http://www.baixiaojian.com/vscode/</id>
    <published>2018-02-02T06:12:40.000Z</published>
    <updated>2018-02-27T04:26:09.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h1><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><table>
<thead>
<tr>
<th>按键</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>Commend + X</td>
<td>剪切</td>
</tr>
<tr>
<td>Commend + C</td>
<td>复制</td>
</tr>
<tr>
<td>Commend + V</td>
<td>粘贴</td>
</tr>
<tr>
<td>Alt + up/down</td>
<td>移动行上下</td>
</tr>
<tr>
<td>Shift + Alt up/down</td>
<td>在当前行上下复制当前行</td>
</tr>
<tr>
<td>Commend + Enter</td>
<td>在当前行下插入新的一行</td>
</tr>
<tr>
<td>Commend + Shift + Enter</td>
<td>在当前行上插入新的一行</td>
</tr>
<tr>
<td>Commend + Alt + [/]</td>
<td>折叠/展开区域代码</td>
</tr>
<tr>
<td>Ctrl + K/O</td>
<td>前缩进/后缩进</td>
</tr>
<tr>
<td>Commend + /</td>
<td>添加关闭行注释</td>
</tr>
<tr>
<td>Shift + Alt +A</td>
<td>块区域注释</td>
</tr>
</tbody>
</table>
<a id="more"></a>
<h2 id="导航"><a href="#导航" class="headerlink" title="导航"></a>导航</h2><table>
<thead>
<tr>
<th>按键</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>Ctrl + G</td>
<td>跳转行</td>
</tr>
<tr>
<td>Commend + P</td>
<td>跳转文件</td>
</tr>
<tr>
<td>Commend + R</td>
<td>查找方法或标签</td>
</tr>
<tr>
<td>Commend + Shift + M</td>
<td>打开问题展示面板</td>
</tr>
<tr>
<td>F8</td>
<td>跳转到下一个错误或者警告</td>
</tr>
<tr>
<td>Shift + F8</td>
<td>跳转到上一个错误或者警告</td>
</tr>
</tbody>
</table>
<h2 id="查询与替换"><a href="#查询与替换" class="headerlink" title="查询与替换"></a>查询与替换</h2><table>
<thead>
<tr>
<th>按键</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>Commend + F</td>
<td>查询</td>
</tr>
<tr>
<td>Alt + Enter</td>
<td>选中所有查询结果</td>
</tr>
<tr>
<td>F3 / Shift + F3</td>
<td>查询下一个/上一个</td>
</tr>
<tr>
<td>Commend + D</td>
<td>选中下一个相同</td>
</tr>
<tr>
<td>Control + Commend + G / Commend + F2</td>
<td>选中所有相同</td>
</tr>
</tbody>
</table>
<h2 id="多行光标操作于选择"><a href="#多行光标操作于选择" class="headerlink" title="多行光标操作于选择"></a>多行光标操作于选择</h2><table>
<thead>
<tr>
<th>快捷键</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>Commend + Click</td>
<td>多选光标</td>
</tr>
<tr>
<td>Commend + F2</td>
<td>选中所有相同</td>
</tr>
<tr>
<td>Commend + Alt + up/down</td>
<td>上下插入光标</td>
</tr>
<tr>
<td>Commend + Shift + Click</td>
<td>集选光标</td>
</tr>
</tbody>
</table>
<h2 id="丰富的语言操作"><a href="#丰富的语言操作" class="headerlink" title="丰富的语言操作"></a>丰富的语言操作</h2><table>
<thead>
<tr>
<th>快捷键</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>Shift + Alt + F</td>
<td>格式化代码</td>
</tr>
<tr>
<td>Ctrl + R</td>
<td>打开 Git Project 文件夹</td>
</tr>
<tr>
<td>Commend + K + Commend + F</td>
<td>格式化选中部分的代码</td>
</tr>
<tr>
<td>F12</td>
<td>跳转到定义处</td>
</tr>
<tr>
<td>Alt + F12</td>
<td>代码片段显示定义</td>
</tr>
<tr>
<td>Ctrl + K F12</td>
<td>在其他窗口打开定义处</td>
</tr>
<tr>
<td>Shift + F12</td>
<td>显示所有引用</td>
</tr>
<tr>
<td>F2</td>
<td>重命名符号</td>
</tr>
</tbody>
</table>
<h2 id="编辑器管理"><a href="#编辑器管理" class="headerlink" title="编辑器管理"></a>编辑器管理</h2><table>
<thead>
<tr>
<th>快捷键</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>Commend + W</td>
<td>关闭编辑器</td>
</tr>
<tr>
<td>Commend + \</td>
<td></td>
<td>切割编辑窗口</td>
</tr>
<tr>
<td>Commend + Alt &lt;-/-&gt;</td>
<td>切割窗口位置调换</td>
</tr>
</tbody>
</table>
<h2 id="文件管理"><a href="#文件管理" class="headerlink" title="文件管理"></a>文件管理</h2><table>
<thead>
<tr>
<th>快捷键</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>Commend + N</td>
<td>新建文件</td>
</tr>
<tr>
<td>Commend + O</td>
<td>打开文件</td>
</tr>
<tr>
<td>Commend + S</td>
<td>保存文件</td>
</tr>
<tr>
<td>Commend + Alt + S</td>
<td>保存所有文件</td>
</tr>
<tr>
<td>Commend + K Commend + W</td>
<td>关闭所有编辑窗口</td>
</tr>
<tr>
<td>Commend + W</td>
<td>关闭当前编辑窗口</td>
</tr>
<tr>
<td>Commend + Shift + T</td>
<td>撤销最近关闭的一个文件编辑窗口</td>
</tr>
<tr>
<td>Commend + Shift + S</td>
<td>另存为</td>
</tr>
<tr>
<td>Commend + K S</td>
<td>键盘快捷方式指南</td>
</tr>
<tr>
<td>Commend + K P</td>
<td>复制当前打开文件的存放路径</td>
</tr>
<tr>
<td>Commend + K R</td>
<td>打开vscode官方快捷键指南</td>
</tr>
</tbody>
</table>
<h2 id="显示"><a href="#显示" class="headerlink" title="显示"></a>显示</h2><table>
<thead>
<tr>
<th>快捷键</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>Ctrl + Commend + F</td>
<td>切换全屏模式</td>
</tr>
<tr>
<td>Commend + =/-</td>
<td>放大 / 缩小</td>
</tr>
<tr>
<td>Commend + B</td>
<td>侧边栏显示隐藏</td>
</tr>
<tr>
<td>Commend + Shift + E</td>
<td>资源视图和编辑视图的焦点切换</td>
</tr>
<tr>
<td>Commend + Shift + F</td>
<td>打开全局搜索</td>
</tr>
<tr>
<td>Ctrl + Shift + G</td>
<td>打开Git可视管理</td>
</tr>
<tr>
<td>Ctrl + Shift + D</td>
<td>打开DeBug面板</td>
</tr>
<tr>
<td>Ctrl + Shift + X</td>
<td>打开插件市场面板</td>
</tr>
<tr>
<td>Ctrl + Shift + H</td>
<td>在当前文件替换查询替换</td>
</tr>
<tr>
<td>Ctrl + Shift + J</td>
<td>开启详细查询</td>
</tr>
<tr>
<td>Ctrl + Shift + V</td>
<td>预览Markdown文件【编译后】</td>
</tr>
<tr>
<td>Ctrl + K v</td>
<td>在边栏打开渲染后的视图【新建】</td>
</tr>
</tbody>
</table>
<h2 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h2><table>
<thead>
<tr>
<th>快捷键</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>F9</td>
<td>添加解除断点</td>
</tr>
<tr>
<td>F5</td>
<td>启动调试、继续</td>
</tr>
<tr>
<td>F11 / Shift + F11</td>
<td>单步进入/单步跳出</td>
</tr>
<tr>
<td>F10</td>
<td>单步跳过</td>
</tr>
</tbody>
</table>
<h2 id="集成终端"><a href="#集成终端" class="headerlink" title="集成终端"></a>集成终端</h2><table>
<thead>
<tr>
<th>快捷键</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>Commend + `</td>
<td>打开集成终端</td>
</tr>
<tr>
<td>Commend + Shift + `</td>
<td>创建一个新的终端</td>
</tr>
<tr>
<td>Commend + Shift + C</td>
<td>复制所选</td>
</tr>
<tr>
<td>Commend + Shift + V</td>
<td>复制到当前激活的终端</td>
</tr>
</tbody>
</table>
<hr>
<h1 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h1><table>
<thead>
<tr>
<th>插件</th>
<th>功能</th>
</tr>
</thead>
<tbody>
<tr>
<td>Guides</td>
<td>括号高亮</td>
</tr>
<tr>
<td>Beautiful</td>
<td>格式化</td>
</tr>
<tr>
<td>One Monokai Theme</td>
<td>主题不错</td>
</tr>
<tr>
<td>Bookmarks</td>
<td>书签工具</td>
</tr>
<tr>
<td>Path Autocomplete</td>
<td>路径智能补全</td>
</tr>
<tr>
<td>Path Intellisense</td>
<td>路径智能提示</td>
</tr>
<tr>
<td>Code Spell Checker</td>
<td>检查单词拼写</td>
</tr>
<tr>
<td>markdownlint</td>
<td>markdown 语法检测</td>
</tr>
<tr>
<td>expand-region</td>
<td>逐渐选中光标所在内容</td>
</tr>
<tr>
<td>ESLint</td>
<td>可以配置自动格式代码规范</td>
</tr>
<tr>
<td>Output Colorizer</td>
<td>可以终端日志输出着色，实用</td>
</tr>
<tr>
<td>Markdown All in One</td>
<td>自动补全/格式化table/…</td>
</tr>
<tr>
<td>Debugger for Chrome</td>
<td>在vscode调试代码, 屌的一比</td>
</tr>
<tr>
<td>Code Runner</td>
<td>代码编译运行看结果支持多语言</td>
</tr>
<tr>
<td>colorize</td>
<td>会给当前颜色代码该颜色的背景</td>
</tr>
<tr>
<td>Git Project Manager</td>
<td>可以很方便的打开自己的 git 项目</td>
</tr>
<tr>
<td>background</td>
<td>自己敲代码时有一个妹子看的感觉不赖</td>
</tr>
<tr>
<td>Version Lens</td>
<td>可以及时看到package.json内部版本的变动</td>
</tr>
<tr>
<td>Git Lens</td>
<td>可以很方便的查看 git 的各种提交记录及成员间的更改</td>
</tr>
<tr>
<td>Git History</td>
<td>有 Git Lens 没有的功能, 比如查看某一个成员的历史提交</td>
</tr>
</tbody>
</table>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="http://blog.csdn.net/crper/article/details/54099319" rel="external nofollow noopener noreferrer" target="_blank">VS Code折腾记-快捷键</a><br><a href="http://blog.csdn.net/crper/article/details/55509477" rel="external nofollow noopener noreferrer" target="_blank">VS Code折腾记-必备插件</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;快捷键&quot;&gt;&lt;a href=&quot;#快捷键&quot; class=&quot;headerlink&quot; title=&quot;快捷键&quot;&gt;&lt;/a&gt;快捷键&lt;/h1&gt;&lt;h2 id=&quot;基础&quot;&gt;&lt;a href=&quot;#基础&quot; class=&quot;headerlink&quot; title=&quot;基础&quot;&gt;&lt;/a&gt;基础&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;按键&lt;/th&gt;
&lt;th&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Commend + X&lt;/td&gt;
&lt;td&gt;剪切&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Commend + C&lt;/td&gt;
&lt;td&gt;复制&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Commend + V&lt;/td&gt;
&lt;td&gt;粘贴&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Alt + up/down&lt;/td&gt;
&lt;td&gt;移动行上下&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Shift + Alt up/down&lt;/td&gt;
&lt;td&gt;在当前行上下复制当前行&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Commend + Enter&lt;/td&gt;
&lt;td&gt;在当前行下插入新的一行&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Commend + Shift + Enter&lt;/td&gt;
&lt;td&gt;在当前行上插入新的一行&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Commend + Alt + [/]&lt;/td&gt;
&lt;td&gt;折叠/展开区域代码&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ctrl + K/O&lt;/td&gt;
&lt;td&gt;前缩进/后缩进&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Commend + /&lt;/td&gt;
&lt;td&gt;添加关闭行注释&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Shift + Alt +A&lt;/td&gt;
&lt;td&gt;块区域注释&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
    
    </summary>
    
      <category term="技术笔记" scheme="http://www.baixiaojian.com/categories/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="快捷键" scheme="http://www.baixiaojian.com/tags/%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    
      <category term="vscode" scheme="http://www.baixiaojian.com/tags/vscode/"/>
    
      <category term="插件" scheme="http://www.baixiaojian.com/tags/%E6%8F%92%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>mongodb 安装与基本配置</title>
    <link href="http://www.baixiaojian.com/mongodb/"/>
    <id>http://www.baixiaojian.com/mongodb/</id>
    <published>2018-01-26T07:24:36.000Z</published>
    <updated>2018-01-26T09:26:40.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h2><p>brew list<br>brew search mongodb</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>brew install mongodb</p>
<h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><p>首次执行 <code>mongod</code> 尝试启动 MongoDB , 但会失败 exiting:</p>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">➜  ~  mongod</div><div class="line">2018-01-26T15:11:13.278+0800 I CONTROL  [initandlisten] MongoDB starting : pid=8954 port=27017 dbpath=/data/db 64-bit host=baixiaojiandeMacBook-Pro.local</div><div class="line">2018-01-26T15:11:13.278+0800 I CONTROL  [initandlisten] db version v3.6.2</div><div class="line">2018-01-26T15:11:13.278+0800 I CONTROL  [initandlisten] git version: 489d177dbd0f0420a8ca04d39fd78d0a2c539420</div><div class="line">2018-01-26T15:11:13.278+0800 I CONTROL  [initandlisten] OpenSSL version: OpenSSL 1.0.2n  7 Dec 2017</div><div class="line">2018-01-26T15:11:13.278+0800 I CONTROL  [initandlisten] allocator: system</div><div class="line">2018-01-26T15:11:13.278+0800 I CONTROL  [initandlisten] modules: none</div><div class="line">2018-01-26T15:11:13.278+0800 I CONTROL  [initandlisten] build environment:</div><div class="line">2018-01-26T15:11:13.278+0800 I CONTROL  [initandlisten]     distarch: x86_64</div><div class="line">2018-01-26T15:11:13.278+0800 I CONTROL  [initandlisten]     target_arch: x86_64</div><div class="line">2018-01-26T15:11:13.278+0800 I CONTROL  [initandlisten] options: &#123;&#125;</div><div class="line">2018-01-26T15:11:13.279+0800 I STORAGE  [initandlisten] exception in initAndListen: NonExistentPath: Data directory /data/db not found., terminating</div><div class="line">2018-01-26T15:11:13.279+0800 I CONTROL  [initandlisten] now exiting</div><div class="line">2018-01-26T15:11:13.279+0800 I CONTROL  [initandlisten] shutting down with code:100</div></pre></td></tr></table></figure>
<p>启动 MongoDB 之前, 要先新建一个 MongoDB 默认的数据写入目录</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">// sudo 并输入密码，重新新建目录</div><div class="line">$ sudo mkdir -p /data/db</div><div class="line">Password:</div></pre></td></tr></table></figure>
<p>给刚才新建的数据库目录赋予权限:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ sudo chown -R baixiaojian /data</div></pre></td></tr></table></figure>
<p>此时,执行 <code>mongod</code> 启动 MongoDB 服务:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">➜  ~ mongod</div><div class="line">2018-01-26T15:17:54.988+0800 I CONTROL  [initandlisten] MongoDB starting : pid=9551 port=27017 dbpath=/data/db 64-bit host=baixiaojiandeMacBook-Pro.local</div><div class="line">2018-01-26T15:17:54.989+0800 I CONTROL  [initandlisten] db version v3.6.2</div><div class="line">2018-01-26T15:17:54.989+0800 I CONTROL  [initandlisten] git version: 489d177dbd0f0420a8ca04d39fd78d0a2c539420</div><div class="line">2018-01-26T15:17:54.989+0800 I CONTROL  [initandlisten] OpenSSL version: OpenSSL 1.0.2n  7 Dec 2017</div><div class="line">2018-01-26T15:17:54.989+0800 I CONTROL  [initandlisten] allocator: system</div><div class="line">2018-01-26T15:17:54.989+0800 I CONTROL  [initandlisten] modules: none</div><div class="line">2018-01-26T15:17:54.989+0800 I CONTROL  [initandlisten] build environment:</div><div class="line">2018-01-26T15:17:54.989+0800 I CONTROL  [initandlisten]     distarch: x86_64</div><div class="line">2018-01-26T15:17:54.989+0800 I CONTROL  [initandlisten]     target_arch: x86_64</div><div class="line">2018-01-26T15:17:54.989+0800 I CONTROL  [initandlisten] options: &#123;&#125;</div><div class="line">2018-01-26T15:17:54.990+0800 I STORAGE  [initandlisten] wiredtiger_open config: create,cache_size=7680M,session_max=20000,eviction=(threads_min=4,threads_max=4),config_base=false,statistics=(fast),log=(enabled=true,archive=true,path=journal,compressor=snappy),file_manager=(close_idle_time=100000),statistics_log=(wait=0),verbose=(recovery_progress),</div><div class="line">2018-01-26T15:17:55.353+0800 I CONTROL  [initandlisten]</div><div class="line">2018-01-26T15:17:55.353+0800 I CONTROL  [initandlisten] ** WARNING: Access control is not enabled for the database.</div><div class="line">2018-01-26T15:17:55.353+0800 I CONTROL  [initandlisten] **          Read and write access to data and configuration is unrestricted.</div><div class="line">2018-01-26T15:17:55.353+0800 I CONTROL  [initandlisten]</div><div class="line">2018-01-26T15:17:55.353+0800 I CONTROL  [initandlisten] ** WARNING: This server is bound to localhost.</div><div class="line">2018-01-26T15:17:55.353+0800 I CONTROL  [initandlisten] **          Remote systems will be unable to connect to this server.</div><div class="line">2018-01-26T15:17:55.353+0800 I CONTROL  [initandlisten] **          Start the server with --bind_ip &lt;address&gt; to specify which IP</div><div class="line">2018-01-26T15:17:55.353+0800 I CONTROL  [initandlisten] **          addresses it should serve responses from, or with --bind_ip_all to</div><div class="line">2018-01-26T15:17:55.353+0800 I CONTROL  [initandlisten] **          bind to all interfaces. If this behavior is desired, start the</div><div class="line">2018-01-26T15:17:55.353+0800 I CONTROL  [initandlisten] **          server with --bind_ip 127.0.0.1 to disable this warning.</div><div class="line">2018-01-26T15:17:55.353+0800 I CONTROL  [initandlisten]</div><div class="line">2018-01-26T15:17:55.360+0800 I STORAGE  [initandlisten] createCollection: admin.system.version with provided UUID: acffed24-1106-4136-bf4d-d2894c0cb3e3</div><div class="line">2018-01-26T15:17:55.443+0800 I COMMAND  [initandlisten] setting featureCompatibilityVersion to 3.6</div><div class="line">2018-01-26T15:17:55.447+0800 I STORAGE  [initandlisten] createCollection: local.startup_log with generated UUID: 5414b600-b049-49b5-aad7-c20beb480c41</div><div class="line">2018-01-26T15:17:55.551+0800 I FTDC     [initandlisten] Initializing full-time diagnostic data capture with directory &apos;/data/db/diagnostic.data&apos;</div><div class="line">2018-01-26T15:17:55.551+0800 I NETWORK  [initandlisten] waiting for connections on port 27017</div></pre></td></tr></table></figure>
<p>MongoDB 启动成功,等待被连接中…</p>
<h2 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h2><p>新建命令行窗口, 执行 <code>mongo</code> 进入 MongoDB 命令行模式: </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">➜  ~ mongo</div><div class="line">MongoDB shell version v3.6.2</div><div class="line">connecting to: mongodb://127.0.0.1:27017</div><div class="line">MongoDB server version: 3.6.2</div><div class="line">Server has startup warnings:</div><div class="line">2018-01-26T15:17:55.353+0800 I CONTROL  [initandlisten]</div><div class="line">2018-01-26T15:17:55.353+0800 I CONTROL  [initandlisten] ** WARNING: Access control is not enabled for the database.</div><div class="line">2018-01-26T15:17:55.353+0800 I CONTROL  [initandlisten] **          Read and write access to data and configuration is unrestricted.</div><div class="line">2018-01-26T15:17:55.353+0800 I CONTROL  [initandlisten]</div><div class="line">2018-01-26T15:17:55.353+0800 I CONTROL  [initandlisten] ** WARNING: This server is bound to localhost.</div><div class="line">2018-01-26T15:17:55.353+0800 I CONTROL  [initandlisten] **          Remote systems will be unable to connect to this server.</div><div class="line">2018-01-26T15:17:55.353+0800 I CONTROL  [initandlisten] **          Start the server with --bind_ip &lt;address&gt; to specify which IP</div><div class="line">2018-01-26T15:17:55.353+0800 I CONTROL  [initandlisten] **          addresses it should serve responses from, or with --bind_ip_all to</div><div class="line">2018-01-26T15:17:55.353+0800 I CONTROL  [initandlisten] **          bind to all interfaces. If this behavior is desired, start the</div><div class="line">2018-01-26T15:17:55.353+0800 I CONTROL  [initandlisten] **          server with --bind_ip 127.0.0.1 to disable this warning.</div><div class="line">2018-01-26T15:17:55.353+0800 I CONTROL  [initandlisten]</div><div class="line">&gt; 4685*989</div><div class="line">4633465</div><div class="line">&gt;</div></pre></td></tr></table></figure>
<p>连接成功, 然后就可以对数据库进行操作了.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;查看&quot;&gt;&lt;a href=&quot;#查看&quot; class=&quot;headerlink&quot; title=&quot;查看&quot;&gt;&lt;/a&gt;查看&lt;/h2&gt;&lt;p&gt;brew list&lt;br&gt;brew search mongodb&lt;/p&gt;
&lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h2&gt;&lt;p&gt;brew install mongodb&lt;/p&gt;
&lt;h2 id=&quot;启动&quot;&gt;&lt;a href=&quot;#启动&quot; class=&quot;headerlink&quot; title=&quot;启动&quot;&gt;&lt;/a&gt;启动&lt;/h2&gt;&lt;p&gt;首次执行 &lt;code&gt;mongod&lt;/code&gt; 尝试启动 MongoDB , 但会失败 exiting:&lt;/p&gt;
    
    </summary>
    
      <category term="配置相关" scheme="http://www.baixiaojian.com/categories/%E9%85%8D%E7%BD%AE%E7%9B%B8%E5%85%B3/"/>
    
    
      <category term="mongod" scheme="http://www.baixiaojian.com/tags/mongod/"/>
    
      <category term="基本配置" scheme="http://www.baixiaojian.com/tags/%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>busy recently</title>
    <link href="http://www.baixiaojian.com/log-busy/"/>
    <id>http://www.baixiaojian.com/log-busy/</id>
    <published>2018-01-21T15:16:09.000Z</published>
    <updated>2018-09-29T03:42:46.908Z</updated>
    
    <content type="html"><![CDATA[<p>最近有点忙<br>一些想记的笔记<br>想吐的槽<br>都被忙碌的时间搁了浅<br>早九晚九+<br>周末单休+<br>今天也是在夜深人静后挤出的 “闲暇” 时光<br>可能忙碌中才能更好的积累与沉淀吧</p>
<a id="more"></a>
<p>刚有空把书签栏整理一下<br>删掉了许多不在需要或者无效的书签<br>看起来更舒服了</p>
<p><img src="/imgs/bookmarks.png" alt="书签"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近有点忙&lt;br&gt;一些想记的笔记&lt;br&gt;想吐的槽&lt;br&gt;都被忙碌的时间搁了浅&lt;br&gt;早九晚九+&lt;br&gt;周末单休+&lt;br&gt;今天也是在夜深人静后挤出的 “闲暇” 时光&lt;br&gt;可能忙碌中才能更好的积累与沉淀吧&lt;/p&gt;
    
    </summary>
    
      <category term="东拉西扯" scheme="http://www.baixiaojian.com/categories/%E4%B8%9C%E6%8B%89%E8%A5%BF%E6%89%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>2017 LastDay</title>
    <link href="http://www.baixiaojian.com/2017-last-day/"/>
    <id>http://www.baixiaojian.com/2017-last-day/</id>
    <published>2017-12-31T07:08:39.000Z</published>
    <updated>2018-01-26T09:29:07.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="2017年的最后一天"><a href="#2017年的最后一天" class="headerlink" title="2017年的最后一天"></a>2017年的最后一天</h2><p>  时间过得好快，夜幕就要降临，我想我必须要离开,当我正要走时我看到一家…<br>  等等…<br>  这是什么节奏,明明要写年终总结，还是被神曲洗脑带偏了</p>
<h2 id="关于90后的”18岁”"><a href="#关于90后的”18岁”" class="headerlink" title="关于90后的”18岁”"></a>关于90后的”18岁”</h2><p>  昨天朋友圈被许许多多的 “18岁” 要成为成年人的照片刷爆了屏，<br>  90后中最小的成员从明天开始也成为了成年人，开始扛起中国新时代的大旗，<br>  从某种层面上就意味着90后这个群体已 <code>不再年轻</code> 的同时肩上的责任更重了，<br>  相对于80后，90后的时代应该是比较幸运的，更过姿多彩的，<br>  在身处信息爆炸的时代，信息与知识的获取已经变得及其容易，<br>  一些像 “我吃的盐比你走的路都要多” 这样的话，已经变越来越不能证明什么了，<br>  之前在法治栏目看过一个毒贩就是在百度上通过搜索相关资料就可以自己制作出冰毒，<br>  网络是一把双刃剑，让人们生活变的便利的同时，风险和危险也会随之而来,<br>  呃，好像有点扯远了…</p>
<a id="more"></a>
<h2 id="我自己的18岁"><a href="#我自己的18岁" class="headerlink" title="我自己的18岁"></a>我自己的18岁</h2><p>  其实本来没什么的，原本计划今年跨年陪家人吃个饭其他一切照常，<br>  但被刷爆的朋友圈的影响下，自己也不仅多了一些感慨，<br>  18岁啊18岁，这个真是一个花样年华的年纪，我已记不清那时的我在做什么。<br>  但有一点我是确认的，就是去网吧再也不用用别人的身份证了， 哈哈…可能就这点出息了<br>  年龄什么的现在一般都记得不确切， 如果说90后最小的明天就成年了，那么 00-94+18 = 24岁<br>  对，是，没错 我今年已经24岁，24啊24 , <code>&quot;曾经沧海难为水，除去巫山不是云&quot;</code> 突然就想到这句话了<br>  不贴切， 但我实际想说的是，18岁时得我以为 25岁什么的离我很遥远，<br>  现在看来还真是 too young 啊！<br>  现在25都不用24++，只要一个虚岁就到了…</p>
<h2 id="关于-2017-年"><a href="#关于-2017-年" class="headerlink" title="关于 2017 年"></a>关于 2017 年</h2><p>  如果要总结2017年的话我真的要想想</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">提取记忆中</div><div class="line">  一月份...</div><div class="line">  二月份...</div><div class="line">  三月份...</div><div class="line">  四月份...</div><div class="line">  五月份...</div><div class="line">  六月份...</div><div class="line">  七月份...</div><div class="line">  八月份...</div><div class="line">  九月份...</div><div class="line">  十月份...</div><div class="line">  十一月份...</div><div class="line">  十二月份...</div><div class="line">大脑运行内存不足，提取失败!</div></pre></td></tr></table></figure>
<p>  这他喵的尴尬了，身为一个程序员，直接导出 database 效果不是想要的，<br>  要按照关键词提取嘛!</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">提取关键词中</div><div class="line">  加班加班加班...</div><div class="line">  撕逼撕逼撕逼...</div><div class="line">  砍需求砍需求...</div><div class="line">  狗粮狗粮狗粮...</div><div class="line">  bugbugbug...</div><div class="line">  撸撸撸撸撸撸...</div><div class="line">  学习学习学习...</div><div class="line">扎心了老铁,提取成功！</div></pre></td></tr></table></figure>
<p>  这他喵的还是尴尬啊，哎 不管了，虽然2017年有缺憾的地方，但这不就是人生嘛，<br>  某某牛逼闪闪放光芒的某某学家就说过 “没有遗憾，不是人生”<br>  翻译成大白话就是 “你连遗憾有没有你还是人？”</p>
<h3 id="2017关键词"><a href="#2017关键词" class="headerlink" title="2017关键词"></a>2017关键词</h3><p id="border-blue">自己总结2017年关键词的话就是： 学习、沉淀、孤独、坚持、成长</p>

<blockquote>
<p>关键词提取核心观念</p>
</blockquote>
<p>  <code>持续学习</code> =&gt; 不学习就会被淘汰<br>  <code>积累沉淀</code> =&gt; 量变引起质变<br>  <code>选择孤独</code> =&gt; 孤独好似美酒<br>  <code>不懈坚持</code> =&gt; 爱好&gt;环境&gt;毅力<br>  <code>迎接成长</code> =&gt; 只是以上关键词附属品</p>
<p>2017年其实不错、很好、very棒，忙碌而充实，是我想要的。</p>
<h2 id="2018-展望"><a href="#2018-展望" class="headerlink" title="2018 展望"></a>2018 展望</h2><p id="border-blue">其实说展望有点怪怪的，因为明天就是2018了，而明天在说今天就是回顾2017了，哈哈</p>

<p>  哇塞，刚打到2018时有种2008的既视感，<br>  转眼间已过十年，十年啊，<br>  十年之前我不认识你，你不属于我，我们还是一样，陪在一个陌生人左右…<br>  等等…<br>  咋又开始了，由此可见 <code>muisc</code> 的魔力，总是能被它影响</p>
<p>  2017到2018，也就是由 咯咯咯到汪汪汪，而我是属汪汪汪的啊，那么就是我的本命年了啊！<br>  是不是就应该带红绳什么的，光想想就好激动的呢！</p>
<p>  2018年要和2017年一样继续积累与沉淀。</p>
<p>  <img src="/imgs/strive.jpg" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;2017年的最后一天&quot;&gt;&lt;a href=&quot;#2017年的最后一天&quot; class=&quot;headerlink&quot; title=&quot;2017年的最后一天&quot;&gt;&lt;/a&gt;2017年的最后一天&lt;/h2&gt;&lt;p&gt;  时间过得好快，夜幕就要降临，我想我必须要离开,当我正要走时我看到一家…&lt;br&gt;  等等…&lt;br&gt;  这是什么节奏,明明要写年终总结，还是被神曲洗脑带偏了&lt;/p&gt;
&lt;h2 id=&quot;关于90后的”18岁”&quot;&gt;&lt;a href=&quot;#关于90后的”18岁”&quot; class=&quot;headerlink&quot; title=&quot;关于90后的”18岁”&quot;&gt;&lt;/a&gt;关于90后的”18岁”&lt;/h2&gt;&lt;p&gt;  昨天朋友圈被许许多多的 “18岁” 要成为成年人的照片刷爆了屏，&lt;br&gt;  90后中最小的成员从明天开始也成为了成年人，开始扛起中国新时代的大旗，&lt;br&gt;  从某种层面上就意味着90后这个群体已 &lt;code&gt;不再年轻&lt;/code&gt; 的同时肩上的责任更重了，&lt;br&gt;  相对于80后，90后的时代应该是比较幸运的，更过姿多彩的，&lt;br&gt;  在身处信息爆炸的时代，信息与知识的获取已经变得及其容易，&lt;br&gt;  一些像 “我吃的盐比你走的路都要多” 这样的话，已经变越来越不能证明什么了，&lt;br&gt;  之前在法治栏目看过一个毒贩就是在百度上通过搜索相关资料就可以自己制作出冰毒，&lt;br&gt;  网络是一把双刃剑，让人们生活变的便利的同时，风险和危险也会随之而来,&lt;br&gt;  呃，好像有点扯远了…&lt;/p&gt;
    
    </summary>
    
      <category term="东拉西扯" scheme="http://www.baixiaojian.com/categories/%E4%B8%9C%E6%8B%89%E8%A5%BF%E6%89%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>Unix 终端常用命令</title>
    <link href="http://www.baixiaojian.com/unxi/"/>
    <id>http://www.baixiaojian.com/unxi/</id>
    <published>2017-12-04T08:56:04.000Z</published>
    <updated>2018-10-04T14:57:40.709Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Unix-终端命令大全"><a href="#Unix-终端命令大全" class="headerlink" title="Unix 终端命令大全"></a><a href="http://www.jianshu.com/p/3291de46f3ff" rel="external nofollow noopener noreferrer" target="_blank">Unix 终端命令大全</a></h1><h2 id="目录操作"><a href="#目录操作" class="headerlink" title="目录操作"></a>目录操作</h2><table>
<thead>
<tr>
<th>命令名</th>
<th>功能描述</th>
<th>使用举例</th>
</tr>
</thead>
<tbody>
<tr>
<td>mkdir</td>
<td>创建一个目录</td>
<td>mkdir dirname</td>
</tr>
<tr>
<td>rmdir</td>
<td>删除一个目录</td>
<td>rmdir dirname</td>
</tr>
<tr>
<td>mv -f</td>
<td>移动或重命名一个目录</td>
<td>mv -f dir1 dir2</td>
</tr>
<tr>
<td>cd</td>
<td>改变当前目录</td>
<td>cd dirname</td>
</tr>
<tr>
<td>pwd</td>
<td>显示当前目录的路径名</td>
<td>pwd</td>
</tr>
<tr>
<td>ls</td>
<td>显示当前目录的内容</td>
<td>ls -la</td>
</tr>
<tr>
<td>dircmp</td>
<td>比较两个目录的内容</td>
<td>dircmp dir1 dir2</td>
</tr>
<tr>
<td>tree</td>
<td>树状图列出文件目录结构</td>
<td>tree</td>
</tr>
<tr>
<td>echo</td>
<td>显示参数指定的文字</td>
<td>echo hello</td>
</tr>
<tr>
<td>&gt;</td>
<td>表示输出，会覆盖文件原有的内容</td>
<td>echo hello &gt; aa.txt</td>
</tr>
<tr>
<td>&gt;&gt;</td>
<td>表示追加，会将内容追加到已有文件的末尾</td>
<td>echo hello &gt;&gt; aa.txt</td>
</tr>
</tbody>
</table>
<a id="more"></a>
<h2 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h2><table>
<thead>
<tr>
<th>命令名</th>
<th>功能描述</th>
<th>使用举例</th>
</tr>
</thead>
<tbody>
<tr>
<td>cat</td>
<td>显示或连接文件</td>
<td>cat filename</td>
</tr>
<tr>
<td>pg</td>
<td>分页格式化显示文件内容</td>
<td>pg filename</td>
</tr>
<tr>
<td>more</td>
<td>分屏显示文件内容</td>
<td>more filename</td>
</tr>
<tr>
<td>od</td>
<td>显示非文本文件的内容</td>
<td>od -c filename</td>
</tr>
<tr>
<td>cp</td>
<td>复制文件或目录</td>
<td>cp file1 file2</td>
</tr>
<tr>
<td>rm</td>
<td>删除文件或目录</td>
<td>rm filename</td>
</tr>
<tr>
<td>mv</td>
<td>改变文件名或所在目录</td>
<td>mv file1 file2</td>
</tr>
<tr>
<td>ln</td>
<td>联接文件</td>
<td>ln -s file1 file2</td>
</tr>
<tr>
<td>find</td>
<td>使用匹配表达式查找文件</td>
<td>find . -name “*.c” -print</td>
</tr>
<tr>
<td>file</td>
<td>显示文件类型</td>
<td>file filename</td>
</tr>
<tr>
<td>open</td>
<td>使用默认的程序打开文件</td>
<td>open filename</td>
</tr>
</tbody>
</table>
<h2 id="选择文件"><a href="#选择文件" class="headerlink" title="选择文件"></a>选择文件</h2><table>
<thead>
<tr>
<th>命令名</th>
<th>功能描述</th>
<th>使用举例</th>
</tr>
</thead>
<tbody>
<tr>
<td>head</td>
<td>显示文件的最初几行</td>
<td>head -20 filename</td>
</tr>
<tr>
<td>tail</td>
<td>显示文件的最后几行</td>
<td>tail -15 filename</td>
</tr>
<tr>
<td>cut</td>
<td>显示文件每行中的某些域</td>
<td>cut -f1,7 -d: /etc/passwd</td>
</tr>
<tr>
<td>colrm</td>
<td>从标准输入中删除若干列</td>
<td>colrm 8 20 file2</td>
</tr>
<tr>
<td>paste</td>
<td>横向连接文件</td>
<td>paste file1 file2</td>
</tr>
<tr>
<td>diff</td>
<td>比较并显示两个文件的差异</td>
<td>diff file1 file2</td>
</tr>
<tr>
<td>sed</td>
<td>非交互方式流编辑器</td>
<td>sed “s/red/green/g” filename</td>
</tr>
<tr>
<td>grep</td>
<td>在文件中按模式查找</td>
<td>grep “^[a-zA-Z]” filename</td>
</tr>
<tr>
<td>awk</td>
<td>在文件中查找并处理模式</td>
<td>awk ‘{print $1 $1}’ filename</td>
</tr>
<tr>
<td>sort</td>
<td>排序或归并文件</td>
<td>sort -d -f -u file1</td>
</tr>
<tr>
<td>uniq</td>
<td>去掉文件中的重复行</td>
<td>uniq file1 file2</td>
</tr>
<tr>
<td>comm</td>
<td>显示两有序文件的公共和非公共行</td>
<td>comm file1 file2</td>
</tr>
<tr>
<td>wc</td>
<td>统计文件的字符数、词数和行数</td>
<td>wc filename</td>
</tr>
<tr>
<td>nl</td>
<td>给文件加上行号</td>
<td>nl file1 &gt;file2</td>
</tr>
</tbody>
</table>
<h2 id="安全操作"><a href="#安全操作" class="headerlink" title="安全操作"></a>安全操作</h2><table>
<thead>
<tr>
<th>命令名</th>
<th>功能描述</th>
<th>使用举例</th>
</tr>
</thead>
<tbody>
<tr>
<td>passwd</td>
<td>修改用户密码</td>
<td>passwd</td>
</tr>
<tr>
<td>chmod</td>
<td>改变文件或目录的权限</td>
<td>chmod ug+x filename</td>
</tr>
<tr>
<td>umask</td>
<td>定义创建文件的权限掩码</td>
<td>umask 027</td>
</tr>
<tr>
<td>chown</td>
<td>改变文件或目录的属主</td>
<td>chown newowner filename</td>
</tr>
<tr>
<td>chgrp</td>
<td>改变文件或目录的所属组</td>
<td>chgrp staff filename</td>
</tr>
<tr>
<td>xlock</td>
<td>给终端上锁</td>
<td>xlock -remote</td>
</tr>
</tbody>
</table>
<h2 id="编程操作"><a href="#编程操作" class="headerlink" title="编程操作"></a>编程操作</h2><table>
<thead>
<tr>
<th>命令名</th>
<th>功能描述</th>
<th>使用举例</th>
</tr>
</thead>
<tbody>
<tr>
<td>make</td>
<td>维护可执行程序的最新版本</td>
<td>make</td>
</tr>
<tr>
<td>touch</td>
<td>更新文件的访问和修改时间</td>
<td>touch -m 05202400 filename</td>
</tr>
<tr>
<td>dbx</td>
<td>命令行界面调试工具</td>
<td>dbx a.out</td>
</tr>
<tr>
<td>xde</td>
<td>图形用户界面调试工具</td>
<td>xde a.out</td>
</tr>
</tbody>
</table>
<h2 id="进程操作"><a href="#进程操作" class="headerlink" title="进程操作"></a>进程操作</h2><table>
<thead>
<tr>
<th>命令名</th>
<th>功能描述</th>
<th>使用举例</th>
</tr>
</thead>
<tbody>
<tr>
<td>ps</td>
<td>显示进程当前状态</td>
<td>ps u</td>
</tr>
<tr>
<td>kill</td>
<td>终止进程</td>
<td>kill -9 30142</td>
</tr>
<tr>
<td>nice</td>
<td>改变待执行命令的优先级</td>
<td>nice cc -c *.c</td>
</tr>
<tr>
<td>renice</td>
<td>改变已运行进程的优先级</td>
<td>renice +20 32768</td>
</tr>
</tbody>
</table>
<h2 id="时间操作"><a href="#时间操作" class="headerlink" title="时间操作"></a>时间操作</h2><table>
<thead>
<tr>
<th>命令名</th>
<th>功能描述</th>
<th>使用举例</th>
</tr>
</thead>
<tbody>
<tr>
<td>date</td>
<td>显示系统的当前日期和时间</td>
<td>date</td>
</tr>
<tr>
<td>cal</td>
<td>显示日历</td>
<td>cal 8 1996</td>
</tr>
<tr>
<td>time</td>
<td>统计程序的执行时间</td>
<td>time a.out</td>
</tr>
</tbody>
</table>
<h2 id="网络与通信操作"><a href="#网络与通信操作" class="headerlink" title="网络与通信操作"></a>网络与通信操作</h2><table>
<thead>
<tr>
<th>命令名</th>
<th>功能描述</th>
<th>使用举例</th>
</tr>
</thead>
<tbody>
<tr>
<td>telnet</td>
<td>远程登录</td>
<td>telnet hpc.sp.net.edu.cn</td>
</tr>
<tr>
<td>rlogin</td>
<td>远程登录</td>
<td>rlogin hostname -l username</td>
</tr>
<tr>
<td>rsh</td>
<td>在远程主机执行指定命令</td>
<td>rsh f01n03 date</td>
</tr>
<tr>
<td>ftp</td>
<td>在本地主机与远程主机之间传输文件</td>
<td>ftp ftp.sp.net.edu.cn</td>
</tr>
<tr>
<td>rcp</td>
<td>在本地主机与远程主机</td>
<td>之间复制文件 rcp file1 host1:file2</td>
</tr>
<tr>
<td>ping</td>
<td>给一个网络主机发送</td>
<td>回应请求  ping hpc.sp.net.edu.cn</td>
</tr>
<tr>
<td>mail</td>
<td>阅读和发送电子邮件</td>
<td>mail</td>
</tr>
<tr>
<td>write</td>
<td>给另一用户发送报文</td>
<td>write username pts/1</td>
</tr>
<tr>
<td>mesg</td>
<td>允许或拒绝接收报文</td>
<td>mesg n</td>
</tr>
<tr>
<td>ifconfig</td>
<td>查看/配置计算机当前的网卡配置信息</td>
<td>ifconfig</td>
</tr>
</tbody>
</table>
<h2 id="Korn-Shell-命令"><a href="#Korn-Shell-命令" class="headerlink" title="Korn Shell 命令"></a>Korn Shell 命令</h2><table>
<thead>
<tr>
<th>命令名</th>
<th>功能描述</th>
<th>使用举例</th>
</tr>
</thead>
<tbody>
<tr>
<td>history</td>
<td>列出最近执行过的几条命令及编号</td>
<td>history</td>
</tr>
<tr>
<td>r</td>
<td>重复执行最近执行过的某条命令</td>
<td>r -2</td>
</tr>
<tr>
<td>alias</td>
<td>给某个命令定义别名</td>
<td>alias del=rm -i</td>
</tr>
<tr>
<td>unalias</td>
<td>取消对某个别名的定义</td>
<td>unalias del</td>
</tr>
</tbody>
</table>
<h2 id="其它命令"><a href="#其它命令" class="headerlink" title="其它命令"></a>其它命令</h2><table>
<thead>
<tr>
<th>命令名</th>
<th>功能描述</th>
<th>使用举例</th>
</tr>
</thead>
<tbody>
<tr>
<td>uname</td>
<td>显示操作系统的有关信息</td>
<td>uname -a</td>
</tr>
<tr>
<td>clear</td>
<td>清除屏幕或窗口内容</td>
<td>clear</td>
</tr>
<tr>
<td>env</td>
<td>显示当前所有设置过的环境变量</td>
<td>env</td>
</tr>
<tr>
<td>who</td>
<td>列出当前登录的所有用户</td>
<td>who</td>
</tr>
<tr>
<td>whoami</td>
<td>显示当前正进行操作的用户名</td>
<td>whoami</td>
</tr>
<tr>
<td>tty</td>
<td>显示终端或伪终端的名称</td>
<td>tty</td>
</tr>
<tr>
<td>stty</td>
<td>显示或重置控制键定义</td>
<td>stty -a</td>
</tr>
<tr>
<td>du</td>
<td>查询磁盘使用情况</td>
<td>du -k subdir</td>
</tr>
<tr>
<td>df</td>
<td>显示文件系统的总空间和可用空间</td>
<td>df /tmp</td>
</tr>
<tr>
<td>w</td>
<td>显示当前系统活动的总信息</td>
<td>w</td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Unix-终端命令大全&quot;&gt;&lt;a href=&quot;#Unix-终端命令大全&quot; class=&quot;headerlink&quot; title=&quot;Unix 终端命令大全&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://www.jianshu.com/p/3291de46f3ff&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;Unix 终端命令大全&lt;/a&gt;&lt;/h1&gt;&lt;h2 id=&quot;目录操作&quot;&gt;&lt;a href=&quot;#目录操作&quot; class=&quot;headerlink&quot; title=&quot;目录操作&quot;&gt;&lt;/a&gt;目录操作&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;命令名&lt;/th&gt;
&lt;th&gt;功能描述&lt;/th&gt;
&lt;th&gt;使用举例&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;mkdir&lt;/td&gt;
&lt;td&gt;创建一个目录&lt;/td&gt;
&lt;td&gt;mkdir dirname&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;rmdir&lt;/td&gt;
&lt;td&gt;删除一个目录&lt;/td&gt;
&lt;td&gt;rmdir dirname&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;mv -f&lt;/td&gt;
&lt;td&gt;移动或重命名一个目录&lt;/td&gt;
&lt;td&gt;mv -f dir1 dir2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;cd&lt;/td&gt;
&lt;td&gt;改变当前目录&lt;/td&gt;
&lt;td&gt;cd dirname&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;pwd&lt;/td&gt;
&lt;td&gt;显示当前目录的路径名&lt;/td&gt;
&lt;td&gt;pwd&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ls&lt;/td&gt;
&lt;td&gt;显示当前目录的内容&lt;/td&gt;
&lt;td&gt;ls -la&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;dircmp&lt;/td&gt;
&lt;td&gt;比较两个目录的内容&lt;/td&gt;
&lt;td&gt;dircmp dir1 dir2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;tree&lt;/td&gt;
&lt;td&gt;树状图列出文件目录结构&lt;/td&gt;
&lt;td&gt;tree&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;echo&lt;/td&gt;
&lt;td&gt;显示参数指定的文字&lt;/td&gt;
&lt;td&gt;echo hello&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;gt;&lt;/td&gt;
&lt;td&gt;表示输出，会覆盖文件原有的内容&lt;/td&gt;
&lt;td&gt;echo hello &amp;gt; aa.txt&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;gt;&amp;gt;&lt;/td&gt;
&lt;td&gt;表示追加，会将内容追加到已有文件的末尾&lt;/td&gt;
&lt;td&gt;echo hello &amp;gt;&amp;gt; aa.txt&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
    
    </summary>
    
      <category term="快捷操作" scheme="http://www.baixiaojian.com/categories/%E5%BF%AB%E6%8D%B7%E6%93%8D%E4%BD%9C/"/>
    
    
      <category term="笔记" scheme="http://www.baixiaojian.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="命令" scheme="http://www.baixiaojian.com/tags/%E5%91%BD%E4%BB%A4/"/>
    
      <category term="Unix" scheme="http://www.baixiaojian.com/tags/Unix/"/>
    
      <category term="终端" scheme="http://www.baixiaojian.com/tags/%E7%BB%88%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>vim 基本操作</title>
    <link href="http://www.baixiaojian.com/vim/"/>
    <id>http://www.baixiaojian.com/vim/</id>
    <published>2017-12-04T08:04:02.000Z</published>
    <updated>2018-10-12T06:24:45.558Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ws3.sinaimg.cn/large/006tNbRwly1fvwm4j345og30sg0k40w3.gif" alt=""></p>
<a id="more"></a>
<h2 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h2><ul>
<li><code>p</code> 在当前位置 <strong>之后</strong> 粘贴</li>
<li><code>P</code> 在当前位置 <strong>之前</strong> 粘贴</li>
<li><code>yy</code> 拷贝当前行，相当于 ddP</li>
<li><code>x</code> 删除当前光标所在的字符</li>
<li><code>dd</code> 剪贴当前行</li>
</ul>
<h2 id="插入模式"><a href="#插入模式" class="headerlink" title="插入模式"></a>插入模式</h2><ul>
<li><code>a</code> 在光标后插入</li>
<li><code>O</code> 在当前 <strong>行前插入</strong> 一个新行</li>
<li><code>o</code> 在当前 <strong>行后插入</strong> 一个新行</li>
<li><code>cw</code> 替换从光标所在位置后到一个单词结尾的字符</li>
</ul>
<h2 id="移动光标"><a href="#移动光标" class="headerlink" title="移动光标"></a>移动光标</h2><ul>
<li><code>^</code> 到本首</li>
<li><code>g_</code> 到本尾</li>
<li><code>0</code> 到行头</li>
<li><code>$</code> 到行末</li>
<li><code>w b</code> 词移动</li>
<li><code>gg</code> 文件开头</li>
<li><code>G</code> 文件结尾</li>
<li><code>h/j/k/l</code> 左/下/上/右</li>
</ul>
<h2 id="撤销-重做"><a href="#撤销-重做" class="headerlink" title="撤销/重做"></a>撤销/重做</h2><ul>
<li><code>u</code> undo</li>
<li><code>&lt;Ctrl+r&gt;</code> redo</li>
</ul>
<h2 id="退出方式"><a href="#退出方式" class="headerlink" title="退出方式"></a>退出方式</h2><ul>
<li><code>:e</code> <path to="" file=""></path> 打开一个文件</li>
<li><code>:w</code> 存盘</li>
<li><code>:saveas</code> <path to="" file=""></path> 另存为 <path to="" file=""></path></li>
<li><code>:x</code>, ZZ 或 :wq 保存并退出</li>
<li><code>:q!</code> 退出不保存</li>
<li><code>:qa!</code> 强行退出所有文件。</li>
<li><code>:bn</code> 和 :bp 你可以同时打开很多文件，使用这两个命令来切换下一个或上一个文件。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://ws3.sinaimg.cn/large/006tNbRwly1fvwm4j345og30sg0k40w3.gif&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="快捷操作" scheme="http://www.baixiaojian.com/categories/%E5%BF%AB%E6%8D%B7%E6%93%8D%E4%BD%9C/"/>
    
    
      <category term="笔记" scheme="http://www.baixiaojian.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="vim" scheme="http://www.baixiaojian.com/tags/vim/"/>
    
      <category term="基本操作" scheme="http://www.baixiaojian.com/tags/%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>git 笔记</title>
    <link href="http://www.baixiaojian.com/git/"/>
    <id>http://www.baixiaojian.com/git/</id>
    <published>2017-11-29T12:46:11.000Z</published>
    <updated>2018-10-04T16:36:00.006Z</updated>
    
    <content type="html"><![CDATA[<h2 id="回退相关操作"><a href="#回退相关操作" class="headerlink" title="回退相关操作"></a>回退相关操作</h2><h3 id="工作区"><a href="#工作区" class="headerlink" title="工作区"></a>工作区</h3><table>
<thead>
<tr>
<th>命令</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>git checkout – <code>file.txt</code></td>
<td>丢弃 file.txt 中的修改</td>
</tr>
<tr>
<td>git reset –hard</td>
<td>重设暂存区所有文件并且还原工作区所有修改</td>
</tr>
</tbody>
</table>
<h3 id="暂存区"><a href="#暂存区" class="headerlink" title="暂存区"></a>暂存区</h3><table>
<thead>
<tr>
<th>命令</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>git reset</td>
<td>重设暂存区所有文件</td>
</tr>
<tr>
<td>git reset HEAD</td>
<td>撤销最新一次的 add 状态</td>
</tr>
<tr>
<td>git reset <code>file.txt</code></td>
<td>把 <code>file.txt</code> 的放入工作区</td>
</tr>
<tr>
<td>git reset –hard</td>
<td>重设暂存区所有文件并且还原工作区所有修改</td>
</tr>
</tbody>
</table>
<a id="more"></a>
<h3 id="版本区"><a href="#版本区" class="headerlink" title="版本区"></a>版本区</h3><ul>
<li>HEAD =&gt; 当前版本</li>
<li>HEAD^ =&gt; 上一个版本</li>
<li>HEAD^^ =&gt; 上上一个版本</li>
<li>HEAD~100 =&gt; 上一100个版本</li>
</ul>
<table>
<thead>
<tr>
<th>命令</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>git revert HEAD</td>
<td>撤销最新一次的 commit ,分支没有改动文件才能执行(存在该commit记录)</td>
</tr>
<tr>
<td>git reset <code>&lt;commit&gt;</code></td>
<td>删除最新一次的 commit 并且重设暂存区所有文件 (不存在该commit版本号)</td>
</tr>
<tr>
<td>git reset HEAD~2</td>
<td>将当前分支倒退两个提交(高危操作)</td>
</tr>
<tr>
<td>git reset –hard HEAD^</td>
<td>回退上一个版本</td>
</tr>
</tbody>
</table>
<h3 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h3><table>
<thead>
<tr>
<th>命令</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>rm <code>file.txt</code></td>
<td>删除文件</td>
</tr>
<tr>
<td>git checkout – <code>file.txt</code></td>
<td>撤销删除 (未commit之前)</td>
</tr>
<tr>
<td>git clean -n</td>
<td>查看那些未被跟踪文件会被移除</td>
</tr>
<tr>
<td>git clean -f</td>
<td>移除当前目录下未被跟踪的文件</td>
</tr>
<tr>
<td>git clean -df</td>
<td>移除未跟踪的文件以及目录</td>
</tr>
<tr>
<td>git clean -f <code>&lt;path&gt;</code></td>
<td>移除未跟踪的文件，但限制在某个路径下</td>
</tr>
<tr>
<td>git clean -xf</td>
<td>移除当前目录下未跟踪的文件，以及 Git 一般忽略的文件</td>
</tr>
</tbody>
</table>
<h2 id="创建与合并分支"><a href="#创建与合并分支" class="headerlink" title="创建与合并分支"></a>创建与合并分支</h2><table>
<thead>
<tr>
<th>命令</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>git checkout -b <code>dev</code></td>
<td>创建并且切换到dev分支</td>
</tr>
<tr>
<td>git checkout -b <code>hotfix</code> dev</td>
<td>基于dev分支创建一个hotfix分支</td>
</tr>
<tr>
<td>git checkout <code>dev</code></td>
<td>切换到dev分支</td>
</tr>
<tr>
<td>git branch</td>
<td>查看所有的分支</td>
</tr>
<tr>
<td>git branch -d <code>dev</code></td>
<td>删除dev分支(当前分支无法自行删除)</td>
</tr>
<tr>
<td>git branch -D <code>dev</code></td>
<td>强制删除分支(用于未合并分支)</td>
</tr>
<tr>
<td>git merge <code>dev</code></td>
<td>将dev分支合并到当前分支</td>
</tr>
</tbody>
</table>
<h2 id="远程仓库的操作"><a href="#远程仓库的操作" class="headerlink" title="远程仓库的操作"></a>远程仓库的操作</h2><table>
<thead>
<tr>
<th>命令</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>git remote -v</td>
<td>查看远程仓库的详细信息</td>
</tr>
<tr>
<td>git remote add <code>remote-name</code> <code>URL</code></td>
<td>添加远程仓库</td>
</tr>
<tr>
<td>git push <code>origin</code> <code>master</code></td>
<td>将内容提交到远程仓库 origin 的 master 分支上</td>
</tr>
<tr>
<td>git remote rm <code>origin</code></td>
<td>将远程仓库 origin 删除</td>
</tr>
<tr>
<td>git remote rename <code>origin</code> <code>pb</code></td>
<td>将远程仓库 origin 改为 pb</td>
</tr>
<tr>
<td>git clone <code>URL</code></td>
<td>克隆一个远程仓库，这里的URL是远程仓库的地址</td>
</tr>
<tr>
<td>git pull origin</td>
<td>将远程仓库中更新的数据拉到本地</td>
</tr>
<tr>
<td>git pull origin dev</td>
<td>拉取远程仓库dev分支到本地</td>
</tr>
<tr>
<td>git push origin aaa</td>
<td>将 aaa 分支推送到远程仓库</td>
</tr>
<tr>
<td>git pull –rebase <code>URL</code></td>
<td>git rebase 代替 git merge 合并本地分支</td>
</tr>
<tr>
<td>git push –force</td>
<td>强制推送</td>
</tr>
</tbody>
</table>
<h2 id="git-commit"><a href="#git-commit" class="headerlink" title="git commit"></a>git commit</h2><table>
<thead>
<tr>
<th>命令</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>git commit –amend</td>
<td>和上一次 commit 合并,并在该基础上编辑commit信息</td>
</tr>
<tr>
<td>git commit –amend –no-edit</td>
<td>和上一次 commit 合并, 不编辑信息</td>
</tr>
<tr>
<td>git commit -a -m “some modified”</td>
<td>git add -A &amp;&amp; git commit -m ‘some modified’</td>
</tr>
</tbody>
</table>
<h2 id="git-rebase"><a href="#git-rebase" class="headerlink" title="git rebase"></a>git rebase</h2><blockquote>
<p><code>&lt;base&gt;</code> 是可以使任何类型的提交引用（ID/分支名/标签/HEAD）</p>
</blockquote>
<p><a href="https://github.com/geeeeeeeeek/git-recipes/wiki/5.1-%E4%BB%A3%E7%A0%81%E5%90%88%E5%B9%B6%EF%BC%9AMerge%E3%80%81Rebase-%E7%9A%84%E9%80%89%E6%8B%A9" rel="external nofollow noopener noreferrer" target="_blank">参考文档1</a></p>
<p><a href="https://git-scm.com/book/zh/v2/Git-%E5%88%86%E6%94%AF-%E5%8F%98%E5%9F%BA" rel="external nofollow noopener noreferrer" target="_blank">参考文档2</a></p>
<ul>
<li>什么是 git rebase(变基==改变基线)<ul>
<li>变基是将分支移到一个新的基提交的过程, 产生的是一个快速向前的合并以及完美的线性历史</li>
<li>rebase 就好像是说「我想将我的更改建立在其他人的进展之上」</li>
<li>绝不要在公共的分支上使用它</li>
</ul>
</li>
</ul>
<ul>
<li>git rebase <code>&lt;base&gt;</code> =&gt; git merge <code>&lt;base&gt;</code> 相似</li>
<li>git rebase –continue =&gt; 解决冲突后可执行的命令</li>
<li>git rebase –abort =&gt; 终止rebase的行动，并且所在分支会回到rebase开始前的状态。</li>
<li>git rebase -i <code>&lt;base&gt;</code> =&gt; 交互式<ul>
<li>fixup</li>
<li>startq</li>
<li>squash</li>
</ul>
</li>
</ul>
<h2 id="git-reflog"><a href="#git-reflog" class="headerlink" title="git reflog"></a>git reflog</h2><blockquote>
<p>Git 用引用日志这种机制来记录分支顶端的更新</p>
</blockquote>
<ul>
<li>git reflog =&gt; 显示本地仓库的引用日志</li>
<li>git reflog –relative-date =&gt; 用相对的日期显示引用日志</li>
<li>git reset –hard <code>0254ea7</code> 配合使用</li>
</ul>
<p>注: <em>引用日志提供的安全网只对提交到本地仓库的更改有效，而且只有移动操作会被记录</em></p>
<h2 id="其他操作"><a href="#其他操作" class="headerlink" title="其他操作"></a>其他操作</h2><ul>
<li>git log –oneline =&gt; 简洁的显示 log 记录</li>
</ul>
<h2 id="报错处理"><a href="#报错处理" class="headerlink" title="报错处理"></a>报错处理</h2><ul>
<li><a href="http://stackoverflow.com/questions/9282632/git-index-lock-file-exists-when-i-try-to-commit-but-cannot-delete-the-file" rel="external nofollow noopener noreferrer" target="_blank">fatal: Unable to create ‘project_path/.git/index.lock’: File exists.</a><ul>
<li>删除该分支  =&gt;  <code>rm -f .git/index.lock</code></li>
</ul>
</li>
<li>error: failed to push some refs to <code>&lt;URL&gt;</code><ul>
<li>第一种解决方式:<ul>
<li>强推，即利用强覆盖方式用你本地的代码替代git仓库内的内容 =&gt; <code>git push -f</code></li>
</ul>
</li>
<li>第二种解决方式:<ul>
<li>这条命令等于合并远程分支，合并完成之后同目录会出现README.md目录 =&gt; git pull –rebase origin master</li>
</ul>
</li>
</ul>
</li>
<li>fatal: remote origin already exists<ul>
<li>先删除远程 Git 仓库 =&gt; git remote rm origin</li>
<li>再添加远程 Git 仓库 =&gt; git remote add origin <code>&lt;URL&gt;</code><ul>
<li>如果执行 git remote rm origin 还报错的话</li>
<li>我们可以手动修改 gitconfig 文件的内容 =&gt; vi .git/config</li>
<li>把 [remote “origin”] 那一行删掉就好了。</li>
</ul>
</li>
</ul>
</li>
<li>error: src refspec master does not match any<ul>
<li>引起该错误的原因是，目录中没有文件，空目录是不能提交上去的</li>
<li>touch README =&gt; git add README =&gt; git commit -m ‘first commit’ =&gt; git push origin maste</li>
</ul>
</li>
<li>用 <code>git reset --hard</code> 命令导致目录下所有文件全部被清除。<ul>
<li>首先用 <code>git reflog</code> 命令查找到对应的sha值,如：cd7b575</li>
<li>通过“git reset –hard  cd7b575”<ul>
<li>注意：第二步操作有时会报错, 如: fatal: Unable to create ‘D:/chenjunjun/.git/index.lock’: File exists.</li>
<li>需要手动删除.git目录下的index.lock文件</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;回退相关操作&quot;&gt;&lt;a href=&quot;#回退相关操作&quot; class=&quot;headerlink&quot; title=&quot;回退相关操作&quot;&gt;&lt;/a&gt;回退相关操作&lt;/h2&gt;&lt;h3 id=&quot;工作区&quot;&gt;&lt;a href=&quot;#工作区&quot; class=&quot;headerlink&quot; title=&quot;工作区&quot;&gt;&lt;/a&gt;工作区&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;命令&lt;/th&gt;
&lt;th&gt;含义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;git checkout – &lt;code&gt;file.txt&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;丢弃 file.txt 中的修改&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;git reset –hard&lt;/td&gt;
&lt;td&gt;重设暂存区所有文件并且还原工作区所有修改&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&quot;暂存区&quot;&gt;&lt;a href=&quot;#暂存区&quot; class=&quot;headerlink&quot; title=&quot;暂存区&quot;&gt;&lt;/a&gt;暂存区&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;命令&lt;/th&gt;
&lt;th&gt;含义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;git reset&lt;/td&gt;
&lt;td&gt;重设暂存区所有文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;git reset HEAD&lt;/td&gt;
&lt;td&gt;撤销最新一次的 add 状态&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;git reset &lt;code&gt;file.txt&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;把 &lt;code&gt;file.txt&lt;/code&gt; 的放入工作区&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;git reset –hard&lt;/td&gt;
&lt;td&gt;重设暂存区所有文件并且还原工作区所有修改&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
    
    </summary>
    
      <category term="技术笔记" scheme="http://www.baixiaojian.com/categories/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="git" scheme="http://www.baixiaojian.com/tags/git/"/>
    
      <category term="命令" scheme="http://www.baixiaojian.com/tags/%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>FEDAY3 笔记</title>
    <link href="http://www.baixiaojian.com/FEDAY3/"/>
    <id>http://www.baixiaojian.com/FEDAY3/</id>
    <published>2017-09-09T02:19:57.000Z</published>
    <updated>2018-09-29T04:01:47.594Z</updated>
    
    <content type="html"><![CDATA[<h2 id="构建大型应用"><a href="#构建大型应用" class="headerlink" title="构建大型应用"></a>构建大型应用</h2><p>分享人：孟红伦(钉钉)</p>
<h3 id="重要的俩块"><a href="#重要的俩块" class="headerlink" title="重要的俩块"></a>重要的俩块</h3><ul>
<li>使用 <code>TypeScript</code> 解决代码 <code>复杂</code> ,数据模型的问题</li>
<li>使用 <code>RxJS</code> 更好的解决 <code>异步</code> 带来的问题</li>
</ul>
<h3 id="代码如何复杂"><a href="#代码如何复杂" class="headerlink" title="代码如何复杂"></a>代码如何复杂</h3><ul>
<li>上百个 RPC 接口</li>
<li>几十种消息推送</li>
<li>10W + 行代码</li>
<li>模块依赖关系复杂</li>
<li>数据模型复杂</li>
</ul>
<h3 id="钉钉犯过的错"><a href="#钉钉犯过的错" class="headerlink" title="钉钉犯过的错"></a>钉钉犯过的错</h3><ul>
<li>开发时没有考虑到个人用户登录时的 ‘org’ 字段</li>
<li>因为开发环境中是 <code>归属某个企业</code> 的,忽视了对 <code>不归属任何企业的个人用户</code>的测试</li>
<li>最后还是用户主动反映了这个问题</li>
<li>问题责任:测试的锅</li>
</ul>
<a id="more"></a>
<h3 id="什么是-Typescript"><a href="#什么是-Typescript" class="headerlink" title="什么是 Typescript"></a>什么是 Typescript</h3><ul>
<li>它是 JS 的超集,兼容 ES5,ES2015/16/17.</li>
<li>它的编译结果是 JS , 可以运行在浏览器/Node 端.</li>
<li>它支持 TS 和 JS 混用</li>
</ul>
<h3 id="主流框架支持程度"><a href="#主流框架支持程度" class="headerlink" title="主流框架支持程度"></a>主流框架支持程度</h3><ul>
<li>Angular 2.0 <code>完全支持</code></li>
<li>VUE 2.0 <code>部分支持</code><ul>
<li>模板中还不具备 Type Check 的能力</li>
</ul>
</li>
<li>React <code>完全支持</code><ul>
<li>jsx 不是 ‘模板’而是 js,所以 Type Check 支持的很好</li>
</ul>
</li>
</ul>
<h3 id="异步逻辑的处理"><a href="#异步逻辑的处理" class="headerlink" title="异步逻辑的处理"></a>异步逻辑的处理</h3><ul>
<li><code>RxJS</code> 实现渐进式搜索</li>
<li>使用 Rx.js Observable 可以更好更直观的描述这些 API,帮助你在错综复杂的异步 API 调用中少犯错</li>
</ul>
<hr>
<h2 id="项目中如何选择框架和库"><a href="#项目中如何选择框架和库" class="headerlink" title="项目中如何选择框架和库"></a>项目中如何选择框架和库</h2><p>分享人：张克军(豆瓣)</p>
<p id="border-blue"><code>特指</code>公司规模比较大,协作开发的人数比较多,商业型项目</p>

<h3 id="商业型项目的核心"><a href="#商业型项目的核心" class="headerlink" title="商业型项目的核心"></a>商业型项目的核心</h3><ol>
<li>注重以结果为导向</li>
<li>高效率高质量的产出产品</li>
</ol>
<h3 id="考虑方面"><a href="#考虑方面" class="headerlink" title="考虑方面"></a>考虑方面</h3><ol>
<li>迭代周期长,方案的选择就要 <code>长期有效性</code></li>
<li>代码可维护性</li>
<li>伸缩性,用比较小的成本应对可能随时变更的需求</li>
<li>方案的选择需要更务实</li>
</ol>
<h3 id="基本前提"><a href="#基本前提" class="headerlink" title="基本前提"></a>基本前提</h3><ul>
<li>成本和效率<ul>
<li>实现目标的成本和效率</li>
<li>团队协作的成本和效率</li>
<li>后续迭代的成本和效率</li>
</ul>
</li>
</ul>
<p><strong>选择库时经常谈到的关键词</strong></p>
<ul>
<li>模式,普及率,成熟度</li>
<li>体量,局限性,学习成本</li>
<li>性能,活跃度,周边资源</li>
<li>前景,契合度,文档质量</li>
</ul>
<h3 id="选择的原则"><a href="#选择的原则" class="headerlink" title="选择的原则"></a>选择的原则</h3><ol>
<li>妥适性原则(避免过度实现)</li>
<li>库的选择:<ol>
<li>缩小依赖范围和向稳定方向依赖</li>
<li>避重趋轻、避繁逐简、以简驭繁、避虚就实</li>
<li>可替代性</li>
</ol>
</li>
<li>主框架的选择<ol>
<li>没有不二法则</li>
<li>拥抱未来</li>
<li>经验价值高</li>
<li>架构上的优势为重</li>
</ol>
</li>
</ol>
<h3 id="选择的原则-白话版"><a href="#选择的原则-白话版" class="headerlink" title="选择的原则(白话版)"></a>选择的原则(白话版)</h3><ol>
<li>妥适性原则(避免过度实现)</li>
<li>库的选择，尽量同时满足以下条件<ol>
<li>单一性</li>
<li>普遍性</li>
<li>轻量型</li>
<li>依赖少</li>
</ol>
</li>
<li>主框架的选择：做足调研和实践，多和老司机交流</li>
<li>code Review 十分重要</li>
</ol>
<h3 id="包分析工具"><a href="#包分析工具" class="headerlink" title="包分析工具"></a>包分析工具</h3><p id="border-green">可以分析出项目中库的依赖和自己写得代码的比重</p>

<p><a href="https://www.npmjs.com/package/webpack-bundle-analyzer" rel="external nofollow noopener noreferrer" target="_blank">https://www.npmjs.com/package/webpack-bundle-analyzer</a></p>
<hr>
<h2 id="RN-跨三端技术实践"><a href="#RN-跨三端技术实践" class="headerlink" title="RN 跨三端技术实践"></a>RN 跨三端技术实践</h2><p>分享人：<a href="https://github.com/putaoshu" rel="external nofollow noopener noreferrer" target="_blank">刘威</a>(京东金融)</p>
<h3 id="移动开发常见问题"><a href="#移动开发常见问题" class="headerlink" title="移动开发常见问题"></a>移动开发常见问题</h3><ul>
<li>原生开发 <code>门槛高</code></li>
<li>原生发版到上线相对 <code>周期长</code></li>
<li>原生线上问题相对 <code>难修复</code></li>
<li>H5 相对原生 <code>体验差</code></li>
</ul>
<h3 id="RN-优缺点"><a href="#RN-优缺点" class="headerlink" title="RN 优缺点"></a>RN 优缺点</h3><ul>
<li>优点<ul>
<li>学习<code>成本低</code></li>
<li>体验<code>接近原生</code></li>
<li>二端代码<code>可复用</code></li>
<li>社区活跃</li>
</ul>
</li>
<li>缺点<ul>
<li>不支持热更新</li>
<li>不支持 h5</li>
<li>向下兼容性差</li>
<li>低端机型会有崩溃</li>
</ul>
</li>
</ul>
<h3 id="三端平台-架构"><a href="#三端平台-架构" class="headerlink" title="三端平台-架构"></a>三端平台-架构</h3><p><img src="../imgs/jinrong.png" alt=""></p>
<h4 id="关于热更新"><a href="#关于热更新" class="headerlink" title="关于热更新"></a>关于热更新</h4><p id="border-green">苹果官方停掉热更新之后并不影响RN，因为RN热更新没有更改底层的OC代码</p>

<ul>
<li>缓存机制<ul>
<li>模块名称</li>
<li>bundle 文件下载地址</li>
<li>文件校验安全码</li>
<li>版本号</li>
</ul>
</li>
<li>更新机制<ul>
<li>插件安全码是否一致</li>
</ul>
</li>
</ul>
<p>大体思路好像是：</p>
<ol>
<li>用户进入 APP</li>
<li>默认下载一个某个接口的数据到本地<ul>
<li>接口中包括模块名称、bundle 文件<code>下载地址</code>、文件校验安全码、版本号</li>
</ul>
</li>
<li>当用户再一次进入 APP 中的时候会再次下载接口中的数据</li>
<li>然后在对比之前的数据是否发生了变化，安全码是否一致</li>
<li>如果不一致，就重新下载一遍，以此实现热更新</li>
</ol>
<h4 id="拆分-bundle"><a href="#拆分-bundle" class="headerlink" title="拆分 bundle"></a>拆分 bundle</h4><ul>
<li>底层框架 Bundle<ul>
<li>基础 RN JS 库</li>
<li>三端组件 JS 库</li>
</ul>
</li>
<li>业务代码 Bundle<ul>
<li>纯业务 JS</li>
</ul>
</li>
<li><a href="https://www.npmjs.com/package/@cqingwang/react-native-split" rel="external nofollow noopener noreferrer" target="_blank">可参考 react-native-split</a></li>
</ul>
<h4 id="灾备策略"><a href="#灾备策略" class="headerlink" title="灾备策略"></a>灾备策略</h4><p id="border-red">当在低版本手机点击时出现崩溃备用方案</p>

<ul>
<li>低版本的原生跳 H5</li>
<li>原生连续崩溃降级至 H5</li>
</ul>
<h4 id="如何支持-web-端"><a href="#如何支持-web-端" class="headerlink" title="如何支持 web 端"></a>如何支持 web 端</h4><ul>
<li>编译时转译 RN API</li>
<li><a href="https://github.com/necolas/react-native-web" rel="external nofollow noopener noreferrer" target="_blank">react-native-web</a></li>
<li><a href="https://www.npmjs.com/package/node-haste-webpack-plugin" rel="external nofollow noopener noreferrer" target="_blank">node-haste-webpack-plugin</a></li>
</ul>
<h4 id="版本控制"><a href="#版本控制" class="headerlink" title="版本控制"></a>版本控制</h4><ul>
<li>入口配置灵活<ul>
<li>指定端和版本(可以指定版本打对应的包)</li>
<li>指定人群定向(作用主要用于测试)</li>
<li>小流量</li>
</ul>
</li>
</ul>
<h4 id="跳转中心"><a href="#跳转中心" class="headerlink" title="跳转中心"></a>跳转中心</h4><ul>
<li>低版本 H5</li>
<li>高版本原生<ul>
<li>全量包 URL</li>
<li>拆分包 URL</li>
</ul>
</li>
<li>App 外输出 H5 页面</li>
</ul>
<h4 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h4><p><img src="../imgs/youhua.png" alt=""></p>
<h4 id="数据上报"><a href="#数据上报" class="headerlink" title="数据上报"></a>数据上报</h4><p><img src="../imgs/shangbao.png" alt=""></p>
<hr>
<h3 id="三端平台-集成方案"><a href="#三端平台-集成方案" class="headerlink" title="三端平台-集成方案"></a>三端平台-集成方案</h3><h4 id="三端组件"><a href="#三端组件" class="headerlink" title="三端组件"></a>三端组件</h4><ul>
<li>JS UI 组件<ul>
<li>为<code>抹平</code>三端<code>差异化</code>的 API，基于视觉的规范 UI 层 JS 组件</li>
<li>UIButon、UIExplain、UISwipe…</li>
</ul>
</li>
<li>JS 业务组件<ul>
<li>Fetch、Login…</li>
</ul>
</li>
</ul>
<p><a href="https://fe.jr.jd.com/" rel="external nofollow noopener noreferrer" target="_blank">变色龙三端开发平台文档</a></p>
<h4 id="三端工具"><a href="#三端工具" class="headerlink" title="三端工具"></a>三端工具</h4><ul>
<li>本地 Nodejs 脚手架</li>
<li>本地模拟器-Android</li>
<li>本地模拟器-IOS</li>
<li><a href="https://itunes.apple.com/cn/app/id1244996679?mt=8" rel="external nofollow noopener noreferrer" target="_blank"><code>独立调试IOS</code> APP</a></li>
<li>本地 IDE 客户端</li>
</ul>
<hr>
<h2 id="链家网前端工程实践"><a href="#链家网前端工程实践" class="headerlink" title="链家网前端工程实践"></a>链家网前端工程实践</h2><p>分享人：杨永林(链家)</p>
<h3 id="都说了什么"><a href="#都说了什么" class="headerlink" title="都说了什么"></a>都说了什么</h3><p><img src="../imgs/lianjia.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;构建大型应用&quot;&gt;&lt;a href=&quot;#构建大型应用&quot; class=&quot;headerlink&quot; title=&quot;构建大型应用&quot;&gt;&lt;/a&gt;构建大型应用&lt;/h2&gt;&lt;p&gt;分享人：孟红伦(钉钉)&lt;/p&gt;
&lt;h3 id=&quot;重要的俩块&quot;&gt;&lt;a href=&quot;#重要的俩块&quot; class=&quot;headerlink&quot; title=&quot;重要的俩块&quot;&gt;&lt;/a&gt;重要的俩块&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;使用 &lt;code&gt;TypeScript&lt;/code&gt; 解决代码 &lt;code&gt;复杂&lt;/code&gt; ,数据模型的问题&lt;/li&gt;
&lt;li&gt;使用 &lt;code&gt;RxJS&lt;/code&gt; 更好的解决 &lt;code&gt;异步&lt;/code&gt; 带来的问题&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;代码如何复杂&quot;&gt;&lt;a href=&quot;#代码如何复杂&quot; class=&quot;headerlink&quot; title=&quot;代码如何复杂&quot;&gt;&lt;/a&gt;代码如何复杂&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;上百个 RPC 接口&lt;/li&gt;
&lt;li&gt;几十种消息推送&lt;/li&gt;
&lt;li&gt;10W + 行代码&lt;/li&gt;
&lt;li&gt;模块依赖关系复杂&lt;/li&gt;
&lt;li&gt;数据模型复杂&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;钉钉犯过的错&quot;&gt;&lt;a href=&quot;#钉钉犯过的错&quot; class=&quot;headerlink&quot; title=&quot;钉钉犯过的错&quot;&gt;&lt;/a&gt;钉钉犯过的错&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;开发时没有考虑到个人用户登录时的 ‘org’ 字段&lt;/li&gt;
&lt;li&gt;因为开发环境中是 &lt;code&gt;归属某个企业&lt;/code&gt; 的,忽视了对 &lt;code&gt;不归属任何企业的个人用户&lt;/code&gt;的测试&lt;/li&gt;
&lt;li&gt;最后还是用户主动反映了这个问题&lt;/li&gt;
&lt;li&gt;问题责任:测试的锅&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="技术笔记" scheme="http://www.baixiaojian.com/categories/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="笔记" scheme="http://www.baixiaojian.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="FEDAY3" scheme="http://www.baixiaojian.com/tags/FEDAY3/"/>
    
      <category term="记录" scheme="http://www.baixiaojian.com/tags/%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>RN 中 ES6 书写规范</title>
    <link href="http://www.baixiaojian.com/ReactES6/"/>
    <id>http://www.baixiaojian.com/ReactES6/</id>
    <published>2017-07-25T02:23:31.000Z</published>
    <updated>2018-01-12T16:12:30.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p id="border-blue">很多时候我们学会了很多东西,但是不知道 <code>怎么用、如何用、在哪用</code>这时这篇文章就显得 <code>很有用</code> 了。<br>参考依照：<a href="http://bbs.reactnative.cn/topic/15/react-react-native-%E7%9A%84es5-es6%E5%86%99%E6%B3%95%E5%AF%B9%E7%85%A7%E8%A1%A8" rel="external nofollow noopener noreferrer" target="_blank">ES5 ES6写法对照表</a></p>

<hr>
<a id="more"></a>
<h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h2><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123;</div><div class="line">    Image,</div><div class="line">    Text</div><div class="line">&#125; <span class="keyword">from</span> <span class="string">'react-native'</span></div></pre></td></tr></table></figure>
<h3 id="导出单个类"><a href="#导出单个类" class="headerlink" title="导出单个类"></a>导出单个类</h3><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">/* 导出 */</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">MyComponent</span> <span class="keyword">extends</span> <span class="title">Component</span></span>&#123;</div><div class="line">    ...</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* 引入 */</span></div><div class="line"><span class="keyword">import</span> MyComponent <span class="keyword">from</span> <span class="string">'./MyComponent'</span>;</div></pre></td></tr></table></figure>
<hr>
<h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><h3 id="定义组件"><a href="#定义组件" class="headerlink" title="定义组件"></a>定义组件</h3><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Photo</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">    render() &#123;</div><div class="line">        <span class="keyword">return</span> (</div><div class="line">            &lt;Image source=&#123;this.props.source&#125; /&gt;</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="给组件定义方法"><a href="#给组件定义方法" class="headerlink" title="给组件定义方法"></a>给组件定义方法</h3><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Photo</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">    componentWillMount() &#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    render() &#123;</div><div class="line">        <span class="keyword">return</span> (</div><div class="line">            &lt;Image source=&#123;this.props.source&#125; /&gt;</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="定义组件的-属性类型-和-默认属性"><a href="#定义组件的-属性类型-和-默认属性" class="headerlink" title="定义组件的 属性类型 和 默认属性"></a>定义组件的 <code>属性类型</code> 和 <code>默认属性</code></h3><p>在ES6里，可以统一使用 <code>static</code> 成员来实现</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Video</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">    <span class="keyword">static</span> defaultProps = &#123;</div><div class="line">        <span class="attr">autoPlay</span>: <span class="literal">false</span>,</div><div class="line">        <span class="attr">maxLoops</span>: <span class="number">10</span>,</div><div class="line">    &#125;;  <span class="comment">// 注意这里有分号</span></div><div class="line">    <span class="keyword">static</span> propTypes = &#123;</div><div class="line">        <span class="comment">// 定义 autoPlay必须是 布尔值</span></div><div class="line">        autoPlay: React.PropTypes.bool.isRequired,</div><div class="line">        <span class="attr">maxLoops</span>: React.PropTypes.number.isRequired,</div><div class="line">        <span class="attr">posterFrameSrc</span>: React.PropTypes.string.isRequired,</div><div class="line">        <span class="attr">videoSrc</span>: React.PropTypes.string.isRequired,</div><div class="line">    &#125;;  <span class="comment">// 注意这里有分号</span></div><div class="line">    render() &#123;</div><div class="line">        <span class="keyword">return</span> (</div><div class="line">            &lt;View /&gt;</div><div class="line">        );</div><div class="line">    &#125; // 注意这里既没有分号也没有逗号</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<h2 id="初始化-STATE"><a href="#初始化-STATE" class="headerlink" title="初始化 STATE"></a>初始化 STATE</h2><p>第一种写法：方便、简单</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Video</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">    state = &#123;</div><div class="line">        <span class="attr">loopsRemaining</span>: <span class="keyword">this</span>.props.maxLoops,</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>第二种写法：语法上易理解，可以根据需要做一些计算</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Video</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>(props)&#123;</div><div class="line">        <span class="keyword">super</span>(props);</div><div class="line">        <span class="keyword">this</span>.state = &#123;</div><div class="line">            <span class="attr">loopsRemaining</span>: <span class="keyword">this</span>.props.maxLoops,</div><div class="line">        &#125;;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<h2 id="把方法作为-回调"><a href="#把方法作为-回调" class="headerlink" title="把方法作为 回调"></a>把方法作为 <code>回调</code></h2><p>在ES6下，需要通过bind来绑定this引用，或者使用箭头函数来调用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostInfo</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span></div><div class="line">&#123;</div><div class="line">    handleOptionsButtonClick(e)&#123;</div><div class="line">        <span class="keyword">this</span>.setState(&#123;<span class="attr">showOptionsModal</span>: <span class="literal">true</span>&#125;);</div><div class="line">    &#125;</div><div class="line">    render()&#123;</div><div class="line">        <span class="keyword">return</span> (</div><div class="line">            &lt;TouchableHighlight</div><div class="line">                onPress=&#123;this.handleOptionsButtonClick.bind(this)&#125; // bind绑定</div><div class="line">                onPress=&#123;e=&gt;this.handleOptionsButtonClick(e)&#125; // 箭头函数</div><div class="line">                &gt;</div><div class="line">                &lt;Text&gt;&#123;this.props.label&#125;&lt;/Text&gt;</div><div class="line">            &lt;/TouchableHighlight&gt;</div><div class="line">        )</div><div class="line">    &#125;,</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>需要注意的是，不论是bind还是箭头函数，每次被执行都返回的是一个新的函数引用，<br>因此如果你还需要函数的引用去做一些别的事情（譬如卸载监听器），那么你必须自己保存这个引用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">PauseMenu</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</div><div class="line">    <span class="keyword">constructor</span>(props)&#123;</div><div class="line">        <span class="keyword">super</span>(props);</div><div class="line">        <span class="keyword">this</span>._onAppPaused = <span class="keyword">this</span>.onAppPaused.bind(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line">    componentWillMount()&#123;</div><div class="line">        AppStateIOS.addEventListener(<span class="string">'change'</span>, <span class="keyword">this</span>._onAppPaused);</div><div class="line">    &#125;</div><div class="line">    componentDidUnmount()&#123;</div><div class="line">        AppStateIOS.removeEventListener(<span class="string">'change'</span>, <span class="keyword">this</span>._onAppPaused);</div><div class="line">    &#125;</div><div class="line">    onAppPaused(event)&#123;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p id=&quot;border-blue&quot;&gt;很多时候我们学会了很多东西,但是不知道 &lt;code&gt;怎么用、如何用、在哪用&lt;/code&gt;这时这篇文章就显得 &lt;code&gt;很有用&lt;/code&gt; 了。&lt;br&gt;参考依照：&lt;a href=&quot;http://bbs.reactnative.cn/topic/15/react-react-native-%E7%9A%84es5-es6%E5%86%99%E6%B3%95%E5%AF%B9%E7%85%A7%E8%A1%A8&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;ES5 ES6写法对照表&lt;/a&gt;&lt;/p&gt;

&lt;hr&gt;
    
    </summary>
    
      <category term="技术笔记" scheme="http://www.baixiaojian.com/categories/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="React" scheme="http://www.baixiaojian.com/tags/React/"/>
    
      <category term="书写规范" scheme="http://www.baixiaojian.com/tags/%E4%B9%A6%E5%86%99%E8%A7%84%E8%8C%83/"/>
    
      <category term="ES6" scheme="http://www.baixiaojian.com/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>React-native 笔记</title>
    <link href="http://www.baixiaojian.com/React-native/"/>
    <id>http://www.baixiaojian.com/React-native/</id>
    <published>2017-07-12T08:47:59.000Z</published>
    <updated>2017-12-31T07:20:02.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul>
<li>对中文网的的 ReactNative 的内容进行的 <code>提炼</code></li>
<li>对其中的内容进行了 <code>简化</code></li>
<li>对一些我个人认为较复杂且不常用的功能或概念 <code>采取忽略</code></li>
<li>对 ReactNative <code>不了解</code> 的同学可能会有一点帮助</li>
<li>如笔记整理有错误还请 <a href="https://github.com/jianxiaoBai/jianxiaobai.github.io/issues" rel="external nofollow noopener noreferrer" target="_blank">留言</a></li>
<li><p>深度阅读请访问 <a href="http://reactnative.cn/docs/0.46/getting-started.html#content" rel="external nofollow noopener noreferrer" target="_blank">ReactNative中文网</a></p>
<a id="more"></a>
</li>
</ul>
<h1 id="ReactNative-使用"><a href="#ReactNative-使用" class="headerlink" title="ReactNative 使用"></a>ReactNative 使用</h1><h2 id="安装运行-ReactNative"><a href="#安装运行-ReactNative" class="headerlink" title="安装运行 ReactNative"></a>安装运行 ReactNative</h2><ul>
<li><code>react-native init</code> AwesomeProject</li>
<li>cd AwesomeProject &amp;&amp; <code>react-native run-ios</code></li>
</ul>
<p><span id="inline-yellow">提示:</span> version参数 可用来指定版本,例如 <code>react-native init MyApp --version 0.44.3</code>。</p>
<hr>
<h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="comment">/* 引用 React 的默认方法 与 Component 组件 */</span></div><div class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="comment">/* 引用 react-native 的AppRegister 与 Text 组件 */</span></div><div class="line"><span class="keyword">import</span> &#123; AppRegistry, Text &#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</div><div class="line"><span class="comment">/* 定义 Hello 组件 并扩展到 react 的 Component 中*/</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hello</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">    <span class="comment">/* JSX 渲染语法 */</span></div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      &lt;Text&gt;Hello world!&lt;/Text&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">/* AppRegistry的内置模块对 Hello组件 进行了“注册”操作,在整个应用里只会用一次 */</span></div><div class="line">AppRegistry.registerComponent(<span class="string">'Hello'</span>, () =&gt; Hello);</div></pre></td></tr></table></figure>
<hr>
<h2 id="Props-属性"><a href="#Props-属性" class="headerlink" title="Props(属性)"></a>Props(属性)</h2><p id="border-blue">多数组件在创建时就可使用 <code>props参数</code> 来定制。</p>

<h3 id="Image组件使用-props"><a href="#Image组件使用-props" class="headerlink" title="Image组件使用 props"></a>Image组件使用 <code>props</code></h3><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> &#123; AppRegistry, Image &#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bananas</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">let</span> pic = &#123;</div><div class="line">      <span class="attr">uri</span>: <span class="string">'https://upload.wikimedia.org/wikipedia/commons/d/de/Bananavarieties.jpg'</span></div><div class="line">    &#125;;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      &lt;Image source=&#123;pic&#125; style=&#123;&#123;width: 193, height: 110&#125;&#125; /&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">AppRegistry.registerComponent('Bananas', () =&gt; Bananas);</div></pre></td></tr></table></figure>
<h3 id="自定义的组件使用-props"><a href="#自定义的组件使用-props" class="headerlink" title="自定义的组件使用 props"></a>自定义的组件使用 <code>props</code></h3><p><img src="/imgs/RN-props.jpg" alt=""></p>
<hr>
<h2 id="State-状态"><a href="#State-状态" class="headerlink" title="State(状态)"></a>State(状态)</h2><ul>
<li>RN中可通过 props 和 state 来控制一个组件<ul>
<li><code>props</code> 数据是在父组件中指定，仅生效一次</li>
<li><code>state</code> 数据可根据需求进行改写</li>
</ul>
</li>
<li><code>constructor</code> 可用来初始化state ,需要改写时调用 <code>setState</code> 方法</li>
</ul>
<p>文字变换例子</p>
<p><img src="/imgs/RN-state.jpg" alt=""></p>
<hr>
<h2 id="Style-样式"><a href="#Style-样式" class="headerlink" title="Style(样式)"></a>Style(样式)</h2><ul>
<li>按照JS的语法要求使用了驼峰命名法</li>
<li><code>StyleSheet.create</code> 来集中定义组件的样式</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> &#123; AppRegistry, StyleSheet, Text, View &#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">LotsOfStyles</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      &lt;View&gt;</div><div class="line">        &lt;Text style=&#123;styles.red&#125;&gt;just red&lt;/Text&gt;</div><div class="line">        &lt;Text style=&#123;styles.bigblue&#125;&gt;just bigblue&lt;/Text&gt;</div><div class="line"></div><div class="line">        /* 常见的做法是按顺序使用属性，即后属性会覆盖前属性 */</div><div class="line"></div><div class="line">        &lt;Text style=&#123;[styles.bigblue, styles.red]&#125;&gt;bigblue, then red&lt;/Text&gt;</div><div class="line">        &lt;Text style=&#123;[styles.red, styles.bigblue]&#125;&gt;red, then bigblue&lt;/Text&gt;</div><div class="line">      &lt;/View&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> styles = StyleSheet.create(&#123;</div><div class="line">  <span class="attr">bigblue</span>: &#123;</div><div class="line">    <span class="attr">color</span>: <span class="string">'blue'</span>,</div><div class="line">    <span class="attr">fontWeight</span>: <span class="string">'bold'</span>,</div><div class="line">    <span class="attr">fontSize</span>: <span class="number">30</span>,</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">red</span>: &#123;</div><div class="line">    <span class="attr">color</span>: <span class="string">'red'</span>,</div><div class="line">  &#125;,</div><div class="line">&#125;);</div><div class="line"></div><div class="line">AppRegistry.registerComponent(<span class="string">'LotsOfStyles'</span>, () =&gt; LotsOfStyles);</div></pre></td></tr></table></figure>
<hr>
<h2 id="Flexbox-布局"><a href="#Flexbox-布局" class="headerlink" title="Flexbox 布局"></a>Flexbox 布局</h2><p id="border-yellow"> <code>flexDirection</code> 的默认值是 <code>column</code> 而不是row，而flex也只能指定一个数字值。</p>

<ul>
<li>Flexbox 主要三属性<ul>
<li>flexDirection</li>
<li>justifyContent</li>
<li>alignItems</li>
</ul>
</li>
</ul>
<p><strong>居中排列</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> &#123; AppRegistry, View &#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">AlignItemsBasics</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      <span class="comment">// 尝试把`alignItems`改为`flex-start`看看</span></div><div class="line">      <span class="comment">// 尝试把`justifyContent`改为`flex-end`看看</span></div><div class="line">      <span class="comment">// 尝试把`flexDirection`改为`row`看看</span></div><div class="line">      &lt;View style=&#123;&#123;</div><div class="line">        <span class="attr">flex</span>: <span class="number">1</span>,</div><div class="line">        <span class="attr">flexDirection</span>: <span class="string">'row'</span>,</div><div class="line">        <span class="attr">justifyContent</span>: <span class="string">'center'</span>,</div><div class="line">        <span class="attr">alignItems</span>: <span class="string">'center'</span>,</div><div class="line">      &#125;&#125;&gt;</div><div class="line">        &lt;View style=&#123;&#123;width: 50, height: 50, backgroundColor: 'powderblue'&#125;&#125; /&gt;</div><div class="line">        &lt;View style=&#123;&#123;width: 50, height: 50, backgroundColor: 'skyblue'&#125;&#125; /&gt;</div><div class="line">        &lt;View style=&#123;&#123;width: 50, height: 50, backgroundColor: 'steelblue'&#125;&#125; /&gt;</div><div class="line">      &lt;/View&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">AppRegistry.registerComponent('AwesomeProject', () =&gt; AlignItemsBasics);</div></pre></td></tr></table></figure>
<hr>
<h2 id="TextInput"><a href="#TextInput" class="headerlink" title="TextInput"></a>TextInput</h2><ul>
<li><code>TextInput</code> 是一个允许用户输入文本的基础组件。</li>
<li><code>onChangeText</code> 属性接受一个函数，而此函数会在 <code>文本变化时</code> 被调用。</li>
<li><code>onSubmitEditing</code> 属性，会在 <code>文本被提交后</code>（用户按下软键盘上的提交键）调用。</li>
</ul>
<hr>
<h2 id="ScrollView"><a href="#ScrollView" class="headerlink" title="ScrollView"></a>ScrollView</h2><ul>
<li>ScrollView 是一个通用的可滚动的容器，其中可放入多个组件和视图，<code>不区分类型</code>,可以 <code>水平滚动</code></li>
<li>ScrollView 适合用来显示 <code>数量不多</code> 的滚动元素</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> &#123;</div><div class="line">  AppRegistry,</div><div class="line">  StyleSheet,</div><div class="line">  Text,</div><div class="line">  View,</div><div class="line">  ScrollView,</div><div class="line">  Image</div><div class="line">&#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">testApp</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">  render() &#123;</div><div class="line">      <span class="keyword">return</span>(</div><div class="line">        &lt;ScrollView&gt;</div><div class="line">          &lt;Text style=&#123;&#123;fontSize:96&#125;&#125;&gt;Scroll me plz&lt;/Text&gt;</div><div class="line">          &lt;Image source=&#123;require('./src/img/aaa.png')&#125; style=&#123;&#123;height:200,width:200&#125;&#125;/&gt;</div><div class="line">          &lt;Image source=&#123;require('./src/img/aaa.png')&#125; style=&#123;&#123;height:200,width:200&#125;&#125;/&gt;</div><div class="line">          &lt;Image source=&#123;require('./src/img/bbb.jpeg')&#125; style=&#123;&#123;height:200,width:200&#125;&#125;/&gt;</div><div class="line">          &lt;Image source=&#123;require('./src/img/aaa.png')&#125; style=&#123;&#123;height:200,width:200&#125;&#125;/&gt;</div><div class="line">          &lt;Image source=&#123;require('./src/img/aaa.png')&#125; style=&#123;&#123;height:200,width:200&#125;&#125;/&gt;</div><div class="line">          &lt;Text style=&#123;&#123;fontSize:96&#125;&#125;&gt;If you like&lt;/Text&gt;</div><div class="line">          &lt;Image source=&#123;require('./src/img/bbb.jpeg')&#125; style=&#123;&#123;height:200,width:200&#125;&#125;/&gt;</div><div class="line">          &lt;Text style=&#123;&#123;fontSize:80&#125;&#125;&gt;React Native&lt;/Text&gt;</div><div class="line">        &lt;/ScrollView&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">AppRegistry.registerComponent('testApp', () =&gt; testApp);</div></pre></td></tr></table></figure>
<hr>
<h2 id="ListView"><a href="#ListView" class="headerlink" title="ListView"></a>ListView</h2><ul>
<li>RN 中展示长列表数据的常用组件有俩个<ul>
<li>FlatList</li>
<li>SectionList</li>
</ul>
</li>
</ul>
<h3 id="FlatList-组件"><a href="#FlatList-组件" class="headerlink" title="FlatList 组件"></a>FlatList 组件</h3><ul>
<li><p>特点</p>
<ul>
<li>适用展示一组 <code>仅数据不同的垂直滚动列表</code></li>
<li>适用 <code>长列表数据</code> 且元素的个数可以增删</li>
<li>FlatList <code>优先渲染屏幕上可见的元素</code></li>
</ul>
</li>
<li><p>使用</p>
<ul>
<li>FlatList 组件 <code>必须</code> 的两个属性是 <code>data</code> 和 <code>renderItem</code> 。<ul>
<li>data 是列表的 <code>数据源</code></li>
<li>renderItem 是从数据源中逐个 <code>解析数据</code> ，然后返回一个设定好格式的组件来渲染。</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> &#123;</div><div class="line">  AppRegistry,</div><div class="line">  StyleSheet,</div><div class="line">  Text,</div><div class="line">  View,</div><div class="line">  ScrollView,</div><div class="line">  Image,</div><div class="line">  FlatList</div><div class="line">&#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">testApp</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      &lt;View style=&#123;styles.container&#125;&gt;</div><div class="line">        &lt;FlatList</div><div class="line">          data=&#123;[</div><div class="line">            &#123;key: 'Devin'&#125;,</div><div class="line">            &#123;key: 'Jackson'&#125;,</div><div class="line">            &#123;key: 'James'&#125;,</div><div class="line">            &#123;key: 'Joel'&#125;,</div><div class="line">            &#123;key: 'John'&#125;,</div><div class="line">            &#123;key: 'Jillian'&#125;,</div><div class="line">            &#123;key: 'Jimmy'&#125;,</div><div class="line">            &#123;key: 'Julie'&#125;,</div><div class="line">            &#123;key: 'Julie'&#125;,</div><div class="line">            &#123;key: '白晓健'&#125;,</div><div class="line">            &#123;key: '白晓建'&#125;,</div><div class="line">            &#123;key: '白晓见'&#125;,</div><div class="line">            &#123;key: '白小剑'&#125;,</div><div class="line">          ]&#125;</div><div class="line">          // renderItem 一个对象, 里面有一个箭头函数其参数是一个对象,对象的值时 data 中的 每一项</div><div class="line">          renderItem=&#123;(&#123;item&#125;) =&gt; &#123;</div><div class="line"></div><div class="line">            return &lt;Text style=&#123;styles.item&#125;&gt; 你好&#123;item.key&#125; ,welcome &lt;/Text&gt;</div><div class="line">      &#125;&#125;</div><div class="line">        /&gt;</div><div class="line">      &lt;/View&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">const styles = StyleSheet.create(&#123;</div><div class="line">  container: &#123;</div><div class="line">   flex: 1,</div><div class="line">   paddingTop: 22,</div><div class="line">  &#125;,</div><div class="line">  item: &#123;</div><div class="line">    padding: 10,</div><div class="line">    fontSize: 18,</div><div class="line">    height: 44,</div><div class="line">    backgroundColor:'pink'</div><div class="line">  &#125;,</div><div class="line">&#125;)</div><div class="line">AppRegistry.registerComponent('testApp', () =&gt; testApp);</div></pre></td></tr></table></figure>
<h3 id="SectionList"><a href="#SectionList" class="headerlink" title="SectionList"></a>SectionList</h3><p id="border-blue">如果想提供一组数据分成 <code>逻辑部分</code> 或 <code>章节标题</code> ，可以使用 <code>SectionList</code> 。</p>


<h2 id="网络请求-fetch"><a href="#网络请求-fetch" class="headerlink" title="网络请求(fetch)"></a>网络请求(fetch)</h2><h3 id="发起网络请求"><a href="#发起网络请求" class="headerlink" title="发起网络请求"></a>发起网络请求</h3><p id="border-blue">想从地址获取内容,只需将网址作为参数即可</p>

<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">testApp</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">  state = &#123;</div><div class="line">    <span class="attr">movies</span>:[</div><div class="line">      &#123;<span class="attr">key</span>: <span class="string">'白晓健'</span>&#125;,</div><div class="line">      &#123;<span class="attr">key</span>: <span class="string">'白晓建'</span>&#125;,</div><div class="line">      &#123;<span class="attr">key</span>: <span class="string">'白晓见'</span>&#125;,</div><div class="line">      &#123;<span class="attr">key</span>: <span class="string">'白小剑'</span>&#125;,</div><div class="line">    ],</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  fatchData=<span class="function"><span class="params">()</span>=&gt;</span>&#123;</div><div class="line">    fetch(<span class="string">'https://api.douban.com/v2/movie/in_theaters'</span>)</div><div class="line">    <span class="comment">// 转换成 Text  是为了当意外发生时,更容易锁定错误</span></div><div class="line">    .then(<span class="function">(<span class="params">response</span>) =&gt;</span> response.text())</div><div class="line">    .then(<span class="function">(<span class="params">responseText</span>) =&gt;</span> &#123;</div><div class="line">      <span class="keyword">const</span> json = <span class="built_in">JSON</span>.parse(responseText);</div><div class="line">      <span class="built_in">console</span>.log(json)</div><div class="line">      <span class="comment">// 重新设置 state 中 movies 的 值,也就是给 movies 赋值</span></div><div class="line">      <span class="keyword">this</span>.setState(&#123;<span class="attr">movies</span>:json.subjects&#125;);</div><div class="line">    &#125;)</div><div class="line">    .catch(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</div><div class="line">      <span class="built_in">console</span>.error(error);</div><div class="line">    &#125;);</div><div class="line">  &#125;</div><div class="line">  componentDidMount() &#123;</div><div class="line">      <span class="keyword">this</span>.fatchData()</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      <span class="comment">// const &#123; movies &#125; = this.state;</span></div><div class="line">      &lt;View style=&#123;styles.container&#125;&gt;</div><div class="line">        &lt;FlatList</div><div class="line">          data=&#123;this.state.movies&#125;</div><div class="line">          // 一个对象 里面有一个</div><div class="line">          renderItem=&#123;(&#123;item&#125;) =&gt; &#123;</div><div class="line"></div><div class="line">            return &lt;Text style=&#123;styles.item&#125;&gt; 你好,&#123;item.title&#125; ,welcome &lt;/Text&gt;</div><div class="line">      &#125;&#125;</div><div class="line">        /&gt;</div><div class="line">      &lt;/View&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>fetch 的第二个可选参数,可用来定制HTTP请求一些参数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="comment">/* 指定header参数，指定使用POST方法，提交数据 */</span></div><div class="line">fetch(<span class="string">'https://mywebsite.com/endpoint/'</span>, &#123;</div><div class="line">  <span class="attr">method</span>: <span class="string">'POST'</span>,</div><div class="line">  <span class="attr">headers</span>: &#123;</div><div class="line">    <span class="string">'Accept'</span>: <span class="string">'application/json'</span>,</div><div class="line">    <span class="string">'Content-Type'</span>: <span class="string">'application/json'</span>,</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">body</span>: <span class="built_in">JSON</span>.stringify(&#123;</div><div class="line">    <span class="attr">firstParam</span>: <span class="string">'yourValue'</span>,</div><div class="line">    <span class="attr">secondParam</span>: <span class="string">'yourOtherValue'</span>,</div><div class="line">  &#125;)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h3 id="处理响应数据"><a href="#处理响应数据" class="headerlink" title="处理响应数据"></a>处理响应数据</h3><ul>
<li>网络请求天生就是一种异步操作</li>
<li>Fetch 方法会返回一个 <code>Promise实例</code> ，其用意是简化异步风格的代码</li>
<li>默认情况下，iOS会 <code>阻止所有非https的请求</code> ,<a href="https://segmentfault.com/a/1190000002933776" rel="external nofollow noopener noreferrer" target="_blank">解决方案</a></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">getMoviesFromApiAsync() &#123;</div><div class="line">   <span class="keyword">return</span> fetch(<span class="string">'https://facebook.github.io/react-native/movies.json'</span>)</div><div class="line">     .then(<span class="function">(<span class="params">response</span>) =&gt;</span> response.json())</div><div class="line">     .then(<span class="function">(<span class="params">responseJson</span>) =&gt;</span> &#123;</div><div class="line">       <span class="keyword">return</span> responseJson.movies;</div><div class="line">     &#125;)</div><div class="line">     .catch(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</div><div class="line">       <span class="built_in">console</span>.error(error);</div><div class="line">     &#125;);</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p>RN 应用中使用 <code>ES7标准中</code> 的async/await 语法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 注意这个方法前面有async关键字</span></div><div class="line"> <span class="keyword">async</span> getMoviesFromApi() &#123;</div><div class="line">   <span class="keyword">try</span> &#123;</div><div class="line">     <span class="comment">// 注意这里的await语句，其所在的函数必须有async关键字声明</span></div><div class="line">     <span class="keyword">let</span> response = <span class="keyword">await</span> fetch(<span class="string">'https://facebook.github.io/react-native/movies.json'</span>);</div><div class="line">     <span class="keyword">let</span> responseJson = <span class="keyword">await</span> response.json();</div><div class="line">     <span class="keyword">return</span> responseJson.movies;</div><div class="line">   &#125; <span class="keyword">catch</span>(error) &#123;</div><div class="line">     <span class="comment">/* 别忘了catch住fetch可能抛出的异常，否则出错时你可能看不到任何提示。 */</span></div><div class="line">     <span class="built_in">console</span>.error(error);</div><div class="line">   &#125;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<hr>
<h3 id="使用其他的网络库"><a href="#使用其他的网络库" class="headerlink" title="使用其他的网络库"></a>使用其他的网络库</h3><ul>
<li>RN 中已经内置了 <code>XMLHttpRequest</code> 也就是 ajax</li>
<li>基于 <code>XMLHttpRequest</code> 封装的第三方库有 <code>frisbee</code> 或是 <code>axios</code> 等</li>
<li>没有跨域限制</li>
</ul>
<h3 id="WebSocket"><a href="#WebSocket" class="headerlink" title="WebSocket"></a>WebSocket</h3><p id="border-blue">RN 支持 WebSocket，这种协议可以在单个 <code>TCP</code> 连接上提供 <code>全双工</code> 的通信信道</p>

<p><a href="https://developer.mozilla.org/en-US/docs/Web/API/WebSocket" rel="external nofollow noopener noreferrer" target="_blank">深度阅读</a></p>
<hr>
<h2 id="使用导航器跳转页面"><a href="#使用导航器跳转页面" class="headerlink" title="使用导航器跳转页面"></a>使用导航器跳转页面</h2><p id="border-yellow">从0.44版本开始， <code>Navigator</code> 被从react native的核心组件库中 <code>抽离</code> 到了一个名为 <code>react-native-deprecated-custom-components</code> 的单独模块中。<br>如果需要继续使用 <code>Navigator</code> ，则需要先 <code>yarn add react-native-deprecated-custom-components</code> 安装，然后从这个模块中 import，即 <code>import { Navigator } from &#39;react-native-deprecated-custom-components&#39;</code> .</p>


<h3 id="React-Navigation"><a href="#React-Navigation" class="headerlink" title="React Navigation"></a>React Navigation</h3><p id="border-blue">社区今后主推的方案是一个 <code>单独</code> 的导航库 <code>react-navigation</code> ，它的使用十分简单。</p>

<p><a href="https://reactnavigation.org/docs/intro/" rel="external nofollow noopener noreferrer" target="_blank">详细了解</a></p>
<p>首先是在当前应用中安装此库</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">yarn add react-navigation</div></pre></td></tr></table></figure>
<p>基本例子</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> &#123;</div><div class="line">  AppRegistry,</div><div class="line">  Text,</div><div class="line">  View,</div><div class="line">  Button</div><div class="line">&#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</div><div class="line"><span class="keyword">import</span> &#123; StackNavigator &#125; <span class="keyword">from</span> <span class="string">'react-navigation'</span>;</div><div class="line"></div><div class="line"><span class="comment">/* 导入组件 */</span></div><div class="line"><span class="keyword">import</span> Detail <span class="keyword">from</span> <span class="string">'./src/components/Detail'</span>;</div><div class="line"><span class="keyword">import</span> ChatScreen <span class="keyword">from</span> <span class="string">'./src/components/Chat'</span>;</div><div class="line"><span class="keyword">import</span> TestScreen <span class="keyword">from</span> <span class="string">'./src/components/Test'</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">HomeScreen</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="comment">/* 定义本页面的导航栏设置*/</span></div><div class="line">  <span class="keyword">static</span> navigationOptions = &#123;</div><div class="line">    <span class="comment">/* 定义标题,此标题也是跳入其他页面时返回键上的信息 */</span></div><div class="line">    title: <span class="string">'Welcome'</span>,</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  render() &#123;</div><div class="line">    <span class="comment">/* 使标题生效 */</span></div><div class="line">    <span class="keyword">const</span> &#123; navigate &#125; = <span class="keyword">this</span>.props.navigation;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      &lt;View&gt;</div><div class="line">        &lt;Text&gt;Hello, Chat App!&lt;/Text&gt;</div><div class="line">        &lt;Button</div><div class="line">          /* 设置文本点击事件,进入指定组件 */</div><div class="line">          onPress=&#123;() =&gt; navigate('Chat')&#125;</div><div class="line">          title="Chat with Lucy"</div><div class="line">        /&gt;</div><div class="line">      &lt;/View&gt;</div><div class="line">    );</div><div class="line"></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/* 在根文件中用 StackNavigator 声明这些组件(类似于定义路由),键就是 路由名称  */</div><div class="line">const testApp = StackNavigator(&#123;</div><div class="line">  Home: &#123; screen: HomeScreen &#125;,</div><div class="line">  aaa: &#123; screen: Detail &#125;,</div><div class="line">   Chat: &#123; screen: ChatScreen &#125;,</div><div class="line">   Test: &#123; screen: TestScreen &#125;,</div><div class="line">&#125;);</div><div class="line"></div><div class="line">AppRegistry.registerComponent('testApp', () =&gt; testApp);</div></pre></td></tr></table></figure>
<h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><h3 id="静态图片资源引用方式"><a href="#静态图片资源引用方式" class="headerlink" title="静态图片资源引用方式"></a>静态图片资源引用方式</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 正确</span></div><div class="line">&lt;Image source=&#123;<span class="built_in">require</span>(<span class="string">'./my-icon.png'</span>)&#125; /&gt;</div><div class="line"></div><div class="line"><span class="comment">// 错误</span></div><div class="line"><span class="keyword">var</span> icon = <span class="keyword">this</span>.props.active ? <span class="string">'my-icon-active'</span> : <span class="string">'my-icon-inactive'</span>;</div><div class="line">&lt;Image source=&#123;require('./' + icon + '.png')&#125; /&gt;</div><div class="line"></div><div class="line">// 正确</div><div class="line">var icon = this.props.active ? require('./my-icon-active.png') : require('./my-icon-inactive.png');</div><div class="line">&lt;Image source=&#123;icon&#125; /&gt;</div></pre></td></tr></table></figure>
<p>注意:require中的图片名字必须是一个静态字符串, <code>不能使用变量</code> ！</p>
<h3 id="静态非图片资源"><a href="#静态非图片资源" class="headerlink" title="静态非图片资源"></a>静态非图片资源</h3><p id="border-blue"><code>require</code> 语法也可以用来静态地加载你项目中的声音、视频或者文档等文件。</p>

<p>注意: <code>视频必须指定尺寸</code> 而不能使用flex样式.</p>
<h3 id="网络图片"><a href="#网络图片" class="headerlink" title="网络图片"></a>网络图片</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 正确</span></div><div class="line">&lt;Image source=&#123;&#123;<span class="attr">uri</span>: <span class="string">'https://facebook.github.io/react/img/logo_og.png'</span>&#125;&#125;</div><div class="line">       style=&#123;&#123;<span class="attr">width</span>: <span class="number">400</span>, <span class="attr">height</span>: <span class="number">400</span>&#125;&#125; /&gt;</div><div class="line"></div><div class="line"><span class="comment">// 错误</span></div><div class="line">&lt;Image source=&#123;&#123;<span class="attr">uri</span>: <span class="string">'https://facebook.github.io/react/img/logo_og.png'</span>&#125;&#125; /&gt;</div></pre></td></tr></table></figure>
<p>可携带参数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">&lt;Image source=&#123;&#123;</div><div class="line">  <span class="attr">uri</span>: <span class="string">'https://facebook.github.io/react/img/logo_og.png'</span>,</div><div class="line">  <span class="attr">method</span>: <span class="string">'POST'</span>,</div><div class="line">  <span class="attr">headers</span>: &#123;</div><div class="line">    <span class="attr">Pragma</span>: <span class="string">'no-cache'</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">body</span>: <span class="string">'Your Body goes here'</span></div><div class="line">&#125;&#125;</div><div class="line">style=&#123;&#123;<span class="attr">width</span>: <span class="number">400</span>, <span class="attr">height</span>: <span class="number">400</span>&#125;&#125; /&gt;</div></pre></td></tr></table></figure>
<h3 id="背景图片组件"><a href="#背景图片组件" class="headerlink" title="背景图片组件"></a>背景图片组件</h3><p>开发者们常面对的一种需求就是类似web中的背景图（background-image）。要实现这一用例，只需简单使用<imagebackground>组件，然后把需要背景图的子组件嵌入其中即可。</imagebackground></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">return</span> (</div><div class="line">  &lt;ImageBackground source=&#123;...&#125;&gt;</div><div class="line">    &lt;Text&gt;Inside&lt;/Text&gt;</div><div class="line">  &lt;/ImageBackground&gt;</div><div class="line">);</div></pre></td></tr></table></figure>
<h2 id="处理触摸事件"><a href="#处理触摸事件" class="headerlink" title="处理触摸事件"></a>处理触摸事件</h2><h3 id="点击事件"><a href="#点击事件" class="headerlink" title="点击事件"></a>点击事件</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyButton</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">  _onPressButton() &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"You tapped the button!"</span>);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      &lt;TouchableHighlight onPress=&#123;this._onPressButton&#125;&gt;</div><div class="line">        &lt;Text&gt;Button&lt;/Text&gt;</div><div class="line">      &lt;/TouchableHighlight&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>具体使用哪种组件，取决于希望给用户什么样的视觉反馈：<ul>
<li><code>TouchableHighlight</code>:来制作按钮或者链接。用户手指按下时 <code>背景变暗</code></li>
<li><code>TouchableNativeFeedback</code>:用户手指按下时形成类似 <code>墨水涟漪</code> 的视觉效果(限Android)</li>
<li><code>TouchableOpacity</code>:会在用户手指按下时 <code>降低透明度</code></li>
<li><code>TouchableWithoutFeedback</code>:点击事件的时 <code>无效果</code></li>
</ul>
</li>
</ul>
<p id="border-blue">某些场景中你可能需要检测用户是否进行了 <code>长按操作</code> 。<br>可以在上面列出的任意组件中使用 <code>onLongPress</code> 属性来实现。</p>

<h3 id="列表滑动"><a href="#列表滑动" class="headerlink" title="列表滑动"></a>列表滑动</h3><ul>
<li>ScrollView<ul>
<li>可实现用户会在列表中或快或慢的 <code>各种滑动</code></li>
<li>还可以配置 <code>pagingEnabled</code> 属性来让用户 <code>整屏滑动</code></li>
<li>水平方向的滑动还可以使用Android上的 <code>ViewPagerAndroid</code> 组件。</li>
</ul>
</li>
<li>ListView<ul>
<li>是一种特殊的ScrollView，用于显示 <code>较长垂直列表</code></li>
</ul>
</li>
</ul>
<hr>
<h2 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h2><ul>
<li>RN 提供了两个互补的动画系统：<ul>
<li>用于 <code>全局</code> 的布局动画 <code>LayoutAnimation</code></li>
<li>用于创建更 <code>精细</code> 的交互控制的动画 <code>Animated</code></li>
</ul>
</li>
</ul>
<p><a href="http://reactnative.cn/docs/0.46/animations.html#content" rel="external nofollow noopener noreferrer" target="_blank">深度阅读</a></p>
<hr>
<h2 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h2><p>RN 实现了和浏览器一致的定时器 Timer 。</p>
<ul>
<li>定时器<ul>
<li>setTimeout, clearTimeout</li>
<li>setInterval, clearInterval</li>
<li><code>setImmediate</code>, clearImmediate</li>
<li><code>requestAnimationFrame</code>, cancelAnimationFrame</li>
</ul>
</li>
</ul>
<p>setImmediate 和 setTimeout 有略微不同.<br>requestAnimationFrame 和 setInterval 有略微不同.</p>
<p><a href="http://reactnative.cn/docs/0.46/timers.html#content" rel="external nofollow noopener noreferrer" target="_blank">详细阅读</a></p>
<p>注意: <code>卸载组件前务必清除定时器</code></p>
<hr>
<h2 id="直接操作"><a href="#直接操作" class="headerlink" title="直接操作"></a>直接操作</h2><p id="border-blue">在 RN 中， <code>setNativeProps</code> 就是等价于直接在底层操作DOM节点的方法。</p>

<p>注意: 在使用 <code>setNativeProps</code> 之前,先尝试用 <code>setState</code> 或 <code>shouldComponentUpdate</code> 方法来解决问题</p>
<hr>
<h1 id="ReactNative-问题"><a href="#ReactNative-问题" class="headerlink" title="ReactNative 问题"></a>ReactNative 问题</h1><h2 id="端口占用"><a href="#端口占用" class="headerlink" title="端口占用"></a>端口占用</h2><p id="border-red">当运行时提示 <code>“Packager can’t listen on port 8081”</code> ，说明 8081 端口被占用</p>

<ul>
<li>第一种<ul>
<li>检查占用端口的程序并关闭</li>
</ul>
</li>
<li>第二种<ol>
<li>启动服务时指定端口号 <code>react-native start --port 8083</code></li>
<li>手动修改项目下的 <code>node_modules/react-native/local-cli/server/server.js</code> 中的 port 字段</li>
</ol>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;对中文网的的 ReactNative 的内容进行的 &lt;code&gt;提炼&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;对其中的内容进行了 &lt;code&gt;简化&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;对一些我个人认为较复杂且不常用的功能或概念 &lt;code&gt;采取忽略&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;对 ReactNative &lt;code&gt;不了解&lt;/code&gt; 的同学可能会有一点帮助&lt;/li&gt;
&lt;li&gt;如笔记整理有错误还请 &lt;a href=&quot;https://github.com/jianxiaoBai/jianxiaobai.github.io/issues&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;留言&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;深度阅读请访问 &lt;a href=&quot;http://reactnative.cn/docs/0.46/getting-started.html#content&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;ReactNative中文网&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="技术笔记" scheme="http://www.baixiaojian.com/categories/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="笔记" scheme="http://www.baixiaojian.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="ReactNative" scheme="http://www.baixiaojian.com/tags/ReactNative/"/>
    
  </entry>
  
  <entry>
    <title>React-redux 笔记</title>
    <link href="http://www.baixiaojian.com/React-redux/"/>
    <id>http://www.baixiaojian.com/React-redux/</id>
    <published>2017-07-10T07:26:17.000Z</published>
    <updated>2017-12-31T07:20:14.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="未完待续"><a href="#未完待续" class="headerlink" title="未完待续"></a>未完待续</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p id="border-blue">如果你的应用有以下场景，可以考虑使用 Redux。</p>

<ol>
<li>某个组件的状态 <code>需要共享</code></li>
<li>某个状态需要在 <code>任何地方</code> 都可以获取</li>
<li>一个组件想要 <code>改变全局状态</code></li>
<li>一个组件想要 <code>改变另一个组件状态</code></li>
</ol>
<a id="more"></a>
<h2 id="核心思想"><a href="#核心思想" class="headerlink" title="核心思想"></a>核心思想</h2><p id="border-green"> web 应用是一个 <code>状态机</code> ，视图与状态是 <code>相对应</code> 的,并且 <code>所有的状态都保存在一个对象里</code>。</p>


<h2 id="基本概念和-API"><a href="#基本概念和-API" class="headerlink" title="基本概念和 API"></a>基本概念和 API</h2><h3 id="Store"><a href="#Store" class="headerlink" title="Store"></a>Store</h3><ul>
<li>Store 就是保存数据的地方，你可以把它看成一个容器。</li>
<li><code>整个应用只能有一个 Store</code>。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">'redux'</span>;</div><div class="line"><span class="keyword">const</span> store = createStore(reducer);</div><div class="line"></div><div class="line"><span class="comment">/* createStore函数接受另一个函数作为参数，返回新生成的 Store 对象。 */</span></div></pre></td></tr></table></figure>
<h3 id="State"><a href="#State" class="headerlink" title="State"></a>State</h3><ul>
<li><code>Store对象包含所有数据</code>。</li>
<li><code>store.getState()</code> 可获得当前 State</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">'redux'</span>;</div><div class="line"><span class="keyword">const</span> store = createStore(reducer);</div><div class="line"></div><div class="line"><span class="keyword">const</span> state = store.getState();</div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line"> * Redux 规定， 一个 State 对应一个 View。</div><div class="line"> * 只要 State 相同，View 就相同。</div><div class="line"> * 你知道 State，就知道 View 是什么样，反之亦然。</div><div class="line"> */</div></pre></td></tr></table></figure>
<h3 id="Action"><a href="#Action" class="headerlink" title="Action"></a>Action</h3><ul>
<li>Action 只是一个对象</li>
<li>Action 可改变 State, 其变化会同步到 View</li>
<li><code>type属性必须</code> ，表示 Action 的名称,其他属性随意</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">const</span> action = &#123;</div><div class="line">  <span class="attr">type</span>: <span class="string">'ADD_TODO'</span>,</div><div class="line">  <span class="attr">payload</span>: <span class="string">'Learn Redux'</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="Action-Creator"><a href="#Action-Creator" class="headerlink" title="Action Creator"></a>Action Creator</h3><p>View 要发送多少种消息，就会有多少种 Action。<br>如果都手写，会很麻烦。可以定义一个函数来生成 Action，这个函数就叫 Action Creator。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">const</span> ADD_TODO = <span class="string">'添加 TODO'</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">addTodo</span>(<span class="params">text</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    <span class="attr">type</span>: ADD_TODO,</div><div class="line">    text</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> action = addTodo(<span class="string">'Learn Redux'</span>);</div><div class="line"></div><div class="line"><span class="comment">/* addTodo函数就是一个 Action Creator。 */</span></div></pre></td></tr></table></figure>
<h3 id="store-dispatch"><a href="#store-dispatch" class="headerlink" title="store.dispatch()"></a>store.dispatch()</h3><p><code>store.dispatch()是 View 发出 Action 的唯一方法。</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">'redux'</span>;</div><div class="line"><span class="keyword">const</span> store = createStore(reducer);</div><div class="line"></div><div class="line"><span class="comment">/* store.dispatch接受一个 Action 对象作为参数，将它发送出去。*/</span></div><div class="line">store.dispatch(&#123;</div><div class="line">  <span class="attr">type</span>: <span class="string">'ADD_TODO'</span>,</div><div class="line">  <span class="attr">payload</span>: <span class="string">'Learn Redux'</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">/* 结合 Action Creator，这段代码可以改写如下。 */</span></div><div class="line">store.dispatch(addTodo(<span class="string">'Learn Redux'</span>));</div></pre></td></tr></table></figure>
<h3 id="Reducer"><a href="#Reducer" class="headerlink" title="Reducer"></a>Reducer</h3><ul>
<li>Reducer 是一个函数</li>
<li>接受 <code>当前State</code> 和 <code>Action</code> 作为参数并返回新的 <code>State</code></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">const</span> chatReducer = <span class="function">(<span class="params">state = defaultState, action = &#123;&#125;</span>) =&gt;</span> &#123;</div><div class="line">  <span class="keyword">const</span> &#123; type, payload &#125; = action;</div><div class="line">  <span class="keyword">switch</span> (type) &#123;</div><div class="line">    <span class="keyword">case</span> ADD_CHAT:</div><div class="line">      <span class="keyword">return</span> <span class="built_in">Object</span>.assign(&#123;&#125;, state, &#123;</div><div class="line">        <span class="attr">chatLog</span>: state.chatLog.concat(payload)</div><div class="line">      &#125;);</div><div class="line">    <span class="keyword">case</span> CHANGE_STATUS:</div><div class="line">      <span class="keyword">return</span> <span class="built_in">Object</span>.assign(&#123;&#125;, state, &#123;</div><div class="line">        <span class="attr">statusMessage</span>: payload</div><div class="line">      &#125;);</div><div class="line">    <span class="keyword">case</span> CHANGE_USERNAME:</div><div class="line">      <span class="keyword">return</span> <span class="built_in">Object</span>.assign(&#123;&#125;, state, &#123;</div><div class="line">        <span class="attr">userName</span>: payload</div><div class="line">      &#125;);</div><div class="line">    <span class="keyword">default</span>: <span class="keyword">return</span> state;</div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="store-subscribe"><a href="#store-subscribe" class="headerlink" title="store.subscribe()"></a>store.subscribe()</h3><p id="border-blue"> <code>store.subscribe</code> 方法是用来设置监听函数，一旦 State 发生变化，就自动执行这个函数。</p>

<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">'redux'</span>;</div><div class="line"><span class="keyword">const</span> store = createStore(reducer);</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 把 View 的更新函数（对于 React 项目，就是组件的render方法或setState方法）放入listen，就会实现 View 的自动渲染。</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">let</span> unsubscribe = store.subscribe(listener);</div><div class="line"></div><div class="line"><span class="comment">/* store.subscribe 方法返回一个函数，调用该函数就可以 解除监听 。 */</span></div><div class="line">unsubscribe();</div></pre></td></tr></table></figure>
<h3 id="流程步骤"><a href="#流程步骤" class="headerlink" title="流程步骤"></a>流程步骤</h3><ol>
<li>首先需要在 <code>reducer 函数内</code>,定义 type 值和默认值对应的操作</li>
<li>把 reducer 函数放到 storeCreate(reducer) <code>进行初始化</code> ,初始化时 返回的是 reducer 函数内的默认值</li>
<li>通过 store.dispatch({type:’xxx’,value:123}) 来发送 Action 数据格式,以此来触发 reducer 函数,并更新 state 当前值</li>
<li>在通过 <code>store.subscribe</code> 检测 State 的变化,以此来更新 View</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;未完待续&quot;&gt;&lt;a href=&quot;#未完待续&quot; class=&quot;headerlink&quot; title=&quot;未完待续&quot;&gt;&lt;/a&gt;未完待续&lt;/h1&gt;&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p id=&quot;border-blue&quot;&gt;如果你的应用有以下场景，可以考虑使用 Redux。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;某个组件的状态 &lt;code&gt;需要共享&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;某个状态需要在 &lt;code&gt;任何地方&lt;/code&gt; 都可以获取&lt;/li&gt;
&lt;li&gt;一个组件想要 &lt;code&gt;改变全局状态&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;一个组件想要 &lt;code&gt;改变另一个组件状态&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="技术笔记" scheme="http://www.baixiaojian.com/categories/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="React" scheme="http://www.baixiaojian.com/tags/React/"/>
    
      <category term="笔记" scheme="http://www.baixiaojian.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>React 笔记</title>
    <link href="http://www.baixiaojian.com/React/"/>
    <id>http://www.baixiaojian.com/React/</id>
    <published>2017-07-10T02:17:19.000Z</published>
    <updated>2017-12-31T07:20:16.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h2><ul>
<li>注意区分大小写</li>
<li>单标签后面一定要有 <code>/</code> 闭合符</li>
</ul>
<a id="more"></a>
<h2 id="ReactDOM-render"><a href="#ReactDOM-render" class="headerlink" title="ReactDOM.render()"></a>ReactDOM.render()</h2><p> React 的最基本方法，用于 将模板转为 HTML 语言，并插入到指定的 DOM 节点。</p>
<h2 id="JSX-语法"><a href="#JSX-语法" class="headerlink" title="JSX 语法"></a>JSX 语法</h2><ul>
<li>JSX 的基本语法规则：<ul>
<li>遇到 HTML 标签（以 &lt; 开头），就用 HTML 规则解析；</li>
<li>遇到代码块（以 { 开头），就用 JavaScript 规则解析;</li>
<li>JSX 允许直接在模板插入 JS 变量 <code>{x}</code>。</li>
<li>如果这个变量是一个数组，则会展开这个数组的所有成员</li>
</ul>
</li>
</ul>
<h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><p>React 允许将代码封装成组件（component），然后像插入普通 HTML 标签一样，在网页中插入这个组件。</p>
<ul>
<li>组建类的第一个字母必须大写,否则会报错</li>
<li>组件类只能包含一个顶层标签,否则也会报错</li>
<li>组件可以任意加属性<ul>
<li>比如 <code>&lt;HelloMessage name=&quot;John&quot;&gt;</code></li>
<li>组件的属性可以在组件类的 <code>this.props</code>对象上获取 比如 <code>this.props.John</code><ul>
<li>添加组件属性，保留字需要注意就是</li>
<li>class 属性需要写成 className</li>
<li>for 属性需要写成 htmlFor</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="this-props-children"><a href="#this-props-children" class="headerlink" title="this.props.children"></a>this.props.children</h2><ul>
<li><code>this.props</code> 对象的属性与组件的属性一一对应.</li>
<li><code>this.props.children</code> 属性,表示组件的所有子节点</li>
</ul>
<p>React.Children.map 是专门来遍历 this.props.children 的一个方法</p>
<h2 id="PropTypes"><a href="#PropTypes" class="headerlink" title="PropTypes"></a>PropTypes</h2><ul>
<li>组件的属性可以接受任意值，字符串、对象、函数等等都可以。</li>
<li>有时，我们需要一种机制，验证别人使用组件时，提供的参数是否符合要求。</li>
<li><code>getDefaultProps</code> 方法可以用来设置组件属性的默认值。</li>
</ul>
<h2 id="获取真实的DOM节点"><a href="#获取真实的DOM节点" class="headerlink" title="获取真实的DOM节点"></a>获取真实的DOM节点</h2><ul>
<li>组件是存在于内存之中的一种数据结构，叫做虚拟(virtual) DOM,只有当它插入文档以后，才会变成真实的 DOM 。</li>
<li>React 中所有的 DOM 变动之前都先在虚拟 DOM 上发生，然后再将 <code>实际发生变动</code> 的部分，反映在真实DOM上，这种算法叫做 <code>DOM diff</code> ，它可以极大提高网页的性能表现。</li>
</ul>
<p>但是，有时需要从组件获取真实 DOM 的节点，这时就要用到 ref 属性.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> MyComponent = React.createClass(&#123;</div><div class="line">  <span class="attr">handleClick</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.refs.myTextInput.focus();</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">render</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      &lt;div&gt;</div><div class="line">        &lt;input type="text" ref="myTextInput" /&gt;</div><div class="line">        &lt;input type="button" value="Focus the text input" onClick=&#123;this.handleClick&#125; /&gt;</div><div class="line">      &lt;/div&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">ReactDOM.render(</div><div class="line">  &lt;MyComponent /&gt;,</div><div class="line">  document.getElementById('example')</div><div class="line">);</div></pre></td></tr></table></figure>
<ul>
<li>组件 <code>MyComponent</code> 的子节点有一个文本输入框，用于获取用户的输入。</li>
<li>这时就必须获取真实的 DOM 节点，<code>虚拟 DOM 是拿不到用户输入的</code>。</li>
<li>为了做到这一点，文本输入框 <code>必须有一个 ref 属性</code>，然后 this.refs.[refName] 就会返回这个真实的 DOM 节点。</li>
<li>由于 this.refs.[refName] 属性获取的是 <code>真实 DOM</code> ，所以<code>必须等到虚拟 DOM 插入文档以后</code>，才能使用这个属性，否则会报错。</li>
<li>上面代码中，通过为组件指定 Click 事件的回调函数，确保了只有等到真实 DOM 发生 Click 事件之后，才会读取 this.refs.[refName] 属性。</li>
</ul>
<h2 id="this-state"><a href="#this-state" class="headerlink" title="this.state"></a>this.state</h2><p>React 中将组件看成是一个状态机，开始有一个初始状态，然后用户互动，导致状态变化，从而触发重新渲染 UI</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> LikeButton = React.createClass(&#123;</div><div class="line">  <span class="attr">getInitialState</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> &#123;<span class="attr">liked</span>: <span class="literal">false</span>&#125;;</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">handleClick</span>: <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.setState(&#123;<span class="attr">liked</span>: !<span class="keyword">this</span>.state.liked&#125;);</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">render</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> text = <span class="keyword">this</span>.state.liked ? <span class="string">'like'</span> : <span class="string">'haven\'t liked'</span>;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleClick&#125;</span>&gt;</span></span></div><div class="line">        You &#123;text&#125; this. Click to toggle.</div><div class="line">     <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">ReactDOM.render(</div><div class="line">  <span class="xml"><span class="tag">&lt;<span class="name">LikeButton</span> /&gt;</span>,</span></div><div class="line">  document.getElementById('example')</div><div class="line">);</div></pre></td></tr></table></figure>
<ul>
<li><code>LikeButton</code> 组件中的 <code>getInitialState</code> 方法用于定义初始状态，也就是一个对象，这个对象可以通过 this.state 属性读取。</li>
<li>当用户点击组件，导致状态变化，<code>this.setState</code> 方法就修改状态值，每次修改以后，自动调用 this.render 方法，再次渲染组件。</li>
<li>由于 this.props 和 this.state 都用于描述组件的特性，可能会产生混淆。<ul>
<li>this.props 表示那些一旦定义，就不再改变的特性</li>
<li>this.state 是会随着用户互动而产生变化的特性</li>
</ul>
</li>
</ul>
<h2 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h2><p>类似于双向数据绑定</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">var</span> Input = React.createClass(&#123;</div><div class="line">  <span class="attr">getInitialState</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> &#123;<span class="attr">value</span>: <span class="string">'Hello!'</span>&#125;;</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">handleChange</span>: <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.setState(&#123;<span class="attr">value</span>: event.target.value&#125;);</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">render</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> value = <span class="keyword">this</span>.state.value;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></div><div class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">value</span>=<span class="string">&#123;value&#125;</span> <span class="attr">onChange</span>=<span class="string">&#123;this.handleChange&#125;</span> /&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;value&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">ReactDOM.render(<span class="tag">&lt;<span class="name">Input</span>/&gt;</span>, document.body);</div></pre></td></tr></table></figure>
<p>文本输入框的值，不能用 this.props.value 读取，而要定义一个 <code>onChange</code> 事件的回调函数，通过 <code>event.target.value</code> 读取用户输入的值。</p>
<h2 id="组建的生命周期"><a href="#组建的生命周期" class="headerlink" title="组建的生命周期"></a>组建的生命周期</h2><ul>
<li><p>组件周期的三个状态</p>
<ul>
<li>Mounting：已插入真实 DOM</li>
<li>Updating：正在被重新渲染</li>
<li>Unmounting：已移出真实 DOM</li>
</ul>
</li>
<li><p>React 为每个状态都提供了两种处理函数，<code>will 函数在进入状态之前调用</code>，<code>did 函数在进入状态之后调用</code></p>
<ul>
<li>componentWillMount()</li>
<li>componentDidMount()</li>
<li>componentWillUpdate(object nextProps, object nextState)</li>
<li>componentDidUpdate(object prevProps, object prevState)</li>
<li>componentWillUnmount()</li>
</ul>
</li>
<li><p>此外，React 还提供两种特殊状态的处理函数。</p>
<ul>
<li>componentWillReceiveProps(object nextProps)：已加载组件收到新的参数时调用</li>
<li>shouldComponentUpdate(object nextProps, object nextState)：组件判断是否重新渲染时调用</li>
</ul>
</li>
</ul>
<hr>
<p>参考自:<a href="http://www.ruanyifeng.com/blog/2015/03/react.html" rel="external nofollow noopener noreferrer" target="_blank">阮一峰入门实例教程</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;注意点&quot;&gt;&lt;a href=&quot;#注意点&quot; class=&quot;headerlink&quot; title=&quot;注意点&quot;&gt;&lt;/a&gt;注意点&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;注意区分大小写&lt;/li&gt;
&lt;li&gt;单标签后面一定要有 &lt;code&gt;/&lt;/code&gt; 闭合符&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="技术笔记" scheme="http://www.baixiaojian.com/categories/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="React" scheme="http://www.baixiaojian.com/tags/React/"/>
    
      <category term="笔记" scheme="http://www.baixiaojian.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 笔记</title>
    <link href="http://www.baixiaojian.com/Hexo%E6%93%8D%E4%BD%9C/"/>
    <id>http://www.baixiaojian.com/Hexo操作/</id>
    <published>2017-07-06T08:59:12.000Z</published>
    <updated>2018-09-29T03:44:01.995Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>hexo n “我的博客”</td>
<td>hexo new “我的博客” #新建文章</td>
</tr>
<tr>
<td>hexo p</td>
<td>hexo publish</td>
</tr>
<tr>
<td>hexo g</td>
<td>hexo generate#生成</td>
</tr>
<tr>
<td>hexo s</td>
<td>hexo server #启动服务预览</td>
</tr>
<tr>
<td>hexo d</td>
<td>hexo deploy#部署</td>
</tr>
</tbody>
</table>
<p id="border-purple">hexo d #部署 #可与hexo g合并为 <code>hexo d -g</code></p>

<a id="more"></a>
<h3 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h3><table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>hexo server</td>
<td>#Hexo 会监视文件变动并自动更新，您无须重启服务器</td>
</tr>
<tr>
<td>hexo server -s</td>
<td>#静态模式</td>
</tr>
<tr>
<td>hexo server -p 5000</td>
<td>#更改端口</td>
</tr>
<tr>
<td>hexo server -i 192.168.1.1</td>
<td>#自定义 IP</td>
</tr>
<tr>
<td>hexo clean</td>
<td>#清除缓存 网页正常情况下可以忽略此条命令</td>
</tr>
</tbody>
</table>
<h3 id="完成后部署"><a href="#完成后部署" class="headerlink" title="完成后部署"></a>完成后部署</h3><table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>hexo g</td>
<td>#生成静态网页</td>
</tr>
<tr>
<td>hexo d</td>
<td>#开始部署</td>
</tr>
</tbody>
</table>
<h3 id="模版"><a href="#模版" class="headerlink" title="模版"></a>模版</h3><table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>hexo new “postName”</td>
<td>#新建文章</td>
</tr>
<tr>
<td>hexo new page “pageName”</td>
<td>#新建页面</td>
</tr>
<tr>
<td>hexo generate</td>
<td>#生成静态页面至public目录</td>
</tr>
<tr>
<td>hexo server</td>
<td>#开启预览访问端口（默认端口4000，’ctrl + c’关闭server）</td>
</tr>
<tr>
<td>hexo deploy</td>
<td>#将.deploy目录部署到GitHub</td>
</tr>
</tbody>
</table>
<h3 id="写作"><a href="#写作" class="headerlink" title="写作"></a>写作</h3><table>
<thead>
<tr>
<th>变量</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>:title</td>
<td>标题</td>
</tr>
<tr>
<td>:year</td>
<td>建立的年份（4 位数）</td>
</tr>
<tr>
<td>:month</td>
<td>建立的月份（2 位数）</td>
</tr>
<tr>
<td>:i_month</td>
<td>建立的月份（去掉开头的零）</td>
</tr>
<tr>
<td>:day</td>
<td>建立的日期（2 位数）</td>
</tr>
<tr>
<td>:i_day</td>
<td>建立的日期（去掉开头的零）</td>
</tr>
</tbody>
</table>
<p><strong>示例：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">title: 搭建个人博客</div><div class="line">layout: post</div><div class="line">date: 2020-01-01 12:00:00</div><div class="line">comments: true</div><div class="line">categories: Blog</div><div class="line">tags: [Hexo]</div><div class="line">words: Hexo, Blog</div><div class="line">description: 搭建个人博客还是要用 Hexo</div></pre></td></tr></table></figure>
<hr>
<h2 id="书写语法"><a href="#书写语法" class="headerlink" title="书写语法"></a>书写语法</h2><h3 id="自定义图片大小"><a href="#自定义图片大小" class="headerlink" title="自定义图片大小"></a>自定义图片大小</h3><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">标准：&#123;% img [class names] /path/image [width] [height] [title text [alt text]] %&#125;</div><div class="line">例如：&#123;% img  /imgs/baiyan.jpg 100 50  %&#125;</div></pre></td></tr></table></figure>
<h3 id="突破容器宽度限制的图片的三种方式"><a href="#突破容器宽度限制的图片的三种方式" class="headerlink" title="突破容器宽度限制的图片的三种方式"></a>突破容器宽度限制的图片的三种方式</h3><p id="border-blue">当使用此标签引用图片时，图片将自动扩大 26%，并突破文章容器的宽度。 此标签使用于需要突出显示的图片, 图片的扩大与容器的偏差从视觉上 <code>提升图片的吸引力</code> 。</p>

<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&lt;img src=&quot;/image-url&quot; class=&quot;full-image&quot; /&gt;</div><div class="line">&#123;% fullimage /image-url, alt, title %&#125;</div><div class="line">&#123;% fi /image-url, alt, title %&#125;</div></pre></td></tr></table></figure>
<h3 id="Bootstrap-Callout"><a href="#Bootstrap-Callout" class="headerlink" title="Bootstrap Callout"></a>Bootstrap Callout</h3><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&#123;% note class_name %&#125; Content (md partial supported) &#123;% endnote %&#125;</div></pre></td></tr></table></figure>
<p>其中，<code>class_name</code> 可以是以下列表中的一个值：</p>
<ul>
<li>default  默认</li>
<li>primary  提示</li>
<li>success  成功</li>
<li>info     提示</li>
<li>warning  警告</li>
<li>danger   危险</li>
</ul>
<h3 id="从书中引用"><a href="#从书中引用" class="headerlink" title="从书中引用"></a>从书中引用</h3><blockquote><p>新：DevDocs现在附带语法高亮。<a href="http://devdocs.io" rel="external nofollow noopener noreferrer" target="_blank">http://devdocs.io</a></p>
<footer><strong>@DevDocs</strong><cite><a href="https://twitter.com/devdocs/status/356095192085962752" rel="external nofollow noopener noreferrer" target="_blank">twitter.com/devdocs/status/356095192085962752</a></cite></footer></blockquote>
<h3 id="文本居中的引用3中方式"><a href="#文本居中的引用3中方式" class="headerlink" title="文本居中的引用3中方式"></a>文本居中的引用3中方式</h3><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&lt;blockquote class=&quot;blockquote-center&quot;&gt;blah blah blah&lt;/blockquote&gt;</div><div class="line">&#123;% centerquote %&#125;blah blah blah&#123;% endcenterquote %&#125;</div><div class="line">&#123;% cq %&#125;人一切的痛苦，本质上都是对自己的无能的愤怒&#123;% endcq %&#125;   推荐</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;基本操作&quot;&gt;&lt;a href=&quot;#基本操作&quot; class=&quot;headerlink&quot; title=&quot;基本操作&quot;&gt;&lt;/a&gt;基本操作&lt;/h2&gt;&lt;h3 id=&quot;常用命令&quot;&gt;&lt;a href=&quot;#常用命令&quot; class=&quot;headerlink&quot; title=&quot;常用命令&quot;&gt;&lt;/a&gt;常用命令&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;命令&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;hexo n “我的博客”&lt;/td&gt;
&lt;td&gt;hexo new “我的博客” #新建文章&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;hexo p&lt;/td&gt;
&lt;td&gt;hexo publish&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;hexo g&lt;/td&gt;
&lt;td&gt;hexo generate#生成&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;hexo s&lt;/td&gt;
&lt;td&gt;hexo server #启动服务预览&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;hexo d&lt;/td&gt;
&lt;td&gt;hexo deploy#部署&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p id=&quot;border-purple&quot;&gt;hexo d #部署 #可与hexo g合并为 &lt;code&gt;hexo d -g&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Hexo" scheme="http://www.baixiaojian.com/categories/Hexo/"/>
    
    
      <category term="快捷键" scheme="http://www.baixiaojian.com/tags/%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    
  </entry>
  
</feed>
